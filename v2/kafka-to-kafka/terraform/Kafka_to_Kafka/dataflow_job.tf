

# Autogenerated file. DO NOT EDIT.
#
# Copyright (C) 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
#


variable "on_delete" {
  type        = string
  description = "One of \"drain\" or \"cancel\". Specifies behavior of deletion during terraform destroy."
}

variable "project" {
  type        = string
  description = "The Google Cloud Project ID within which this module provisions resources."
}

variable "region" {
  type        = string
  description = "The region in which the created job should run."
}

variable "readBootstrapServerAndTopic" {
  type        = string
  description = "Kafka Bootstrap server and topic to read the input from. (Example: localhost:9092;topic1,topic2)"

}

variable "enableCommitOffsets" {
  type        = bool
  description = "Commit offsets of processed messages to Kafka. If enabled, this will minimize the gaps or duplicate processing of messages when restarting the pipeline. Requires specifying the Consumer Group ID. Defaults to: false."
  default     = null
}

variable "consumerGroupId" {
  type        = string
  description = "The unique identifier for the consumer group that this pipeline belongs to. Required if Commit Offsets to Kafka is enabled. Defaults to empty."
  default     = null
}

variable "kafkaReadOffset" {
  type        = string
  description = "The starting point for reading messages when no committed offsets exist. The earliest starts from the beginning, the latest from the newest message. Defaults to: latest."
  default     = null
}

variable "kafkaReadAuthenticationMode" {
  type        = string
  description = "The mode of authentication to use with the Kafka cluster. Use NONE for no authentication, SASL_PLAIN for SASL/PLAIN username and password, TLSfor certificate-based authentication. APPLICATION_DEFAULT_CREDENTIALS should be used only for Google Cloud Apache Kafka for BigQuery cluster since This allow you to authenticate with Google Cloud Apache Kafka for BigQuery using application default credentials"
  default     = "APPLICATION_DEFAULT_CREDENTIALS"
}

variable "kafkaReadUsernameSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the Kafka username to use with SASL_PLAIN authentication. (Example: projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>). Defaults to empty."
  default     = null
}

variable "kafkaReadPasswordSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the Kafka password to use with SASL_PLAIN authentication. (Example: projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>). Defaults to empty."
  default     = null
}

variable "kafkaReadKeystoreLocation" {
  type        = string
  description = "The Google Cloud Storage path to the Java KeyStore (JKS) file that contains the TLS certificate and private key to use when authenticating with the Kafka cluster. (Example: gs://your-bucket/keystore.jks)"
  default     = null
}

variable "kafkaReadTruststoreLocation" {
  type        = string
  description = "The Google Cloud Storage path to the Java TrustStore (JKS) file that contains the trusted certificates to use to verify the identity of the Kafka broker."
  default     = null
}

variable "kafkaReadTruststorePasswordSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the password to use to access the Java TrustStore (JKS) file for Kafka TLS authentication (Example: projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>)"
  default     = null
}

variable "kafkaReadKeystorePasswordSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the password to use to access the Java KeyStore (JKS) file for Kafka TLS authentication. (Example: projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>)"
  default     = null
}

variable "kafkaReadKeyPasswordSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the password to use to access the private key within the Java KeyStore (JKS) file for Kafka TLS authentication. (Example: projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>)"
  default     = null
}

variable "writeBootstrapServerAndTopic" {
  type        = string
  description = "Kafka topic to write the output to."

}

variable "kafkaWriteAuthenticationMethod" {
  type        = string
  description = "The mode of authentication to use with the Kafka cluster. Use NONE for no authentication, SASL_PLAIN for SASL/PLAIN username and password, and TLS for certificate-based authentication. Defaults to: APPLICATION_DEFAULT_CREDENTIALS."
  default     = "APPLICATION_DEFAULT_CREDENTIALS"
}

variable "kafkaWriteUsernameSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the Kafka username  for SASL_PLAIN authentication with the destination Kafka cluster. (Example: projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>). Defaults to empty."
  default     = null
}

variable "kafkaWritePasswordSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the Kafka password to use for SASL_PLAIN authentication with the destination Kafka cluster. (Example: projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>). Defaults to empty."
  default     = null
}

variable "kafkaWriteKeystoreLocation" {
  type        = string
  description = "The Google Cloud Storage path to the Java KeyStore (JKS) file that contains the TLS certificate and private key for authenticating with the destination Kafka cluster. (Example: gs://<BUCKET>/<KEYSTORE>.jks)"
  default     = null
}

variable "kafkaWriteTruststoreLocation" {
  type        = string
  description = "The Google Cloud Storage path to the Java TrustStore (JKS) file that contains the trusted certificates to use to verify the identity of the destination Kafka broker."
  default     = null
}

variable "kafkaWriteTruststorePasswordSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the password to use to access the Java TrustStore (JKS) file for TLS authentication with the destination Kafka cluster. (Example: projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>)"
  default     = null
}

variable "kafkaWriteKeystorePasswordSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the password to access the Java KeyStore (JKS) file to use for TLS authentication with the destination Kafka cluster. (Example: projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>)"
  default     = null
}

variable "kafkaWriteKeyPasswordSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the password to use to access the private key within the Java KeyStore (JKS) file for TLS authentication with the destination Kafka cluster. (Example: projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>)"
  default     = null
}


provider "google" {
  project = var.project
}

provider "google-beta" {
  project = var.project
}

variable "additional_experiments" {
  type        = set(string)
  description = "List of experiments that should be used by the job. An example value is  'enable_stackdriver_agent_metrics'."
  default     = null
}

variable "autoscaling_algorithm" {
  type        = string
  description = "The algorithm to use for autoscaling"
  default     = null
}

variable "enable_streaming_engine" {
  type        = bool
  description = "Indicates if the job should use the streaming engine feature."
  default     = null
}

variable "ip_configuration" {
  type        = string
  description = "The configuration for VM IPs. Options are 'WORKER_IP_PUBLIC' or 'WORKER_IP_PRIVATE'."
  default     = null
}

variable "kms_key_name" {
  type        = string
  description = "The name for the Cloud KMS key for the job. Key format is: projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY"
  default     = null
}

variable "labels" {
  type        = map(string)
  description = "User labels to be specified for the job. Keys and values should follow the restrictions specified in the labeling restrictions page. NOTE: This field is non-authoritative, and will only manage the labels present in your configuration.				Please refer to the field 'effective_labels' for all of the labels present on the resource."
  default     = null
}

variable "launcher_machine_type" {
  type        = string
  description = "The machine type to use for launching the job. The default is n1-standard-1."
  default     = null
}

variable "machine_type" {
  type        = string
  description = "The machine type to use for the job."
  default     = null
}

variable "max_workers" {
  type        = number
  description = "The maximum number of Google Compute Engine instances to be made available to your pipeline during execution, from 1 to 1000."
  default     = null
}

variable "name" {
  type = string
}

variable "network" {
  type        = string
  description = "The network to which VMs will be assigned. If it is not provided, 'default' will be used."
  default     = null
}

variable "num_workers" {
  type        = number
  description = "The initial number of Google Compute Engine instances for the job."
  default     = null
}

variable "sdk_container_image" {
  type        = string
  description = "Docker registry location of container image to use for the 'worker harness. Default is the container for the version of the SDK. Note this field is only valid for portable pipelines."
  default     = null
}

variable "service_account_email" {
  type        = string
  description = "The Service Account email used to create the job."
  default     = null
}

variable "skip_wait_on_job_termination" {
  type        = bool
  description = "If true, treat DRAINING and CANCELLING as terminal job states and do not wait for further changes before removing from terraform state and moving on. WARNING: this will lead to job name conflicts if you do not ensure that the job names are different, e.g. by embedding a release ID or by using a random_id."
  default     = null
}

variable "staging_location" {
  type        = string
  description = "The Cloud Storage path to use for staging files. Must be a valid Cloud Storage URL, beginning with gs://."
  default     = null
}

variable "subnetwork" {
  type        = string
  description = "The subnetwork to which VMs will be assigned. Should be of the form 'regions/REGION/subnetworks/SUBNETWORK'."
  default     = null
}

variable "temp_location" {
  type        = string
  description = "The Cloud Storage path to use for temporary files. Must be a valid Cloud Storage URL, beginning with gs://."
  default     = null
}

resource "google_project_service" "required" {
  service            = "dataflow.googleapis.com"
  disable_on_destroy = false
}

resource "google_dataflow_flex_template_job" "generated" {
  depends_on              = [google_project_service.required]
  provider                = google-beta
  container_spec_gcs_path = "gs://dataflow-templates-${var.region}/latest/flex/Kafka_to_Kafka"
  parameters = {
    readBootstrapServerAndTopic          = var.readBootstrapServerAndTopic
    enableCommitOffsets                  = tostring(var.enableCommitOffsets)
    consumerGroupId                      = var.consumerGroupId
    kafkaReadOffset                      = var.kafkaReadOffset
    kafkaReadAuthenticationMode          = var.kafkaReadAuthenticationMode
    kafkaReadUsernameSecretId            = var.kafkaReadUsernameSecretId
    kafkaReadPasswordSecretId            = var.kafkaReadPasswordSecretId
    kafkaReadKeystoreLocation            = var.kafkaReadKeystoreLocation
    kafkaReadTruststoreLocation          = var.kafkaReadTruststoreLocation
    kafkaReadTruststorePasswordSecretId  = var.kafkaReadTruststorePasswordSecretId
    kafkaReadKeystorePasswordSecretId    = var.kafkaReadKeystorePasswordSecretId
    kafkaReadKeyPasswordSecretId         = var.kafkaReadKeyPasswordSecretId
    writeBootstrapServerAndTopic         = var.writeBootstrapServerAndTopic
    kafkaWriteAuthenticationMethod       = var.kafkaWriteAuthenticationMethod
    kafkaWriteUsernameSecretId           = var.kafkaWriteUsernameSecretId
    kafkaWritePasswordSecretId           = var.kafkaWritePasswordSecretId
    kafkaWriteKeystoreLocation           = var.kafkaWriteKeystoreLocation
    kafkaWriteTruststoreLocation         = var.kafkaWriteTruststoreLocation
    kafkaWriteTruststorePasswordSecretId = var.kafkaWriteTruststorePasswordSecretId
    kafkaWriteKeystorePasswordSecretId   = var.kafkaWriteKeystorePasswordSecretId
    kafkaWriteKeyPasswordSecretId        = var.kafkaWriteKeyPasswordSecretId
  }

  additional_experiments       = var.additional_experiments
  autoscaling_algorithm        = var.autoscaling_algorithm
  enable_streaming_engine      = var.enable_streaming_engine
  ip_configuration             = var.ip_configuration
  kms_key_name                 = var.kms_key_name
  labels                       = var.labels
  launcher_machine_type        = var.launcher_machine_type
  machine_type                 = var.machine_type
  max_workers                  = var.max_workers
  name                         = var.name
  network                      = var.network
  num_workers                  = var.num_workers
  sdk_container_image          = var.sdk_container_image
  service_account_email        = var.service_account_email
  skip_wait_on_job_termination = var.skip_wait_on_job_termination
  staging_location             = var.staging_location
  subnetwork                   = var.subnetwork
  temp_location                = var.temp_location
  region                       = var.region
}

output "dataflow_job_url" {
  value = "https://console.cloud.google.com/dataflow/jobs/${var.region}/${google_dataflow_flex_template_job.generated.job_id}"
}

