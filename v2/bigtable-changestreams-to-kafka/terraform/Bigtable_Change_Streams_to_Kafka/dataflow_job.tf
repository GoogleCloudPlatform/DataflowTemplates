

# Autogenerated file. DO NOT EDIT.
#
# Copyright (C) 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
#


variable "on_delete" {
  type        = string
  description = "One of \"drain\" or \"cancel\". Specifies behavior of deletion during terraform destroy."
}

variable "project" {
  type        = string
  description = "The Google Cloud Project ID within which this module provisions resources."
}

variable "region" {
  type        = string
  description = "The region in which the created job should run."
}

variable "dlqDirectory" {
  type        = string
  description = "The directory for the dead-letter queue. Records that fail to be processed are stored in this directory. Defaults to a directory under the Dataflow job temp location. In most cases, you can use the default path."
  default     = null
}

variable "dlqRetryMinutes" {
  type        = number
  description = "The number of minutes between dead-letter queue retries. Defaults to `10`."
  default     = null
}

variable "dlqMaxRetries" {
  type        = number
  description = "The dead letter maximum retries. Defaults to `5`."
  default     = null
}

variable "disableDlqRetries" {
  type        = bool
  description = "Whether or not to disable retries for the DLQ. Defaults to: false."
  default     = null
}

variable "bigtableChangeStreamMetadataInstanceId" {
  type        = string
  description = "The Bigtable change streams metadata instance ID. Defaults to empty."
  default     = null
}

variable "bigtableChangeStreamMetadataTableTableId" {
  type        = string
  description = "The ID of the Bigtable change streams connector metadata table. If not provided, a Bigtable change streams connector metadata table is automatically created during pipeline execution. Defaults to empty."
  default     = null
}

variable "bigtableChangeStreamAppProfile" {
  type        = string
  description = "The Bigtable application profile ID. The application profile must use single-cluster routing and allow single-row transactions."

}

variable "bigtableChangeStreamCharset" {
  type        = string
  description = "The Bigtable change streams charset name. Defaults to: UTF-8."
  default     = null
}

variable "bigtableChangeStreamStartTimestamp" {
  type        = string
  description = "The starting timestamp (https://tools.ietf.org/html/rfc3339), inclusive, to use for reading change streams. For example, `2022-05-05T07:59:59Z`. Defaults to the timestamp of the pipeline start time."
  default     = null
}

variable "bigtableChangeStreamIgnoreColumnFamilies" {
  type        = string
  description = "A comma-separated list of column family name changes to ignore. Defaults to empty."
  default     = null
}

variable "bigtableChangeStreamIgnoreColumns" {
  type        = string
  description = <<EOT
A comma-separated list of column name changes to ignore. Example: "cf1:col1,cf2:col2". Defaults to empty.
EOT
  default     = null
}

variable "bigtableChangeStreamName" {
  type        = string
  description = "A unique name for the client pipeline. Lets you resume processing from the point at which a previously running pipeline stopped. Defaults to an automatically generated name. See the Dataflow job logs for the value used."
  default     = null
}

variable "bigtableChangeStreamResume" {
  type        = bool
  description = "When set to `true`, a new pipeline resumes processing from the point at which a previously running pipeline with the same `bigtableChangeStreamName` value stopped. If the pipeline with the given `bigtableChangeStreamName` value has never run, a new pipeline doesn't start. When set to `false`, a new pipeline starts. If a pipeline with the same `bigtableChangeStreamName` value has already run for the given source, a new pipeline doesn't start. Defaults to `false`."
  default     = null
}

variable "bigtableReadInstanceId" {
  type        = string
  description = "The source Bigtable instance ID."

}

variable "bigtableReadTableId" {
  type        = string
  description = "The source Bigtable table ID."

}

variable "bigtableReadProjectId" {
  type        = string
  description = "The Bigtable project ID. The default is the project for the Dataflow job."
  default     = null
}

variable "writeBootstrapServerAndTopic" {
  type        = string
  description = "Kafka topic to write the output to."

}

variable "kafkaWriteAuthenticationMethod" {
  type        = string
  description = "The mode of authentication to use with the Kafka cluster. Use NONE for no authentication, SASL_PLAIN for SASL/PLAIN username and password,  SASL_SCRAM_512 for SASL_SCRAM_512 based authentication and TLS for certificate-based authentication. Defaults to: APPLICATION_DEFAULT_CREDENTIALS."
  default     = "APPLICATION_DEFAULT_CREDENTIALS"
}

variable "kafkaWriteUsernameSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the Kafka username  for SASL_PLAIN authentication with the destination Kafka cluster. For example, `projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>`. Defaults to empty."
  default     = null
}

variable "kafkaWritePasswordSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the Kafka password to use for SASL_PLAIN authentication with the destination Kafka cluster. For example, `projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>`. Defaults to empty."
  default     = null
}

variable "kafkaWriteKeystoreLocation" {
  type        = string
  description = "The Google Cloud Storage path to the Java KeyStore (JKS) file that contains the TLS certificate and private key for authenticating with the destination Kafka cluster. For example, `gs://<BUCKET>/<KEYSTORE>.jks`"
  default     = null
}

variable "kafkaWriteTruststoreLocation" {
  type        = string
  description = "The Google Cloud Storage path to the Java TrustStore (JKS) file that contains the trusted certificates to use to verify the identity of the destination Kafka broker."
  default     = null
}

variable "kafkaWriteTruststorePasswordSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the password to use to access the Java TrustStore (JKS) file for TLS authentication with the destination Kafka cluster. For example, `projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>`"
  default     = null
}

variable "kafkaWriteKeystorePasswordSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the password to access the Java KeyStore (JKS) file to use for TLS authentication with the destination Kafka cluster. For example, `projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>`"
  default     = null
}

variable "kafkaWriteKeyPasswordSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the password to use to access the private key within the Java KeyStore (JKS) file for TLS authentication with the destination Kafka cluster. For example, `projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>`"
  default     = null
}

variable "kafkaReadSaslScramUsernameSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the Kafka username to use with `SASL_SCRAM` authentication. For example, `projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>`"
  default     = null
}

variable "kafkaReadSaslScramPasswordSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the Kafka password to use with `SASL_SCRAM` authentication. For example, `projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>`"
  default     = null
}

variable "kafkaReadSaslScramTruststoreLocation" {
  type        = string
  description = "The Google Cloud Storage path to the Java TrustStore (JKS) file that contains the trusted certificates to use to verify the identity of the Kafka broker."
  default     = null
}

variable "kafkaReadSaslScramTruststorePasswordSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the password to use to access the Java TrustStore (JKS) file for Kafka SASL_SCRAM authentication For example, `projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>`"
  default     = null
}

variable "messageFormat" {
  type        = string
  description = "The format of the Kafka messages to read. The supported values are `AVRO_CONFLUENT_WIRE_FORMAT` (Confluent Schema Registry encoded Avro), `AVRO_BINARY_ENCODING` (Plain binary Avro), and `JSON`. Defaults to: AVRO_CONFLUENT_WIRE_FORMAT."
  default     = "AVRO_CONFLUENT_WIRE_FORMAT"
}

variable "schemaFormat" {
  type        = string
  description = "The Kafka schema format. Can be provided as `SINGLE_SCHEMA_FILE` or `SCHEMA_REGISTRY`. If `SINGLE_SCHEMA_FILE` is specified, use the schema mentioned in the avro schema file for all messages. If `SCHEMA_REGISTRY` is specified, the messages can have either a single schema or multiple schemas. Defaults to: SINGLE_SCHEMA_FILE."
  default     = null
}

variable "confluentAvroSchemaPath" {
  type        = string
  description = "The Google Cloud Storage path to the single Avro schema file used to decode all of the messages in a topic. Defaults to empty."
  default     = null
}

variable "schemaRegistryConnectionUrl" {
  type        = string
  description = "The URL for the Confluent Schema Registry instance used to manage Avro schemas for message decoding. Defaults to empty."
  default     = null
}

variable "binaryAvroSchemaPath" {
  type        = string
  description = "The Google Cloud Storage path to the Avro schema file used to decode binary-encoded Avro messages. Defaults to empty."
  default     = null
}

variable "schemaRegistryAuthenticationMode" {
  type        = string
  description = "Schema Registry authentication mode. Can be NONE, TLS or OAUTH. Defaults to: NONE."
  default     = null
}

variable "schemaRegistryTruststoreLocation" {
  type        = string
  description = "Location of the SSL certificate where the trust store for authentication to Schema Registry are stored. For example, `/your-bucket/truststore.jks`"
  default     = null
}

variable "schemaRegistryTruststorePasswordSecretId" {
  type        = string
  description = "SecretId in secret manager where the password to access secret in truststore is stored. For example, `projects/your-project-number/secrets/your-secret-name/versions/your-secret-version`"
  default     = null
}

variable "schemaRegistryKeystoreLocation" {
  type        = string
  description = "Keystore location that contains the SSL certificate and private key. For example, `/your-bucket/keystore.jks`"
  default     = null
}

variable "schemaRegistryKeystorePasswordSecretId" {
  type        = string
  description = "SecretId in secret manager where the password to access the keystore file For example, `projects/your-project-number/secrets/your-secret-name/versions/your-secret-version`"
  default     = null
}

variable "schemaRegistryKeyPasswordSecretId" {
  type        = string
  description = "SecretId of password required to access the client's private key stored within the keystore For example, `projects/your-project-number/secrets/your-secret-name/versions/your-secret-version`"
  default     = null
}

variable "schemaRegistryOauthClientId" {
  type        = string
  description = "Client ID used to authenticate the Schema Registry client in OAUTH mode. Required for AVRO_CONFLUENT_WIRE_FORMAT message format."
  default     = null
}

variable "schemaRegistryOauthClientSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the Client Secret to use to authenticate the Schema Registry client in OAUTH mode. Required for AVRO_CONFLUENT_WIRE_FORMAT message format. For example, `projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>`"
  default     = null
}

variable "schemaRegistryOauthScope" {
  type        = string
  description = "The access token scope used to authenticate the Schema Registry client in OAUTH mode. This field is optional, as the request can be made without a scope parameter passed. For example, `openid`"
  default     = null
}

variable "schemaRegistryOauthTokenEndpointUrl" {
  type        = string
  description = "The HTTP(S)-based URL for the OAuth/OIDC identity provider used to authenticate the Schema Registry client in OAUTH mode. Required for AVRO_CONFLUENT_WIRE_FORMAT message format."
  default     = null
}


provider "google" {
  project = var.project
}

provider "google-beta" {
  project = var.project
}

variable "additional_experiments" {
  type        = set(string)
  description = "List of experiments that should be used by the job. An example value is  'enable_stackdriver_agent_metrics'."
  default     = null
}

variable "autoscaling_algorithm" {
  type        = string
  description = "The algorithm to use for autoscaling"
  default     = null
}

variable "enable_streaming_engine" {
  type        = bool
  description = "Indicates if the job should use the streaming engine feature."
  default     = null
}

variable "ip_configuration" {
  type        = string
  description = "The configuration for VM IPs. Options are 'WORKER_IP_PUBLIC' or 'WORKER_IP_PRIVATE'."
  default     = null
}

variable "kms_key_name" {
  type        = string
  description = "The name for the Cloud KMS key for the job. Key format is: projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY"
  default     = null
}

variable "labels" {
  type        = map(string)
  description = "User labels to be specified for the job. Keys and values should follow the restrictions specified in the labeling restrictions page. NOTE: This field is non-authoritative, and will only manage the labels present in your configuration.				Please refer to the field 'effective_labels' for all of the labels present on the resource."
  default     = null
}

variable "launcher_machine_type" {
  type        = string
  description = "The machine type to use for launching the job. The default is n1-standard-1."
  default     = null
}

variable "machine_type" {
  type        = string
  description = "The machine type to use for the job."
  default     = null
}

variable "max_workers" {
  type        = number
  description = "The maximum number of Google Compute Engine instances to be made available to your pipeline during execution, from 1 to 1000."
  default     = null
}

variable "name" {
  type = string
}

variable "network" {
  type        = string
  description = "The network to which VMs will be assigned. If it is not provided, 'default' will be used."
  default     = null
}

variable "num_workers" {
  type        = number
  description = "The initial number of Google Compute Engine instances for the job."
  default     = null
}

variable "sdk_container_image" {
  type        = string
  description = "Docker registry location of container image to use for the 'worker harness. Default is the container for the version of the SDK. Note this field is only valid for portable pipelines."
  default     = null
}

variable "service_account_email" {
  type        = string
  description = "The Service Account email used to create the job."
  default     = null
}

variable "skip_wait_on_job_termination" {
  type        = bool
  description = "If true, treat DRAINING and CANCELLING as terminal job states and do not wait for further changes before removing from terraform state and moving on. WARNING: this will lead to job name conflicts if you do not ensure that the job names are different, e.g. by embedding a release ID or by using a random_id."
  default     = null
}

variable "staging_location" {
  type        = string
  description = "The Cloud Storage path to use for staging files. Must be a valid Cloud Storage URL, beginning with gs://."
  default     = null
}

variable "subnetwork" {
  type        = string
  description = "The subnetwork to which VMs will be assigned. Should be of the form 'regions/REGION/subnetworks/SUBNETWORK'."
  default     = null
}

variable "temp_location" {
  type        = string
  description = "The Cloud Storage path to use for temporary files. Must be a valid Cloud Storage URL, beginning with gs://."
  default     = null
}

resource "google_project_service" "required" {
  service            = "dataflow.googleapis.com"
  disable_on_destroy = false
}

resource "google_dataflow_flex_template_job" "generated" {
  depends_on              = [google_project_service.required]
  provider                = google-beta
  container_spec_gcs_path = "gs://dataflow-templates-${var.region}/latest/flex/Bigtable_Change_Streams_to_Kafka"
  parameters = {
    dlqDirectory                                 = var.dlqDirectory
    dlqRetryMinutes                              = tostring(var.dlqRetryMinutes)
    dlqMaxRetries                                = tostring(var.dlqMaxRetries)
    disableDlqRetries                            = tostring(var.disableDlqRetries)
    bigtableChangeStreamMetadataInstanceId       = var.bigtableChangeStreamMetadataInstanceId
    bigtableChangeStreamMetadataTableTableId     = var.bigtableChangeStreamMetadataTableTableId
    bigtableChangeStreamAppProfile               = var.bigtableChangeStreamAppProfile
    bigtableChangeStreamCharset                  = var.bigtableChangeStreamCharset
    bigtableChangeStreamStartTimestamp           = var.bigtableChangeStreamStartTimestamp
    bigtableChangeStreamIgnoreColumnFamilies     = var.bigtableChangeStreamIgnoreColumnFamilies
    bigtableChangeStreamIgnoreColumns            = var.bigtableChangeStreamIgnoreColumns
    bigtableChangeStreamName                     = var.bigtableChangeStreamName
    bigtableChangeStreamResume                   = tostring(var.bigtableChangeStreamResume)
    bigtableReadInstanceId                       = var.bigtableReadInstanceId
    bigtableReadTableId                          = var.bigtableReadTableId
    bigtableReadProjectId                        = var.bigtableReadProjectId
    writeBootstrapServerAndTopic                 = var.writeBootstrapServerAndTopic
    kafkaWriteAuthenticationMethod               = var.kafkaWriteAuthenticationMethod
    kafkaWriteUsernameSecretId                   = var.kafkaWriteUsernameSecretId
    kafkaWritePasswordSecretId                   = var.kafkaWritePasswordSecretId
    kafkaWriteKeystoreLocation                   = var.kafkaWriteKeystoreLocation
    kafkaWriteTruststoreLocation                 = var.kafkaWriteTruststoreLocation
    kafkaWriteTruststorePasswordSecretId         = var.kafkaWriteTruststorePasswordSecretId
    kafkaWriteKeystorePasswordSecretId           = var.kafkaWriteKeystorePasswordSecretId
    kafkaWriteKeyPasswordSecretId                = var.kafkaWriteKeyPasswordSecretId
    kafkaReadSaslScramUsernameSecretId           = var.kafkaReadSaslScramUsernameSecretId
    kafkaReadSaslScramPasswordSecretId           = var.kafkaReadSaslScramPasswordSecretId
    kafkaReadSaslScramTruststoreLocation         = var.kafkaReadSaslScramTruststoreLocation
    kafkaReadSaslScramTruststorePasswordSecretId = var.kafkaReadSaslScramTruststorePasswordSecretId
    messageFormat                                = var.messageFormat
    schemaFormat                                 = var.schemaFormat
    confluentAvroSchemaPath                      = var.confluentAvroSchemaPath
    schemaRegistryConnectionUrl                  = var.schemaRegistryConnectionUrl
    binaryAvroSchemaPath                         = var.binaryAvroSchemaPath
    schemaRegistryAuthenticationMode             = var.schemaRegistryAuthenticationMode
    schemaRegistryTruststoreLocation             = var.schemaRegistryTruststoreLocation
    schemaRegistryTruststorePasswordSecretId     = var.schemaRegistryTruststorePasswordSecretId
    schemaRegistryKeystoreLocation               = var.schemaRegistryKeystoreLocation
    schemaRegistryKeystorePasswordSecretId       = var.schemaRegistryKeystorePasswordSecretId
    schemaRegistryKeyPasswordSecretId            = var.schemaRegistryKeyPasswordSecretId
    schemaRegistryOauthClientId                  = var.schemaRegistryOauthClientId
    schemaRegistryOauthClientSecretId            = var.schemaRegistryOauthClientSecretId
    schemaRegistryOauthScope                     = var.schemaRegistryOauthScope
    schemaRegistryOauthTokenEndpointUrl          = var.schemaRegistryOauthTokenEndpointUrl
  }

  additional_experiments       = var.additional_experiments
  autoscaling_algorithm        = var.autoscaling_algorithm
  enable_streaming_engine      = var.enable_streaming_engine
  ip_configuration             = var.ip_configuration
  kms_key_name                 = var.kms_key_name
  labels                       = var.labels
  launcher_machine_type        = var.launcher_machine_type
  machine_type                 = var.machine_type
  max_workers                  = var.max_workers
  name                         = var.name
  network                      = var.network
  num_workers                  = var.num_workers
  sdk_container_image          = var.sdk_container_image
  service_account_email        = var.service_account_email
  skip_wait_on_job_termination = var.skip_wait_on_job_termination
  staging_location             = var.staging_location
  subnetwork                   = var.subnetwork
  temp_location                = var.temp_location
  region                       = var.region
}

output "dataflow_job_url" {
  value = "https://console.cloud.google.com/dataflow/jobs/${var.region}/${google_dataflow_flex_template_job.generated.job_id}"
}

