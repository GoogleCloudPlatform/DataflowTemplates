

# Autogenerated file. DO NOT EDIT.
#
# Copyright (C) 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
#


variable "on_delete" {
  type        = string
  description = "One of \"drain\" or \"cancel\". Specifies behavior of deletion during terraform destroy."
}

variable "project" {
  type        = string
  description = "The Google Cloud Project ID within which this module provisions resources."
}

variable "region" {
  type        = string
  description = "The region in which the created job should run."
}

variable "readIdColumn" {
  type        = string
  description = "The name of the BigQuery column storing the unique identifier of the row."

}

variable "inputTableSpec" {
  type        = string
  description = "The BigQuery table to read from. If you specify `inputTableSpec`, the template reads the data directly from BigQuery storage by using the BigQuery Storage Read API (https://cloud.google.com/bigquery/docs/reference/storage). For information about limitations in the Storage Read API, see https://cloud.google.com/bigquery/docs/reference/storage#limitations. You must specify either `inputTableSpec` or `query`. If you set both parameters, the template uses the `query` parameter. For example, `<BIGQUERY_PROJECT>:<DATASET_NAME>.<INPUT_TABLE>`"
  default     = null
}

variable "outputDeadletterTable" {
  type        = string
  description = "The BigQuery table for messages that failed to reach the output table. If a table doesn't exist, it is created during pipeline execution. If not specified, `<outputTableSpec>_error_records` is used. For example, `<PROJECT_ID>:<DATASET_NAME>.<DEADLETTER_TABLE>`"
  default     = null
}

variable "query" {
  type        = string
  description = "The SQL query to use to read data from BigQuery. If the BigQuery dataset is in a different project than the Dataflow job, specify the full dataset name in the SQL query, for example: <PROJECT_ID>.<DATASET_NAME>.<TABLE_NAME>. By default, the `query` parameter uses GoogleSQL (https://cloud.google.com/bigquery/docs/introduction-sql), unless `useLegacySql` is `true`. You must specify either `inputTableSpec` or `query`. If you set both parameters, the template uses the `query` parameter. For example, `select * from sampledb.sample_table`"
  default     = null
}

variable "useLegacySql" {
  type        = bool
  description = "Set to `true` to use legacy SQL. This parameter only applies when using the `query` parameter. Defaults to `false`."
  default     = null
}

variable "queryLocation" {
  type        = string
  description = "Needed when reading from an authorized view without underlying table's permission. For example, `US`"
  default     = null
}

variable "queryTempDataset" {
  type        = string
  description = "With this option, you can set an existing dataset to create the temporary table to store the results of the query. For example, `temp_dataset`"
  default     = null
}

variable "KMSEncryptionKey" {
  type        = string
  description = "If reading from BigQuery using query source, use this Cloud KMS key to encrypt any temporary tables created. For example, `projects/your-project/locations/global/keyRings/your-keyring/cryptoKeys/your-key`"
  default     = null
}

variable "bigtableRpcAttemptTimeoutMs" {
  type        = number
  description = "The timeout for each Bigtable RPC attempt in milliseconds."
  default     = null
}

variable "bigtableRpcTimeoutMs" {
  type        = number
  description = "The total timeout for a Bigtable RPC operation in milliseconds."
  default     = null
}

variable "bigtableAdditionalRetryCodes" {
  type        = string
  description = "The additional retry codes. For example, `RESOURCE_EXHAUSTED,DEADLINE_EXCEEDED`"
  default     = null
}

variable "bigtableWriteInstanceId" {
  type        = string
  description = "The ID of the Bigtable instance that contains the table."

}

variable "bigtableWriteTableId" {
  type        = string
  description = "The ID of the Bigtable table to write to."

}

variable "bigtableWriteColumnFamily" {
  type        = string
  description = "The name of the column family of the Bigtable table to write data into."

}

variable "bigtableWriteAppProfile" {
  type        = string
  description = "The ID of the Bigtable application profile to use for the export. If you do not specify an app profile, Bigtable uses the default app profile (https://cloud.google.com/bigtable/docs/app-profiles#default-app-profile) of the instance."
  default     = null
}

variable "bigtableWriteProjectId" {
  type        = string
  description = "The ID of the Google Cloud project that contains the Bigtable instanceto write data to."
  default     = null
}

variable "bigtableBulkWriteLatencyTargetMs" {
  type        = number
  description = "The latency target of Bigtable in milliseconds for latency-based throttling."
  default     = null
}

variable "bigtableBulkWriteMaxRowKeyCount" {
  type        = number
  description = "The maximum number of row keys in a Bigtable batch write operation."
  default     = null
}

variable "bigtableBulkWriteMaxRequestSizeBytes" {
  type        = number
  description = "The maximum bytes to include per Bigtable batch write operation."
  default     = null
}


provider "google" {
  project = var.project
}

provider "google-beta" {
  project = var.project
}

variable "additional_experiments" {
  type        = set(string)
  description = "List of experiments that should be used by the job. An example value is  'enable_stackdriver_agent_metrics'."
  default     = null
}

variable "autoscaling_algorithm" {
  type        = string
  description = "The algorithm to use for autoscaling"
  default     = null
}

variable "enable_streaming_engine" {
  type        = bool
  description = "Indicates if the job should use the streaming engine feature."
  default     = null
}

variable "ip_configuration" {
  type        = string
  description = "The configuration for VM IPs. Options are 'WORKER_IP_PUBLIC' or 'WORKER_IP_PRIVATE'."
  default     = null
}

variable "kms_key_name" {
  type        = string
  description = "The name for the Cloud KMS key for the job. Key format is: projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY"
  default     = null
}

variable "labels" {
  type        = map(string)
  description = "User labels to be specified for the job. Keys and values should follow the restrictions specified in the labeling restrictions page. NOTE: This field is non-authoritative, and will only manage the labels present in your configuration.				Please refer to the field 'effective_labels' for all of the labels present on the resource."
  default     = null
}

variable "launcher_machine_type" {
  type        = string
  description = "The machine type to use for launching the job. The default is n1-standard-1."
  default     = null
}

variable "machine_type" {
  type        = string
  description = "The machine type to use for the job."
  default     = null
}

variable "max_workers" {
  type        = number
  description = "The maximum number of Google Compute Engine instances to be made available to your pipeline during execution, from 1 to 1000."
  default     = null
}

variable "name" {
  type        = string
  description = "A unique name for the resource, required by Dataflow."
}

variable "network" {
  type        = string
  description = "The network to which VMs will be assigned. If it is not provided, 'default' will be used."
  default     = null
}

variable "num_workers" {
  type        = number
  description = "The initial number of Google Compute Engine instances for the job."
  default     = null
}

variable "sdk_container_image" {
  type        = string
  description = "Docker registry location of container image to use for the 'worker harness. Default is the container for the version of the SDK. Note this field is only valid for portable pipelines."
  default     = null
}

variable "service_account_email" {
  type        = string
  description = "The Service Account email used to create the job."
  default     = null
}

variable "skip_wait_on_job_termination" {
  type        = bool
  description = "If true, treat DRAINING and CANCELLING as terminal job states and do not wait for further changes before removing from terraform state and moving on. WARNING: this will lead to job name conflicts if you do not ensure that the job names are different, e.g. by embedding a release ID or by using a random_id."
  default     = null
}

variable "staging_location" {
  type        = string
  description = "The Cloud Storage path to use for staging files. Must be a valid Cloud Storage URL, beginning with gs://."
  default     = null
}

variable "subnetwork" {
  type        = string
  description = "The subnetwork to which VMs will be assigned. Should be of the form 'regions/REGION/subnetworks/SUBNETWORK'."
  default     = null
}

variable "temp_location" {
  type        = string
  description = "The Cloud Storage path to use for temporary files. Must be a valid Cloud Storage URL, beginning with gs://."
  default     = null
}

resource "google_project_service" "required" {
  service            = "dataflow.googleapis.com"
  disable_on_destroy = false
}

resource "google_dataflow_flex_template_job" "generated" {
  depends_on              = [google_project_service.required]
  provider                = google-beta
  container_spec_gcs_path = "gs://dataflow-templates-${var.region}/latest/flex/BigQuery_to_Bigtable"
  parameters = {
    readIdColumn                         = var.readIdColumn
    inputTableSpec                       = var.inputTableSpec
    outputDeadletterTable                = var.outputDeadletterTable
    query                                = var.query
    useLegacySql                         = tostring(var.useLegacySql)
    queryLocation                        = var.queryLocation
    queryTempDataset                     = var.queryTempDataset
    KMSEncryptionKey                     = var.KMSEncryptionKey
    bigtableRpcAttemptTimeoutMs          = tostring(var.bigtableRpcAttemptTimeoutMs)
    bigtableRpcTimeoutMs                 = tostring(var.bigtableRpcTimeoutMs)
    bigtableAdditionalRetryCodes         = var.bigtableAdditionalRetryCodes
    bigtableWriteInstanceId              = var.bigtableWriteInstanceId
    bigtableWriteTableId                 = var.bigtableWriteTableId
    bigtableWriteColumnFamily            = var.bigtableWriteColumnFamily
    bigtableWriteAppProfile              = var.bigtableWriteAppProfile
    bigtableWriteProjectId               = var.bigtableWriteProjectId
    bigtableBulkWriteLatencyTargetMs     = tostring(var.bigtableBulkWriteLatencyTargetMs)
    bigtableBulkWriteMaxRowKeyCount      = tostring(var.bigtableBulkWriteMaxRowKeyCount)
    bigtableBulkWriteMaxRequestSizeBytes = tostring(var.bigtableBulkWriteMaxRequestSizeBytes)
  }

  additional_experiments       = var.additional_experiments
  autoscaling_algorithm        = var.autoscaling_algorithm
  enable_streaming_engine      = var.enable_streaming_engine
  ip_configuration             = var.ip_configuration
  kms_key_name                 = var.kms_key_name
  labels                       = var.labels
  launcher_machine_type        = var.launcher_machine_type
  machine_type                 = var.machine_type
  max_workers                  = var.max_workers
  name                         = var.name
  network                      = var.network
  num_workers                  = var.num_workers
  on_delete                    = var.on_delete
  sdk_container_image          = var.sdk_container_image
  service_account_email        = var.service_account_email
  skip_wait_on_job_termination = var.skip_wait_on_job_termination
  staging_location             = var.staging_location
  subnetwork                   = var.subnetwork
  temp_location                = var.temp_location
  region                       = var.region
}

output "dataflow_job_url" {
  value = "https://console.cloud.google.com/dataflow/jobs/${var.region}/${google_dataflow_flex_template_job.generated.job_id}"
}

