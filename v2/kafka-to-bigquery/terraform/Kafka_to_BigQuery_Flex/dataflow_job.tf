

# Autogenerated file. DO NOT EDIT.
#
# Copyright (C) 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
#


variable "on_delete" {
  type        = string
  description = "One of \"drain\" or \"cancel\". Specifies behavior of deletion during terraform destroy."
}

variable "project" {
  type        = string
  description = "The Google Cloud Project ID within which this module provisions resources."
}

variable "region" {
  type        = string
  description = "The region in which the created job should run."
}

variable "readBootstrapServerAndTopic" {
  type        = string
  description = "Kafka Topic to read the input from."

}

variable "outputTableSpec" {
  type        = string
  description = "BigQuery table location to write the output to. The name should be in the format `<project>:<dataset>.<table_name>`. The table's schema must match input objects."
  default     = null
}

variable "persistKafkaKey" {
  type        = bool
  description = "If true, the pipeline will persist the Kafka message key in the BigQuery table, in a `_key` field of type `BYTES`. Default is `false` (Key is ignored)."
  default     = null
}

variable "writeMode" {
  type        = string
  description = "Write records to one table or multiple tables (based on schema). The `DYNAMIC_TABLE_NAMES` mode is supported only for `AVRO_CONFLUENT_WIRE_FORMAT` Source Message Format and `SCHEMA_REGISTRY` Schema Source. The target table name is auto-generated based on the Avro schema name of each message, it could either be a single schema (creating a single table) or multiple schemas (creating multiple tables). The `SINGLE_TABLE_NAME` mode writes to a single table (single schema) specified by the user. Defaults to `SINGLE_TABLE_NAME`."
  default     = "SINGLE_TABLE_NAME"
}

variable "outputProject" {
  type        = string
  description = "BigQuery output project in wehich the dataset resides. Tables will be created dynamically in the dataset. Defaults to empty."
  default     = null
}

variable "outputDataset" {
  type        = string
  description = "BigQuery output dataset to write the output to. Tables will be created dynamically in the dataset. If the tables are created beforehand, the table names should follow the specified naming convention. The name should be `bqTableNamePrefix + Avro Schema FullName` , each word will be separated by a hyphen `-`. Defaults to empty."
  default     = null
}

variable "bqTableNamePrefix" {
  type        = string
  description = "Naming prefix to be used while creating BigQuery output tables. Only applicable when using schema registry. Defaults to empty."
  default     = null
}

variable "createDisposition" {
  type        = string
  description = "BigQuery CreateDisposition. For example: `CREATE_IF_NEEDED`, `CREATE_NEVER`. Defaults to: CREATE_IF_NEEDED."
  default     = null
}

variable "writeDisposition" {
  type        = string
  description = "BigQuery WriteDisposition. For example: `WRITE_APPEND`, `WRITE_EMPTY` or `WRITE_TRUNCATE`. Defaults to: WRITE_APPEND."
  default     = null
}

variable "useAutoSharding" {
  type        = bool
  description = "If true, the pipeline uses auto-sharding when writng to BigQueryThe default value is `true`."
  default     = null
}

variable "numStorageWriteApiStreams" {
  type        = number
  description = "Specifies the number of write streams, this parameter must be set. Default is `0`."
  default     = null
}

variable "storageWriteApiTriggeringFrequencySec" {
  type        = number
  description = "Specifies the triggering frequency in seconds, this parameter must be set. Default is 5 seconds."
  default     = null
}

variable "useStorageWriteApiAtLeastOnce" {
  type        = bool
  description = <<EOT
This parameter takes effect only if "Use BigQuery Storage Write API" is enabled. If enabled the at-least-once semantics will be used for Storage Write API, otherwise exactly-once semantics will be used. Defaults to: false.
EOT
  default     = null
}

variable "enableCommitOffsets" {
  type        = bool
  description = "Commit offsets of processed messages to Kafka. If enabled, this will minimize the gaps or duplicate processing of messages when restarting the pipeline. Requires specifying the Consumer Group ID. Defaults to: false."
  default     = null
}

variable "consumerGroupId" {
  type        = string
  description = "The unique identifier for the consumer group that this pipeline belongs to. Required if Commit Offsets to Kafka is enabled. Defaults to empty."
  default     = null
}

variable "kafkaReadOffset" {
  type        = string
  description = "The starting point for reading messages when no committed offsets exist. The earliest starts from the beginning, the latest from the newest message. Defaults to: latest."
  default     = null
}

variable "kafkaReadAuthenticationMode" {
  type        = string
  description = "The mode of authentication to use with the Kafka cluster. Use `KafkaAuthenticationMethod.NONE` for no authentication, `KafkaAuthenticationMethod.SASL_PLAIN` for SASL/PLAIN username and password, `KafkaAuthenticationMethod.SASL_SCRAM_512` for SASL_SCRAM_512 authentication and `KafkaAuthenticationMethod.TLS` for certificate-based authentication. `KafkaAuthenticationMethod.APPLICATION_DEFAULT_CREDENTIALS` should be used only for Google Cloud Apache Kafka for BigQuery cluster, it allows to authenticate using application default credentials."
  default     = "SASL_PLAIN"
}

variable "kafkaReadUsernameSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the Kafka username to use with `SASL_PLAIN` authentication. For example, `projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>`. Defaults to empty."
  default     = null
}

variable "kafkaReadPasswordSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the Kafka password to use with `SASL_PLAIN` authentication. For example, `projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>`. Defaults to empty."
  default     = null
}

variable "kafkaReadKeystoreLocation" {
  type        = string
  description = "The Google Cloud Storage path to the Java KeyStore (JKS) file that contains the TLS certificate and private key to use when authenticating with the Kafka cluster. For example, `gs://your-bucket/keystore.jks`"
  default     = null
}

variable "kafkaReadTruststoreLocation" {
  type        = string
  description = "The Google Cloud Storage path to the Java TrustStore (JKS) file that contains the trusted certificates to use to verify the identity of the Kafka broker."
  default     = null
}

variable "kafkaReadTruststorePasswordSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the password to use to access the Java TrustStore (JKS) file for Kafka TLS authentication For example, `projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>`"
  default     = null
}

variable "kafkaReadKeystorePasswordSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the password to use to access the Java KeyStore (JKS) file for Kafka TLS authentication. For example, `projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>`"
  default     = null
}

variable "kafkaReadKeyPasswordSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the password to use to access the private key within the Java KeyStore (JKS) file for Kafka TLS authentication. For example, `projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>`"
  default     = null
}

variable "kafkaReadSaslScramUsernameSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the Kafka username to use with `SASL_SCRAM` authentication. For example, `projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>`"
  default     = null
}

variable "kafkaReadSaslScramPasswordSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the Kafka password to use with `SASL_SCRAM` authentication. For example, `projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>`"
  default     = null
}

variable "kafkaReadSaslScramTruststoreLocation" {
  type        = string
  description = "The Google Cloud Storage path to the Java TrustStore (JKS) file that contains the trusted certificates to use to verify the identity of the Kafka broker."
  default     = null
}

variable "kafkaReadSaslScramTruststorePasswordSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the password to use to access the Java TrustStore (JKS) file for Kafka SASL_SCRAM authentication For example, `projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>`"
  default     = null
}

variable "messageFormat" {
  type        = string
  description = "The format of the Kafka messages to read. The supported values are `AVRO_CONFLUENT_WIRE_FORMAT` (Confluent Schema Registry encoded Avro), `AVRO_BINARY_ENCODING` (Plain binary Avro), and `JSON`. Defaults to: AVRO_CONFLUENT_WIRE_FORMAT."
  default     = "AVRO_CONFLUENT_WIRE_FORMAT"
}

variable "schemaFormat" {
  type        = string
  description = "The Kafka schema format. Can be provided as `SINGLE_SCHEMA_FILE` or `SCHEMA_REGISTRY`. If `SINGLE_SCHEMA_FILE` is specified, use the schema mentioned in the avro schema file for all messages. If `SCHEMA_REGISTRY` is specified, the messages can have either a single schema or multiple schemas. Defaults to: SINGLE_SCHEMA_FILE."
  default     = null
}

variable "confluentAvroSchemaPath" {
  type        = string
  description = "The Google Cloud Storage path to the single Avro schema file used to decode all of the messages in a topic. Defaults to empty."
  default     = null
}

variable "schemaRegistryConnectionUrl" {
  type        = string
  description = "The URL for the Confluent Schema Registry instance used to manage Avro schemas for message decoding. Defaults to empty."
  default     = null
}

variable "binaryAvroSchemaPath" {
  type        = string
  description = "The Google Cloud Storage path to the Avro schema file used to decode binary-encoded Avro messages. Defaults to empty."
  default     = null
}

variable "schemaRegistryAuthenticationMode" {
  type        = string
  description = "Schema Registry authentication mode. Can be NONE, TLS or OAUTH. Defaults to: NONE."
  default     = null
}

variable "schemaRegistryTruststoreLocation" {
  type        = string
  description = "Location of the SSL certificate where the trust store for authentication to Schema Registry are stored. For example, `/your-bucket/truststore.jks`"
  default     = null
}

variable "schemaRegistryTruststorePasswordSecretId" {
  type        = string
  description = "SecretId in secret manager where the password to access secret in truststore is stored. For example, `projects/your-project-number/secrets/your-secret-name/versions/your-secret-version`"
  default     = null
}

variable "schemaRegistryKeystoreLocation" {
  type        = string
  description = "Keystore location that contains the SSL certificate and private key. For example, `/your-bucket/keystore.jks`"
  default     = null
}

variable "schemaRegistryKeystorePasswordSecretId" {
  type        = string
  description = "SecretId in secret manager where the password to access the keystore file For example, `projects/your-project-number/secrets/your-secret-name/versions/your-secret-version`"
  default     = null
}

variable "schemaRegistryKeyPasswordSecretId" {
  type        = string
  description = "SecretId of password required to access the client's private key stored within the keystore For example, `projects/your-project-number/secrets/your-secret-name/versions/your-secret-version`"
  default     = null
}

variable "schemaRegistryOauthClientId" {
  type        = string
  description = "Client ID used to authenticate the Schema Registry client in OAUTH mode. Required for AVRO_CONFLUENT_WIRE_FORMAT message format."
  default     = null
}

variable "schemaRegistryOauthClientSecretId" {
  type        = string
  description = "The Google Cloud Secret Manager secret ID that contains the Client Secret to use to authenticate the Schema Registry client in OAUTH mode. Required for AVRO_CONFLUENT_WIRE_FORMAT message format. For example, `projects/<PROJECT_ID>/secrets/<SECRET_ID>/versions/<SECRET_VERSION>`"
  default     = null
}

variable "schemaRegistryOauthScope" {
  type        = string
  description = "The access token scope used to authenticate the Schema Registry client in OAUTH mode. This field is optional, as the request can be made without a scope parameter passed. For example, `openid`"
  default     = null
}

variable "schemaRegistryOauthTokenEndpointUrl" {
  type        = string
  description = "The HTTP(S)-based URL for the OAuth/OIDC identity provider used to authenticate the Schema Registry client in OAUTH mode. Required for AVRO_CONFLUENT_WIRE_FORMAT message format."
  default     = null
}

variable "outputDeadletterTable" {
  type        = string
  description = "Fully Qualified BigQuery table name for failed messages. Messages failed to reach the output table for different reasons (e.g., mismatched schema, malformed json) are written to this table.The table will be created by the template. For example, `your-project-id:your-dataset.your-table-name`"
  default     = null
}

variable "useBigQueryDLQ" {
  type        = bool
  description = "If true, failed messages will be written to BigQuery with extra error information. Defaults to: false."
  default     = false
}

variable "javascriptTextTransformGcsPath" {
  type        = string
  description = "The Cloud Storage URI of the .js file that defines the JavaScript user-defined function (UDF) to use. For example, `gs://my-bucket/my-udfs/my_file.js`"
  default     = null
}

variable "javascriptTextTransformFunctionName" {
  type        = string
  description = "The name of the JavaScript user-defined function (UDF) to use. For example, if your JavaScript function code is `myTransform(inJson) { /*...do stuff...*/ }`, then the function name is `myTransform`. For sample JavaScript UDFs, see UDF Examples (https://github.com/GoogleCloudPlatform/DataflowTemplates#udf-examples)."
  default     = null
}

variable "javascriptTextTransformReloadIntervalMinutes" {
  type        = number
  description = "Specifies how frequently to reload the UDF, in minutes. If the value is greater than 0, Dataflow periodically checks the UDF file in Cloud Storage, and reloads the UDF if the file is modified. This parameter allows you to update the UDF while the pipeline is running, without needing to restart the job. If the value is `0`, UDF reloading is disabled. The default value is `0`."
  default     = null
}


provider "google" {
  project = var.project
}

provider "google-beta" {
  project = var.project
}

variable "additional_experiments" {
  type        = set(string)
  description = "List of experiments that should be used by the job. An example value is  'enable_stackdriver_agent_metrics'."
  default     = null
}

variable "autoscaling_algorithm" {
  type        = string
  description = "The algorithm to use for autoscaling"
  default     = null
}

variable "enable_streaming_engine" {
  type        = bool
  description = "Indicates if the job should use the streaming engine feature."
  default     = null
}

variable "ip_configuration" {
  type        = string
  description = "The configuration for VM IPs. Options are 'WORKER_IP_PUBLIC' or 'WORKER_IP_PRIVATE'."
  default     = null
}

variable "kms_key_name" {
  type        = string
  description = "The name for the Cloud KMS key for the job. Key format is: projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY"
  default     = null
}

variable "labels" {
  type        = map(string)
  description = "User labels to be specified for the job. Keys and values should follow the restrictions specified in the labeling restrictions page. NOTE: This field is non-authoritative, and will only manage the labels present in your configuration.				Please refer to the field 'effective_labels' for all of the labels present on the resource."
  default     = null
}

variable "launcher_machine_type" {
  type        = string
  description = "The machine type to use for launching the job. The default is n1-standard-1."
  default     = null
}

variable "machine_type" {
  type        = string
  description = "The machine type to use for the job."
  default     = null
}

variable "max_workers" {
  type        = number
  description = "The maximum number of Google Compute Engine instances to be made available to your pipeline during execution, from 1 to 1000."
  default     = null
}

variable "name" {
  type        = string
  description = "A unique name for the resource, required by Dataflow."
}

variable "network" {
  type        = string
  description = "The network to which VMs will be assigned. If it is not provided, 'default' will be used."
  default     = null
}

variable "num_workers" {
  type        = number
  description = "The initial number of Google Compute Engine instances for the job."
  default     = null
}

variable "sdk_container_image" {
  type        = string
  description = "Docker registry location of container image to use for the 'worker harness. Default is the container for the version of the SDK. Note this field is only valid for portable pipelines."
  default     = null
}

variable "service_account_email" {
  type        = string
  description = "The Service Account email used to create the job."
  default     = null
}

variable "skip_wait_on_job_termination" {
  type        = bool
  description = "If true, treat DRAINING and CANCELLING as terminal job states and do not wait for further changes before removing from terraform state and moving on. WARNING: this will lead to job name conflicts if you do not ensure that the job names are different, e.g. by embedding a release ID or by using a random_id."
  default     = null
}

variable "staging_location" {
  type        = string
  description = "The Cloud Storage path to use for staging files. Must be a valid Cloud Storage URL, beginning with gs://."
  default     = null
}

variable "subnetwork" {
  type        = string
  description = "The subnetwork to which VMs will be assigned. Should be of the form 'regions/REGION/subnetworks/SUBNETWORK'."
  default     = null
}

variable "temp_location" {
  type        = string
  description = "The Cloud Storage path to use for temporary files. Must be a valid Cloud Storage URL, beginning with gs://."
  default     = null
}

resource "google_project_service" "required" {
  service            = "dataflow.googleapis.com"
  disable_on_destroy = false
}

resource "google_dataflow_flex_template_job" "generated" {
  depends_on              = [google_project_service.required]
  provider                = google-beta
  container_spec_gcs_path = "gs://dataflow-templates-${var.region}/latest/flex/Kafka_to_BigQuery_Flex"
  parameters = {
    readBootstrapServerAndTopic                  = var.readBootstrapServerAndTopic
    outputTableSpec                              = var.outputTableSpec
    persistKafkaKey                              = tostring(var.persistKafkaKey)
    writeMode                                    = var.writeMode
    outputProject                                = var.outputProject
    outputDataset                                = var.outputDataset
    bqTableNamePrefix                            = var.bqTableNamePrefix
    createDisposition                            = var.createDisposition
    writeDisposition                             = var.writeDisposition
    useAutoSharding                              = tostring(var.useAutoSharding)
    numStorageWriteApiStreams                    = tostring(var.numStorageWriteApiStreams)
    storageWriteApiTriggeringFrequencySec        = tostring(var.storageWriteApiTriggeringFrequencySec)
    useStorageWriteApiAtLeastOnce                = tostring(var.useStorageWriteApiAtLeastOnce)
    enableCommitOffsets                          = tostring(var.enableCommitOffsets)
    consumerGroupId                              = var.consumerGroupId
    kafkaReadOffset                              = var.kafkaReadOffset
    kafkaReadAuthenticationMode                  = var.kafkaReadAuthenticationMode
    kafkaReadUsernameSecretId                    = var.kafkaReadUsernameSecretId
    kafkaReadPasswordSecretId                    = var.kafkaReadPasswordSecretId
    kafkaReadKeystoreLocation                    = var.kafkaReadKeystoreLocation
    kafkaReadTruststoreLocation                  = var.kafkaReadTruststoreLocation
    kafkaReadTruststorePasswordSecretId          = var.kafkaReadTruststorePasswordSecretId
    kafkaReadKeystorePasswordSecretId            = var.kafkaReadKeystorePasswordSecretId
    kafkaReadKeyPasswordSecretId                 = var.kafkaReadKeyPasswordSecretId
    kafkaReadSaslScramUsernameSecretId           = var.kafkaReadSaslScramUsernameSecretId
    kafkaReadSaslScramPasswordSecretId           = var.kafkaReadSaslScramPasswordSecretId
    kafkaReadSaslScramTruststoreLocation         = var.kafkaReadSaslScramTruststoreLocation
    kafkaReadSaslScramTruststorePasswordSecretId = var.kafkaReadSaslScramTruststorePasswordSecretId
    messageFormat                                = var.messageFormat
    schemaFormat                                 = var.schemaFormat
    confluentAvroSchemaPath                      = var.confluentAvroSchemaPath
    schemaRegistryConnectionUrl                  = var.schemaRegistryConnectionUrl
    binaryAvroSchemaPath                         = var.binaryAvroSchemaPath
    schemaRegistryAuthenticationMode             = var.schemaRegistryAuthenticationMode
    schemaRegistryTruststoreLocation             = var.schemaRegistryTruststoreLocation
    schemaRegistryTruststorePasswordSecretId     = var.schemaRegistryTruststorePasswordSecretId
    schemaRegistryKeystoreLocation               = var.schemaRegistryKeystoreLocation
    schemaRegistryKeystorePasswordSecretId       = var.schemaRegistryKeystorePasswordSecretId
    schemaRegistryKeyPasswordSecretId            = var.schemaRegistryKeyPasswordSecretId
    schemaRegistryOauthClientId                  = var.schemaRegistryOauthClientId
    schemaRegistryOauthClientSecretId            = var.schemaRegistryOauthClientSecretId
    schemaRegistryOauthScope                     = var.schemaRegistryOauthScope
    schemaRegistryOauthTokenEndpointUrl          = var.schemaRegistryOauthTokenEndpointUrl
    outputDeadletterTable                        = var.outputDeadletterTable
    useBigQueryDLQ                               = tostring(var.useBigQueryDLQ)
    javascriptTextTransformGcsPath               = var.javascriptTextTransformGcsPath
    javascriptTextTransformFunctionName          = var.javascriptTextTransformFunctionName
    javascriptTextTransformReloadIntervalMinutes = tostring(var.javascriptTextTransformReloadIntervalMinutes)
  }

  additional_experiments       = var.additional_experiments
  autoscaling_algorithm        = var.autoscaling_algorithm
  enable_streaming_engine      = var.enable_streaming_engine
  ip_configuration             = var.ip_configuration
  kms_key_name                 = var.kms_key_name
  labels                       = var.labels
  launcher_machine_type        = var.launcher_machine_type
  machine_type                 = var.machine_type
  max_workers                  = var.max_workers
  name                         = var.name
  network                      = var.network
  num_workers                  = var.num_workers
  on_delete                    = var.on_delete
  sdk_container_image          = var.sdk_container_image
  service_account_email        = var.service_account_email
  skip_wait_on_job_termination = var.skip_wait_on_job_termination
  staging_location             = var.staging_location
  subnetwork                   = var.subnetwork
  temp_location                = var.temp_location
  region                       = var.region
}

output "dataflow_job_url" {
  value = "https://console.cloud.google.com/dataflow/jobs/${var.region}/${google_dataflow_flex_template_job.generated.job_id}"
}

