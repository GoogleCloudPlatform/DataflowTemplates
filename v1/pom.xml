<?xml version="1.0" encoding="UTF-8"?>
<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~ Copyright (C) 2020 Google Inc.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License"); you may not
  ~ use this file except in compliance with the License. You may obtain a copy of
  ~ the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  ~ WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  ~ License for the specific language governing permissions and limitations under
  ~ the License.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.google.cloud.teleport</groupId>
    <artifactId>templates</artifactId>
    <version>1.0-SNAPSHOT</version>
  </parent>

  <artifactId>classic-templates</artifactId>
  <version>1.0-SNAPSHOT</version>
  <name>Google Cloud Teleport Classic</name>
  <description>
    Cloud Teleport Classic is a collection of Apache Beam pipelines for common tasks, like data movement
    across databases or batch transforms on random datasets. They are released as Dataflow Classic Templates.
  </description>

  <properties>
    <autovalue.service.version>1.0-rc6</autovalue.service.version>
    <extra.enforcer.rules.version>1.3</extra.enforcer.rules.version>
    <mock-server-netty.version>5.14.0</mock-server-netty.version>
    <open-census.version>0.24.0</open-census.version>
    <!-- TODO: check if this could be declared on a Beam BOM instead of here -->
    <bigtable-beam-import.version>1.27.1</bigtable-beam-import.version>
    <protobuf.version>3.21.7</protobuf.version>
    <nashorn.version>15.4</nashorn.version>
    <junit.jupiter.version>5.5.2</junit.jupiter.version>
    <codehaus-jackson.version>1.9.13</codehaus-jackson.version>
    <commons-csv.version>1.8</commons-csv.version>
    <commons-text.version>1.10.0</commons-text.version>
    <grpc.gen.version>1.13.1</grpc.gen.version>
    <kafka.clients.version>1.0.0</kafka.clients.version>
    <threetenbp.version>1.4.4</threetenbp.version>
    <spring.version>5.2.22.RELEASE</spring.version>
    <tensorflow.version>1.15.0</tensorflow.version>
    <dlp.version>2.1.0</dlp.version>
    <hbase.version>2.5.3-hadoop3</hbase.version>
    <scassandra.version>1.1.2</scassandra.version>
    <cassandra.driver.version>3.6.0</cassandra.driver.version>
    <kms.version>1.40.0</kms.version>
    <proto-kms.version>0.87.0</proto-kms.version>
    <jacoco.version>0.8.8</jacoco.version>
    <excluded.spanner.tests>com.google.cloud.teleport.spanner.IntegrationTest</excluded.spanner.tests>
  </properties>

  <dependencyManagement>
      <dependencies>
        <dependency>
            <groupId>com.google.cloud</groupId>
            <artifactId>google-cloud-spanner-bom</artifactId>
            <version>6.45.3</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
        <dependency>
          <groupId>org.apache.beam</groupId>
          <artifactId>beam-sdks-java-bom</artifactId>
          <version>${beam.version}</version>
          <type>pom</type>
          <scope>import</scope>
        </dependency>
        <!-- Enforce Conscrypt version -->
        <dependency>
            <groupId>org.conscrypt</groupId>
            <artifactId>conscrypt-openjdk-uber</artifactId>
            <version>${conscrypt.version}</version>
        </dependency>
      </dependencies>
  </dependencyManagement>

  <dependencies>
    <!-- Templates Annotations -->
    <dependency>
      <groupId>com.google.cloud.teleport.metadata</groupId>
      <artifactId>metadata</artifactId>
      <version>${project.version}</version>
    </dependency>
    <!-- Beam -->
    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-sdks-java-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-sdks-java-io-google-cloud-platform</artifactId>
      <exclusions>
        <exclusion>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.google.cloud</groupId>
      <artifactId>google-cloud-spanner</artifactId>
    </dependency>
    <dependency>
      <groupId>org.threeten</groupId>
      <artifactId>threetenbp</artifactId>
      <version>${threetenbp.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-sdks-java-extensions-google-cloud-platform-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-sdks-java-extensions-protobuf</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-runners-google-cloud-dataflow-java</artifactId>
    </dependency>
    <!-- Direct runner included for local development and testing. -->
    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-runners-direct-java</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-sdks-java-io-jdbc</artifactId>
    </dependency>

    <!-- Dependencies needed for the Cassandra to CBT pipeline -->
    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-sdks-java-io-cassandra</artifactId>
      <exclusions>
        <exclusion>
          <groupId>com.github.jnr</groupId>
          <artifactId>jffi</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>com.datastax.cassandra</groupId>
      <artifactId>cassandra-driver-core</artifactId>
      <version>${cassandra.driver.version}</version>
      <exclusions>
        <exclusion>
          <groupId>com.github.jnr</groupId>
          <artifactId>jffi</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-mapreduce-client-core</artifactId>
      <version>${hadoop.version}</version>
      <exclusions>
        <exclusion>
          <groupId>org.codehaus.jackson</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-common</artifactId>
      <version>${hadoop.version}</version>
      <exclusions>
        <exclusion>
          <groupId>org.apache.commons</groupId>
          <artifactId>commons-lang3</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.codehaus.jackson</groupId>
          <artifactId>*</artifactId>
        </exclusion>
        <exclusion>
          <groupId>asm</groupId>
          <artifactId>asm</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.hbase</groupId>
      <artifactId>hbase-common</artifactId>
      <version>${hbase.version}</version>
      <scope>provided</scope>
      <exclusions>
        <exclusion>
          <groupId>org.apache.hadoop</groupId>
          <artifactId>*</artifactId>
        </exclusion>
        <exclusion>
          <groupId>log4j</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.google.auto.service</groupId>
      <artifactId>auto-service</artifactId>
      <version>${autovalue.service.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>${commons-lang3.version}</version>
    </dependency>

    <!-- Dependencies needed for Splunk -->
    <dependency>
      <groupId>com.google.http-client</groupId>
      <artifactId>google-http-client</artifactId>
    </dependency>
    <dependency>
      <groupId>com.google.http-client</groupId>
      <artifactId>google-http-client-apache-v2</artifactId>
    </dependency>

    <!-- UDFs -->
    <dependency>
      <groupId>org.openjdk.nashorn</groupId>
      <artifactId>nashorn-core</artifactId>
      <version>${nashorn.version}</version>
    </dependency>
    <dependency>
      <groupId>com.github.ben-manes.caffeine</groupId>
      <artifactId>caffeine</artifactId>
      <version>3.1.8</version>
    </dependency>

    <!-- Test -->
    <dependency>
      <groupId>com.google.cloud.teleport</groupId>
      <artifactId>it-google-cloud-platform</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.google.cloud.teleport</groupId>
      <artifactId>it-jdbc</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.google.cloud.teleport</groupId>
      <artifactId>it-cassandra</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.google.cloud.teleport</groupId>
      <artifactId>it-splunk</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.google.cloud.teleport</groupId>
      <artifactId>it-datadog</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-core</artifactId>
      <version>${hamcrest.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-library</artifactId>
      <version>${hamcrest.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>${mockito.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.derby</groupId>
      <artifactId>derby</artifactId>
      <version>${derby.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.derby</groupId>
      <artifactId>derbyclient</artifactId>
      <version>${derby.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.derby</groupId>
      <artifactId>derbynet</artifactId>
      <version>${derby.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.google.truth</groupId>
      <artifactId>truth</artifactId>
      <version>${truth.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mock-server</groupId>
      <artifactId>mockserver-netty</artifactId>
      <version>${mock-server-netty.version}</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-ext</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.mock-server</groupId>
      <artifactId>mockserver-junit-rule</artifactId>
      <version>${mock-server-netty.version}</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-ext</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <!-- Used to unit-test Cassandra IO -->
      <groupId>org.scassandra</groupId>
      <artifactId>java-client</artifactId>
      <version>${scassandra.version}</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>com.google.code.gson</groupId>
          <artifactId>gson</artifactId>
        </exclusion>
        <exclusion>
          <groupId>ch.qos.logback</groupId>
          <artifactId>logback-classic</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.scassandra</groupId>
      <artifactId>cql-antlr</artifactId>
      <version>${scassandra.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- Misc -->
    <dependency>
      <groupId>com.google.re2j</groupId>
      <artifactId>re2j</artifactId>
      <version>${re2j.version}</version>
    </dependency>
    <dependency>
      <groupId>com.google.cloud</groupId>
      <artifactId>google-cloud-bigquery</artifactId>
    </dependency>
    <dependency>
      <groupId>com.google.cloud</groupId>
      <artifactId>google-cloud-bigtable</artifactId>
    </dependency>
    <dependency>
      <groupId>com.google.cloud.bigtable</groupId>
      <artifactId>bigtable-beam-import</artifactId>
      <version>${bigtable-beam-import.version}</version>
      <exclusions>
        <exclusion>
          <groupId>log4j</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.google.auto.value</groupId>
      <artifactId>auto-value</artifactId>
      <version>${autovalue.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.google.auto.value</groupId>
      <artifactId>auto-value-annotations</artifactId>
      <version>${autovalue.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-csv</artifactId>
      <version>${commons-csv.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-text</artifactId>
      <version>${commons-text.version}</version>
    </dependency>
    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
    </dependency>
    <!-- https://mvnrepository.com/artifact/org.apache.avro/avro -->
    <dependency>
      <groupId>org.apache.beam</groupId>
      <artifactId>beam-sdks-java-io-parquet</artifactId>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>org.codehaus.jackson</groupId>
          <artifactId>jackson-core-asl</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.codehaus.jackson</groupId>
          <artifactId>jackson-mapper-asl</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.apache.httpcomponents</groupId>
          <artifactId>httpclient</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.kafka</groupId>
      <artifactId>kafka-clients</artifactId>
      <version>${kafka.clients.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-expression</artifactId>
      <version>${spring.version}</version>
    </dependency>
    <dependency>
      <groupId>io.opencensus</groupId>
      <artifactId>opencensus-api</artifactId>
      <version>${open-census.version}</version>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.google.cloud</groupId>
      <artifactId>google-cloud-dlp</artifactId>
      <version>${dlp.version}</version>
      <exclusions>
        <exclusion>
          <groupId>io.grpc</groupId>
          <artifactId>grpc-core</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.google.cloud</groupId>
      <artifactId>google-cloud-kms</artifactId>
      <version>${kms.version}</version>
    </dependency>
    <dependency>
      <groupId>com.google.api.grpc</groupId>
      <artifactId>proto-google-cloud-kms-v1</artifactId>
      <version>${proto-kms.version}</version>
    </dependency>
    <dependency>
      <groupId>org.tensorflow</groupId>
      <artifactId>proto</artifactId>
      <version>${tensorflow.version}</version>
    </dependency>
    <dependency>
      <groupId>com.google.cloud</groupId>
      <artifactId>google-cloud-secretmanager</artifactId>
    </dependency>
  </dependencies>

  <build>
    <extensions>
      <extension>
        <groupId>kr.motd.maven</groupId>
        <artifactId>os-maven-plugin</artifactId>
        <version>${os-maven-plugin.version}</version>
      </extension>
    </extensions>

    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>exec-maven-plugin</artifactId>
          <version>1.6.0</version>
          <configuration>
            <cleanupDaemonThreads>false</cleanupDaemonThreads>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-dependencies</id>
            <phase>package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/extra_libs</outputDirectory>
              <includeArtifactIds>conscrypt-openjdk-uber</includeArtifactIds>
              <stripVersion>true</stripVersion>
            </configuration>
          </execution>
          <execution>
            <id>analyze-dependencies</id>
            <phase>package</phase>
            <goals>
              <goal>analyze-only</goal>
            </goals>
            <configuration>
              <!-- Ignore runtime-only dependencies in analysis -->
              <ignoreNonCompile>true</ignoreNonCompile>
              <failOnWarning>false</failOnWarning>
              <ignoredUsedUndeclaredDependencies>
                <ignoredUsedUndeclaredDependency>
                  com.google.cloud:google-cloud-storage
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  com.google.api.grpc:proto-google-cloud-pubsub-v1
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  org.apache.beam:beam-vendor-grpc-1_48_1
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  com.google.guava:guava
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  com.google.api.grpc:proto-google-cloud-datastore-v1
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  com.google.api:gax
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  com.google.code.findbugs:jsr305
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  com.google.code.gson:gson
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  com.google.cloud:google-cloud-spanner
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  joda-time:joda-time
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  org.apache.commons:commons-dbcp2
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  com.fasterxml.jackson.core:jackson-core
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  org.apache.avro:avro
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  com.google.api.grpc:proto-google-cloud-bigtable-v2
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  com.google.protobuf:protobuf-java
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  com.google.api.grpc:proto-google-cloud-spanner-admin-database-v1
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  com.google.protobuf:protobuf-java-util
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  com.fasterxml.jackson.core:jackson-annotations
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  com.fasterxml.jackson.core:jackson-databind
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  org.slf4j:slf4j-api
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  com.google.cloud:google-cloud-core
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  com.google.apis:google-api-services-storage
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  org.apache.commons:commons-pool2
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  com.google.apis:google-api-services-bigquery
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  com.google.api.grpc:proto-google-cloud-dlp-v2
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  org.apache.httpcomponents:httpcore
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  org.apache.httpcomponents:httpclient
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  org.mock-server:mockserver-client-java
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  com.vaadin.external.google:android-json
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  org.mock-server:mockserver-core
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  com.google.http-client:google-http-client
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  org.apache.beam:beam-model-pipeline
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  org.apache.beam:beam-vendor-guava-26_0-jre
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  org.apache.beam:beam-vendor-grpc-1_36_0
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>io.grpc:grpc-api</ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  org.apache.derby:derbytools
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  org.hamcrest:hamcrest
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  org.apache.beam:beam-vendor-grpc-1_43_2
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  com.google.api.grpc:proto-google-cloud-secretmanager-v1
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  org.apache.beam:beam-runners-core-java
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  com.google.api:gax-grpc
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  com.google.api.grpc:proto-google-cloud-spanner-v1
                </ignoredUsedUndeclaredDependency>
                <ignoredUsedUndeclaredDependency>
                  org.checkerframework:checker-qual
                </ignoredUsedUndeclaredDependency>
              </ignoredUsedUndeclaredDependencies>
              <ignoredUnusedDeclaredDependencies>
                <ignoredUnusedDeclaredDependency>org.threeten:threetenbp</ignoredUnusedDeclaredDependency>
                <ignoredUnusedDeclaredDependency>org.apache.hadoop:hadoop-mapreduce-client-core</ignoredUnusedDeclaredDependency>
                <ignoredUnusedDeclaredDependency>org.apache.hadoop:hadoop-common</ignoredUnusedDeclaredDependency>
                <ignoredUnusedDeclaredDependency>org.codehaus.jackson:jackson-core-asl</ignoredUnusedDeclaredDependency>
                <ignoredUnusedDeclaredDependency>org.codehaus.jackson:jackson-mapper-asl</ignoredUnusedDeclaredDependency>
                <ignoredUnusedDeclaredDependency>io.opencensus:opencensus-api</ignoredUnusedDeclaredDependency>
                <ignoredUnusedDeclaredDependency>com.google.auto.service:auto-service</ignoredUnusedDeclaredDependency>
                <!-- com.google.cloud.bigtable:bigtable-beam-import has the Main-Class on some templates. -->
                <ignoredUnusedDeclaredDependency>com.google.cloud.bigtable:bigtable-beam-import</ignoredUnusedDeclaredDependency>
                <ignoredUnusedDeclaredDependency>com.google.cloud.bigtable:bigtable-hbase-1.x</ignoredUnusedDeclaredDependency>
              </ignoredUnusedDeclaredDependencies>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven-compiler-plugin.version}</version>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
          <parameters>true</parameters>
          <testCompilerArgument>-parameters</testCompilerArgument>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
      </plugin>

      <plugin>
        <!-- Set up Javadoc configuration for javadoc run via in the Maven
             build. Teleport only uses the plugin to create the individual javadoc
             attached artifacts used for IDEs. The combined javadoc for the
             website is built in the sdks/java/javadoc directory. Rather than
             duplicate a raft of configuration between the ant.xml there and
             here, we leave things simple here. -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>${maven-javadoc-plugin.version}</version>
        <configuration>
          <windowtitle>Teleport for Java, version ${project.version} API</windowtitle>
          <doctitle>Teleport for Java, version ${project.version}</doctitle>
          <use>false</use>
          <quiet>true</quiet>
          <notimestamp>true</notimestamp>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>${maven-enforcer-plugin.version}</version>
        <executions>
          <execution>
            <id>enforce</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <enforceBytecodeVersion>
                  <maxJdkVersion>11</maxJdkVersion>
                  <excludes>
                    <!--
                      Supplied by the user JDK and compiled with matching
                      version. Is not shaded, so safe to ignore.
                    -->
                    <exclude>jdk.tools:jdk.tools</exclude>
                  </excludes>
                </enforceBytecodeVersion>
                <requireJavaVersion>
                  <version>[1.7,)</version>
                </requireJavaVersion>
                <requireMavenVersion>
                  <!-- Keep aligned with prerequisite section below. -->
                  <version>[3.2,)</version>
                </requireMavenVersion>
              </rules>
            </configuration>
          </execution>
          <execution>
            <id>enforce-banned-dependencies</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <bannedDependencies>
                  <excludes>
                    <exclude>com.google.guava:guava-jdk5</exclude>
                    <exclude>com.google.protobuf:protobuf-lite</exclude>
                    <exclude>org.apache.logging.log4j:*:[2.0,2.14.1]</exclude>
                  </excludes>
                </bannedDependencies>
              </rules>
              <fail>true</fail>
            </configuration>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>extra-enforcer-rules</artifactId>
            <version>${extra.enforcer.rules.version}</version>
          </dependency>
        </dependencies>
      </plugin>
      <plugin>
        <groupId>org.xolstice.maven.plugins</groupId>
        <artifactId>protobuf-maven-plugin</artifactId>
        <version>0.5.1</version>
        <configuration>
          <protocArtifact>com.google.protobuf:protoc:${protobuf.version}:exe:${os.detected.classifier}</protocArtifact>
          <pluginId>grpc-java</pluginId>
          <pluginArtifact>io.grpc:protoc-gen-grpc-java:${grpc.gen.version}:exe:${os.detected.classifier}</pluginArtifact>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>compile-custom</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.avro</groupId>
        <artifactId>avro-maven-plugin</artifactId>
        <version>${avro.version}</version>
        <!-- For compatibility reasons (e.g. IntelliJ), the configuration must be duplicated here
          and under execution. -->
        <configuration>
          <sourceDirectory>src/main/resources/schema/avro</sourceDirectory>
        </configuration>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>schema</goal>
            </goals>
            <configuration>
              <sourceDirectory>src/main/resources/schema/avro</sourceDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${jacoco.version}</version>
        <configuration>
          <excludes>
            <!-- Excluding classes covered only by integration tests. -->
            <exclude>**/*InformationSchemaScanner.*</exclude>
            <!-- Excluding auto-generated classes. -->
            <exclude>**/*AutoValue_*</exclude>
          </excludes>
          <rules>
            <rule>
              <element>PACKAGE</element>
              <includes>
                <include>com.google.cloud.teleport.spanner</include>
                <include>com.google.cloud.teleport.spanner.**</include>
              </includes>
              <excludes>
                <!-- Excluding classes covered by integration tests. -->
                <exclude>com.google.cloud.teleport.spanner.ddl.InformationSchemaScanner</exclude>
                <!-- Excluding generated proto java files -->
                <exclude>com.google.cloud.teleport.spanner.proto</exclude>
              </excludes>
            </rule>
          </rules>
        </configuration>
        <executions>
          <execution>
            <id>default-prepare-agent</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>default-report</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
          <execution>
            <id>default-check</id>
            <goals>
              <goal>check</goal>
            </goals>
            <configuration>
              <rules>
                <rule>
                  <limits>
                    <limit>
                      <counter>LINE</counter>
                      <value>COVEREDRATIO</value>
                      <minimum>0.5</minimum>
                    </limit>
                    <limit>
                      <counter>BRANCH</counter>
                      <value>COVEREDRATIO</value>
                      <minimum>0.5</minimum>
                    </limit>
                  </limits>
                </rule>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>missing-artifact-repos</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <repositories>
        <repository>
          <!-- Required for io.confluent:kafka-avro-serializer artifact -->
          <id>confluent</id>
          <url>https://packages.confluent.io/maven/</url>
        </repository>
      </repositories>
    </profile>
    <profile>
      <id>shade</id>
      <activation>
        <property>
          <name>skipShade</name>
          <value>!true</value>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-shade-plugin</artifactId>
            <version>${maven-shade-plugin.version}</version>
            <executions>
              <execution>
                <id>bundle-and-repackage</id>
                <phase>package</phase>
                <goals>
                  <goal>shade</goal>
                </goals>
                <configuration>
                  <extraDirectories>
                    <paths>
                      <path>${project.build.directory}/extra_libs</path>
                    </paths>
                  </extraDirectories>
                  <createDependencyReducedPom>false</createDependencyReducedPom>
                  <shadeTestJar>true</shadeTestJar>
                  <artifactSet>
                    <excludes>
                      <exclude>org.conscrypt:conscrypt-openjdk-uber</exclude>
                    </excludes>
                    <includes>
                      <include>*:*</include>
                    </includes>
                  </artifactSet>
                  <filters>
                    <filter>
                      <artifact>*:*</artifact>
                      <excludes>
                        <exclude>META-INF/*.SF</exclude>
                        <exclude>META-INF/*.DSA</exclude>
                        <exclude>META-INF/*.RSA</exclude>
                      </excludes>
                    </filter>
                  </filters>
                  <transformers>
                    <transformer
                        implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                  </transformers>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>templatesValidate</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>com.google.cloud.teleport</groupId>
            <artifactId>templates-maven-plugin</artifactId>
            <executions>
              <execution>
                <phase>compile</phase>
                <goals>
                  <goal>validate</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>templatesSpec</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>com.google.cloud.teleport</groupId>
            <artifactId>templates-maven-plugin</artifactId>
            <executions>
              <execution>
                <phase>prepare-package</phase>
                <goals>
                  <goal>spec</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>templatesStage</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>com.google.cloud.teleport</groupId>
            <artifactId>templates-maven-plugin</artifactId>
            <executions>
              <execution>
                <phase>package</phase>
                <goals>
                  <goal>stage</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>templatesRun</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>com.google.cloud.teleport</groupId>
            <artifactId>templates-maven-plugin</artifactId>
            <executions>
              <execution>
                <phase>package</phase>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>templatesRelease</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <properties>
        <jib.skip>false</jib.skip>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>com.google.cloud.teleport</groupId>
            <artifactId>templates-maven-plugin</artifactId>
            <executions>
              <execution>
                <phase>package</phase>
                <goals>
                  <goal>release</goal>
                </goals>
              </execution>
              <execution>
                <id>finish</id>
                <phase>verify</phase>
                <goals>
                  <goal>release-finish</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>
