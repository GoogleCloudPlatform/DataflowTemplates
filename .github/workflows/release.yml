name: Release

on:
  workflow_dispatch:
    inputs:
      candidateName:
        description: 'Name of the candidate'
        type: string
        required: true
      branchCommit:
        description: 'Commit to check out. If it is the most recent commit then leave blank.'
        type: string
        required: false
        default: ''
      cherrypickCommits:
        description: 'Comma separated commits to cherry pick'
        type: string
        required: false

permissions:
  contents: write

jobs:
  create_release_branch:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_branch_name: ${{ steps.variables.outputs.release_branch_name }}
      tag_name: ${{ steps.variables.outputs.tag_name }}
    steps:
      - name: Get releaser identity
        run: |
          git config --global user.name '${{github.actor}}'
          git config --global user.email '${{github.actor}}@users.noreply.github.com'
      - name: Declare release branch name and tag name
        id: variables
        run: |
          echo "release_branch_name=release_${CANDIDATE_NAME,,}" >> $GITHUB_OUTPUT
          echo "tag_name=${CANDIDATE_NAME^^}" >> $GITHUB_OUTPUT
        env:
          CANDIDATE_NAME: ${{ inputs.candidateName }}
      - name: Checkout code
        uses: actions/checkout@1e31de5234b9f8995739874a8ce0492dc87873e2 # v4.0.0
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}
      - name: Create release branch
        run: git checkout -b $RELEASE_BRANCH_NAME $BRANCH_COMMIT
        env:
          RELEASE_BRANCH_NAME: ${{ steps.variables.outputs.release_branch_name }}
          BRANCH_COMMIT: ${{ inputs.branchCommit }}
      - name: Cherry pick commits
        run: |
          commits=$(echo $CHERRYPICK_COMMITS | tr "," "\n")
          for commit in $commits
          do
            echo "Cherry picking $commit."
            git cherry-pick $commit
          done
        env:
          CHERRYPICK_COMMITS: ${{ inputs.cherrypickCommits }}
      - name: Push release branch
        run: |
          git push origin --delete $RELEASE_BRANCH_NAME || true  
          git push -u origin $RELEASE_BRANCH_NAME
        env:
          RELEASE_BRANCH_NAME: ${{ steps.variables.outputs.release_branch_name }}
  java_unit_tests:
    name: Unit Tests
    needs: [ create_release_branch ]
    timeout-minutes: 60
    runs-on: [ self-hosted, it ]
    steps:
      - name: Checkout code
        uses: actions/checkout@1e31de5234b9f8995739874a8ce0492dc87873e2 # v4.0.0
        with:
          ref: ${{ needs.create_release_branch.outputs.release_branch_name }}
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}
      - name: Run Unit Tests
        uses: ./.github/actions/run-unit-tests
      - name: Upload Unit Tests Surefire Report
        uses: ./.github/actions/upload-test-report
        with:
          output-zip-file: unit-test-results
        if: always()
  java_integration_smoke_tests_templates:
    name: Dataflow Templates Integration Smoke Tests
    needs: [ create_release_branch ]
    timeout-minutes: 60
    # Run on any runner that matches all the specified runs-on values.
    runs-on: [ self-hosted, it ]
    steps:
      - name: Checkout code
        uses: actions/checkout@1e31de5234b9f8995739874a8ce0492dc87873e2 # v4.0.0
        with:
          ref: ${{ needs.create_release_branch.outputs.release_branch_name }}
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}
      - name: Setup Environment
        id: setup-env
        uses: ./.github/actions/setup-env
      - name: Run Build
        shell: bash
        run: ./cicd/run-build --changed-files="pom.xml"
      - name: Run Smoke Tests
        shell: bash
        run: |
          ./cicd/run-it-smoke-tests \
            --changed-files="pom.xml" \
            --it-region="us-central1" \
            --it-project="cloud-teleport-testing" \
            --it-artifact-bucket="cloud-teleport-testing-it-gitactions" \
            --it-private-connectivity="datastream-private-connect-us-central1" \
            --it-release=true \
            --it-retry-failures=2
      - name: Publish Smoke Test Site Report
        uses: ./.github/actions/publish-site-report
        with:
          output-zip-file: smoke-test-report
        if: always()
      - name: Cleanup Java Environment
        uses: ./.github/actions/cleanup-java-env
        if: always()
  java_integration_tests_templates:
    name: Dataflow Templates Integration Tests
    needs: [ create_release_branch ]
    timeout-minutes: 180
    # Run on any runner that matches all the specified runs-on values.
    runs-on: [ self-hosted, it ]
    steps:
      - name: Checkout code
        uses: actions/checkout@1e31de5234b9f8995739874a8ce0492dc87873e2 # v4.0.0
        with:
          ref: ${{ needs.create_release_branch.outputs.release_branch_name }}
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}
      - name: Setup Environment
        id: setup-env
        uses: ./.github/actions/setup-env
      - name: Run Build
        shell: bash
        run: ./cicd/run-build --changed-files="pom.xml"
      - name: Run Integration Tests
        shell: bash
        run: |
          ./cicd/run-it-tests \
            --changed-files="pom.xml" \
            --it-region="us-central1" \
            --it-project="cloud-teleport-testing" \
            --it-artifact-bucket="cloud-teleport-testing-it-gitactions" \
            --it-private-connectivity="datastream-private-connect-us-central1" \
            --it-release=true \
            --it-retry-failures=2
      - name: Publish Integration Test Site Report
        uses: ./.github/actions/publish-site-report
        with:
          output-zip-file: integration-test-report
        if: always()
      - name: Cleanup Java Environment
        uses: ./.github/actions/cleanup-java-env
        if: always()
  upload_artifacts:
    name: Upload Template Artifacts
    needs: [ create_release_branch, java_unit_tests, java_integration_smoke_tests_templates, java_integration_tests_templates ]
    runs-on: [ self-hosted, it ]
    steps:
      - name: Checkout code
        uses: actions/checkout@1e31de5234b9f8995739874a8ce0492dc87873e2 # v4.0.0
        with:
          ref: ${{ needs.create_release_branch.outputs.release_branch_name }}
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}
      - name: Create artifacts and push
        run: |
          mvn verify -PtemplatesRelease \
          -DprojectId="dataflow-templates" \
          -DbucketName="dataflow-templates-staging" \
          -DlibrariesBucketName="dataflow-templates-libraries" \
          -DstagePrefix="${CANDIDATE_NAME}" \
          -Dmaven.test.skip -T8 -e
        env:
          CANDIDATE_NAME: ${{ inputs.candidateName }}
      - name: Add tag to most recent commit
        run: |
          DATE=$(date -d"next-monday - 1week" +'%Y-%m-%d')
          T_COMMIT=$(git log -n 1 $RELEASE_BRANCH_NAME --pretty=format:'%H')
          git tag -a $TAG_NAME -m "Release week of $DATE" $T_COMMIT
        env:
          RELEASE_BRANCH_NAME: ${{ needs.create_release_branch.outputs.release_branch_name }}
          TAG_NAME: ${{ needs.create_release_branch.outputs.tag_name }}
      - name: Push tags
        run: |
          git push --delete origin $TAG_NAME || true
          git push -u origin --tags
        env:
          TAG_NAME: ${{ needs.create_release_branch.outputs.tag_name }}
      - name: Release
        run: |
          gh release create $TAG_NAME --title "Dataflow Templates $TAG_NAME" --notes ""
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ needs.create_release_branch.outputs.tag_name }}
