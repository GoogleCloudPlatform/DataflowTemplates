{
  "kind": "discovery#restDescription",
  "discoveryVersion": "v1",
  "id": "cloudbuild:v1",
  "name": "cloudbuild",
  "canonicalName": "Cloud Build",
  "version": "v1",
  "revision": "0",
  "title": "Cloud Build API",
  "description": "Creates and manages builds on Google Cloud Platform.",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
   },
  "documentationLink": "https://cloud.google.com/cloud-build/docs/",
  "protocol": "rest",
  "rootUrl": "https://cloudbuild.googleapis.com/",
  "mtlsRootUrl": "https://cloudbuild.mtls.googleapis.com/",
  "servicePath": "",
  "baseUrl": "https://cloudbuild.googleapis.com/",
  "batchPath": "batch",
  "version_module": true,
  "fullyEncodeReservedExpansion": true,
  "parameters": {
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "schemas": {
    "Operation": {
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations\/{unique_id}`.",
          "type": "string"
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "response": {
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`\/`Create`\/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        }
      }
    },
    "Status": {
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https:\/\/github.com\/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https:\/\/cloud.google.com\/apis\/design\/errors).",
      "type": "object",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        }
      }
    },
    "CancelOperationRequest": {
      "id": "CancelOperationRequest",
      "description": "The request message for Operations.CancelOperation.",
      "type": "object",
      "properties": {
      }
    },
    "Empty": {
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object",
      "properties": {
      }
    },
    "Build": {
      "id": "Build",
      "description": "A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. The 'Build' name with format: `projects\/{project}\/locations\/{location}\/builds\/{build}`, where {build} is a unique identifier generated by the service.",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "description": "Output only. Unique identifier of the build.",
          "readOnly": true,
          "type": "string"
        },
        "projectId": {
          "description": "Output only. ID of the project.",
          "readOnly": true,
          "type": "string"
        },
        "status": {
          "description": "Output only. Status of the build.",
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build has been created and is pending execution and queuing. It has not been queued.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ],
          "enum": [
            "STATUS_UNKNOWN",
            "PENDING",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ]
        },
        "statusDetail": {
          "description": "Output only. Customer-readable message about the current status.",
          "readOnly": true,
          "type": "string"
        },
        "source": {
          "description": "The location of the source files to build.",
          "$ref": "Source"
        },
        "steps": {
          "description": "Required. The operations to be performed on the workspace.",
          "type": "array",
          "items": {
            "$ref": "BuildStep"
          }
        },
        "results": {
          "description": "Output only. Results of the build.",
          "readOnly": true,
          "$ref": "Results"
        },
        "createTime": {
          "description": "Output only. Time at which the request to create the build was received.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "startTime": {
          "description": "Output only. Time at which execution of the build was started.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "finishTime": {
          "description": "Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "timeout": {
          "description": "Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.",
          "type": "string",
          "format": "google-duration"
        },
        "images": {
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "queueTtl": {
          "description": "TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.",
          "type": "string",
          "format": "google-duration"
        },
        "artifacts": {
          "description": "Artifacts produced by the build that should be uploaded upon successful completion of all build steps.",
          "$ref": "Artifacts"
        },
        "logsBucket": {
          "description": "Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https:\/\/cloud.google.com\/storage\/docs\/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}\/log-${build_id}.txt`.",
          "type": "string"
        },
        "sourceProvenance": {
          "description": "Output only. A permanent fixed identifier for source.",
          "readOnly": true,
          "$ref": "SourceProvenance"
        },
        "buildTriggerId": {
          "description": "Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.",
          "readOnly": true,
          "type": "string"
        },
        "options": {
          "description": "Special options for this build.",
          "$ref": "BuildOptions"
        },
        "logUrl": {
          "description": "Output only. URL to logs for this build in Google Cloud Console.",
          "readOnly": true,
          "type": "string"
        },
        "substitutions": {
          "description": "Substitutions data for `Build` resource.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tags": {
          "description": "Tags for annotation of a `Build`. These are not docker tags.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secrets": {
          "description": "Secrets to decrypt using Cloud Key Management Service.",
          "type": "array",
          "items": {
            "$ref": "Secret"
          }
        },
        "timing": {
          "description": "Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps * PUSH: time to push all specified images. * FETCHSOURCE: time to fetch source. If the build does not specify source or images, these keys will not be included.",
          "readOnly": true,
          "type": "object",
          "additionalProperties": {
            "$ref": "TimeSpan"
          }
        },
        "approval": {
          "description": "Output only. Describes this build's approval configuration, status, and result.",
          "readOnly": true,
          "$ref": "BuildApproval"
        },
        "serviceAccount": {
          "description": "IAM service account whose credentials will be used at build runtime. Must be of the format `projects\/{PROJECT_ID}\/serviceAccounts\/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. This field is in alpha and is not publicly available.",
          "type": "string"
        },
        "availableSecrets": {
          "description": "Secrets and secret environment variables.",
          "$ref": "Secrets"
        }
      }
    },
    "Source": {
      "id": "Source",
      "description": "Location of the source in a supported storage service.",
      "type": "object",
      "properties": {
        "storageSource": {
          "description": "If provided, get the source from this location in Google Cloud Storage.",
          "$ref": "StorageSource"
        },
        "repoSource": {
          "description": "If provided, get the source from this location in a Cloud Source Repository.",
          "$ref": "RepoSource"
        },
        "gitSource": {
          "description": "If provided, get the source from this Git repository.",
          "$ref": "GitSource"
        }
      }
    },
    "StorageSource": {
      "id": "StorageSource",
      "description": "Location of the source in an archive file in Google Cloud Storage.",
      "type": "object",
      "properties": {
        "bucket": {
          "description": "Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https:\/\/cloud.google.com\/storage\/docs\/bucket-naming#requirements)).",
          "type": "string"
        },
        "object": {
          "description": "Google Cloud Storage object containing the source. This object must be a gzipped archive file (`.tar.gz`) containing source to build.",
          "type": "string"
        },
        "generation": {
          "description": "Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "RepoSource": {
      "id": "RepoSource",
      "description": "Location of the source in a Google Cloud Source Repository.",
      "type": "object",
      "properties": {
        "projectId": {
          "description": "ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.",
          "type": "string"
        },
        "repoName": {
          "description": "Required. Name of the Cloud Source Repository.",
          "type": "string"
        },
        "branchName": {
          "description": "Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https:\/\/github.com\/google\/re2\/wiki\/Syntax",
          "type": "string"
        },
        "tagName": {
          "description": "Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https:\/\/github.com\/google\/re2\/wiki\/Syntax",
          "type": "string"
        },
        "commitSha": {
          "description": "Explicit commit SHA to build.",
          "type": "string"
        },
        "dir": {
          "description": "Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.",
          "type": "string"
        },
        "invertRegex": {
          "description": "Only trigger a build if the revision regex does NOT match the revision regex.",
          "type": "boolean"
        },
        "substitutions": {
          "description": "Substitutions to use in a triggered build. Should only be used with RunBuildTrigger",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "GitSource": {
      "id": "GitSource",
      "description": "Location of the source in any accessible Git repository.",
      "type": "object",
      "properties": {
        "url": {
          "description": "Location of the Git repo to build.",
          "type": "string"
        },
        "dir": {
          "description": "Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.",
          "type": "string"
        },
        "revision": {
          "description": "The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses `git fetch` to fetch the revision from the Git repository; therefore make sure that the string you provide for `revision` is parsable by the command. For information on string values accepted by `git fetch`, see https:\/\/git-scm.com\/docs\/gitrevisions#_specifying_revisions. For information on `git fetch`, see https:\/\/git-scm.com\/docs\/git-fetch.",
          "type": "string"
        },
        "credential": {
          "description": "Secret containing the encrypted bytes.",
          "$ref": "EncryptedCredential"
        }
      }
    },
    "EncryptedCredential": {
      "id": "EncryptedCredential",
      "description": "EncryptedCredential contains an encrypted secret, what key should be used to decode the secret, and how to use the secret.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Underlying credential type encoded in data.",
          "type": "string",
          "enumDescriptions": [
            "Default enum type. This should not be used.",
            "HTTP Basic Authentication Credentials. `data` should be a base64 encoded username:password. See https:\/\/tools.ietf.org\/html\/rfc7617 for more details."
          ],
          "enum": [
            "UNKNOWN",
            "HTTP_BASIC_AUTH"
          ]
        },
        "data": {
          "description": "Encrypted user credential. `key` should be able to decrypt this data. See `type` for supported types.",
          "type": "string",
          "format": "byte"
        },
        "key": {
          "description": "KMS key ID to use for decryption.",
          "type": "string"
        }
      }
    },
    "BuildStep": {
      "id": "BuildStep",
      "description": "A step in the build pipeline.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https:\/\/github.com\/GoogleCloudPlatform\/cloud-builders](https:\/\/github.com\/GoogleCloudPlatform\/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like \"ubuntu\", \"debian\", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.",
          "type": "string"
        },
        "env": {
          "description": "A list of environment variable definitions to be used when running a step. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "args": {
          "description": "A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dir": {
          "description": "Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.",
          "type": "string"
        },
        "waitFor": {
          "description": "The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "entrypoint": {
          "description": "Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.",
          "type": "string"
        },
        "secretEnv": {
          "description": "A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "volumes": {
          "description": "List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.",
          "type": "array",
          "items": {
            "$ref": "Volume"
          }
        },
        "timing": {
          "description": "Output only. Stores timing information for executing this build step.",
          "readOnly": true,
          "$ref": "TimeSpan"
        },
        "pullTiming": {
          "description": "Output only. Stores timing information for pulling this build step's builder image only.",
          "readOnly": true,
          "$ref": "TimeSpan"
        },
        "timeout": {
          "description": "Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.",
          "type": "string",
          "format": "google-duration"
        },
        "status": {
          "description": "Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.",
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build has been created and is pending execution and queuing. It has not been queued.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ],
          "enum": [
            "STATUS_UNKNOWN",
            "PENDING",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ]
        }
      }
    },
    "Volume": {
      "id": "Volume",
      "description": "Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.",
          "type": "string"
        },
        "path": {
          "description": "Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.",
          "type": "string"
        }
      }
    },
    "TimeSpan": {
      "id": "TimeSpan",
      "description": "Start and end times for a build execution phase.",
      "type": "object",
      "properties": {
        "startTime": {
          "description": "Start of time span.",
          "type": "string",
          "format": "google-datetime"
        },
        "endTime": {
          "description": "End of time span.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "Results": {
      "id": "Results",
      "description": "Artifacts created by the build pipeline.",
      "type": "object",
      "properties": {
        "images": {
          "description": "Container images that were built as a part of the build.",
          "type": "array",
          "items": {
            "$ref": "BuiltImage"
          }
        },
        "buildStepImages": {
          "description": "List of build step digests, in the order corresponding to build step indices.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "artifactManifest": {
          "description": "Path to the artifact manifest. Only populated when artifacts are uploaded.",
          "type": "string"
        },
        "numArtifacts": {
          "description": "Number of artifacts uploaded. Only populated when artifacts are uploaded.",
          "type": "string",
          "format": "int64"
        },
        "buildStepOutputs": {
          "description": "List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https:\/\/cloud.google.com\/cloud-build\/docs\/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT\/output`. Only the first 4KB of data is stored.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "artifactTiming": {
          "description": "Time to push all non-container artifacts.",
          "$ref": "TimeSpan"
        }
      }
    },
    "BuiltImage": {
      "id": "BuiltImage",
      "description": "An image built by the pipeline.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name used to push the container image to Google Container Registry, as presented to `docker push`.",
          "type": "string"
        },
        "digest": {
          "description": "Docker Registry 2.0 digest.",
          "type": "string"
        },
        "pushTiming": {
          "description": "Output only. Stores timing information for pushing the specified image.",
          "readOnly": true,
          "$ref": "TimeSpan"
        }
      }
    },
    "Artifacts": {
      "id": "Artifacts",
      "description": "Artifacts produced by a build that should be uploaded upon successful completion of all build steps.",
      "type": "object",
      "properties": {
        "images": {
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "objects": {
          "description": "A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.",
          "$ref": "ArtifactObjects"
        }
      }
    },
    "ArtifactObjects": {
      "id": "ArtifactObjects",
      "description": "Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.",
      "type": "object",
      "properties": {
        "location": {
          "description": "Cloud Storage bucket and optional object path, in the form \"gs:\/\/bucket\/path\/to\/somewhere\/\". (see [Bucket Name Requirements](https:\/\/cloud.google.com\/storage\/docs\/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.",
          "type": "string"
        },
        "paths": {
          "description": "Path globs used to match files in the build's workspace.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timing": {
          "description": "Output only. Stores timing information for pushing all artifact objects.",
          "readOnly": true,
          "$ref": "TimeSpan"
        }
      }
    },
    "SourceProvenance": {
      "id": "SourceProvenance",
      "description": "Provenance of the source. Ways to find the original source, or verify that some source was used for this build.",
      "type": "object",
      "properties": {
        "resolvedStorageSource": {
          "description": "A copy of the build's `source.storage_source`, if exists, with any generations resolved.",
          "$ref": "StorageSource"
        },
        "resolvedRepoSource": {
          "description": "A copy of the build's `source.repo_source`, if exists, with any revisions resolved.",
          "$ref": "RepoSource"
        },
        "fileHashes": {
          "description": "Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.",
          "readOnly": true,
          "type": "object",
          "additionalProperties": {
            "$ref": "FileHashes"
          }
        }
      }
    },
    "FileHashes": {
      "id": "FileHashes",
      "description": "Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.",
      "type": "object",
      "properties": {
        "fileHash": {
          "description": "Collection of file hashes.",
          "type": "array",
          "items": {
            "$ref": "Hash"
          }
        }
      }
    },
    "Hash": {
      "id": "Hash",
      "description": "Container message for hash values.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of hash that was performed.",
          "type": "string",
          "enumDescriptions": [
            "No hash requested.",
            "Use a sha256 hash.",
            "Use a md5 hash."
          ],
          "enum": [
            "NONE",
            "SHA256",
            "MD5"
          ]
        },
        "value": {
          "description": "The hash value.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "BuildOptions": {
      "id": "BuildOptions",
      "description": "Optional arguments to enable specific features of builds.",
      "type": "object",
      "properties": {
        "sourceProvenanceHash": {
          "description": "Requested hash for SourceProvenance.",
          "type": "array",
          "items": {
            "type": "string",
            "enumDescriptions": [
              "No hash requested.",
              "Use a sha256 hash.",
              "Use a md5 hash."
            ],
            "enum": [
              "NONE",
              "SHA256",
              "MD5"
            ]
          }
        },
        "requestedVerifyOption": {
          "description": "Requested verifiability options.",
          "type": "string",
          "enumDescriptions": [
            "Not a verifiable build. (default)",
            "Verified build."
          ],
          "enum": [
            "NOT_VERIFIED",
            "VERIFIED"
          ]
        },
        "machineType": {
          "description": "Compute Engine machine type on which to run the build.",
          "type": "string",
          "enumDescriptions": [
            "Standard machine type.",
            "Highcpu machine with 8 CPUs.",
            "Highcpu machine with 32 CPUs."
          ],
          "enum": [
            "UNSPECIFIED",
            "N1_HIGHCPU_8",
            "N1_HIGHCPU_32"
          ]
        },
        "diskSizeGb": {
          "description": "Requested disk size for the VM that runs the build. Note that this is *NOT* \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 1000GB; builds that request more than the maximum are rejected with an error.",
          "type": "string",
          "format": "int64"
        },
        "substitutionOption": {
          "description": "Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.",
          "type": "string",
          "enumDescriptions": [
            "Fails the build if error in substitutions checks, like missing a substitution in the template or in the map.",
            "Do not fail the build if error in substitutions checks."
          ],
          "enum": [
            "MUST_MATCH",
            "ALLOW_LOOSE"
          ]
        },
        "dynamicSubstitutions": {
          "description": "Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.",
          "type": "boolean"
        },
        "logStreamingOption": {
          "description": "Option to define build log streaming behavior to Google Cloud Storage.",
          "type": "string",
          "enumDescriptions": [
            "Service may automatically determine build log streaming behavior.",
            "Build logs should be streamed to Google Cloud Storage.",
            "Build logs should not be streamed to Google Cloud Storage; they will be written when the build is completed."
          ],
          "enum": [
            "STREAM_DEFAULT",
            "STREAM_ON",
            "STREAM_OFF"
          ]
        },
        "workerPool": {
          "description": "Option to specify a `WorkerPool` for the build. Format: projects\/{project}\/locations\/{location}\/workerPools\/{workerPool} This field is experimental.",
          "type": "string"
        },
        "logging": {
          "description": "Option to specify the logging mode, which determines if and where build logs are stored.",
          "type": "string",
          "enumDescriptions": [
            "The service determines the logging mode. The default is `LEGACY`. Do not rely on the default logging behavior as it may change in the future.",
            "Cloud Logging and Cloud Storage logging are enabled.",
            "Only Cloud Storage logging is enabled.",
            "This option is the same as CLOUD_LOGGING_ONLY.",
            "Only Cloud Logging is enabled. Note that logs for both the Cloud Console UI and Cloud SDK are based on Cloud Storage logs, so neither will provide logs if this option is chosen.",
            "Turn off all logging. No build logs will be captured. Next ID: 6"
          ],
          "enum": [
            "LOGGING_UNSPECIFIED",
            "LEGACY",
            "GCS_ONLY",
            "STACKDRIVER_ONLY",
            "CLOUD_LOGGING_ONLY",
            "NONE"
          ]
        },
        "env": {
          "description": "A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secretEnv": {
          "description": "A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "volumes": {
          "description": "Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.",
          "type": "array",
          "items": {
            "$ref": "Volume"
          }
        },
        "cluster": {
          "description": "Details about how this build should be executed on a GKE cluster.",
          "$ref": "ClusterOptions"
        }
      }
    },
    "ClusterOptions": {
      "id": "ClusterOptions",
      "description": "Details of the GKE Cluster for builds that should execute on-cluster.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Identifier of the GKE Cluster this build should execute on. Example: projects\/{project_id}\/locations\/{location}\/cluster\/{cluster_name} The cluster's project ID must be the same project ID that is running the build. The cluster must exist and have the CloudBuild add-on enabled.",
          "type": "string"
        }
      }
    },
    "Secret": {
      "id": "Secret",
      "description": "Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value.",
      "type": "object",
      "properties": {
        "kmsKeyName": {
          "description": "Cloud KMS key name to use to decrypt these envs.",
          "type": "string"
        },
        "secretEnv": {
          "description": "Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "BuildApproval": {
      "id": "BuildApproval",
      "description": "BuildApproval describes a build's approval configuration, state, and result.",
      "type": "object",
      "properties": {
        "state": {
          "description": "Output only. The state of this build's approval.",
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "Default enum type. This should not be used.",
            "Build approval is pending.",
            "Build approval has been approved.",
            "Build approval has been rejected.",
            "Build was cancelled while it was still pending approval."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "APPROVED",
            "REJECTED",
            "CANCELLED"
          ]
        },
        "config": {
          "description": "Output only. Configuration for manual approval of this build.",
          "readOnly": true,
          "$ref": "ApprovalConfig"
        },
        "result": {
          "description": "Output only. Result of manual approval for this Build.",
          "readOnly": true,
          "$ref": "ApprovalResult"
        }
      }
    },
    "ApprovalConfig": {
      "id": "ApprovalConfig",
      "description": "ApprovalConfig describes configuration for manual approval of a build.",
      "type": "object",
      "properties": {
        "approvalRequired": {
          "description": "Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.",
          "type": "boolean"
        }
      }
    },
    "ApprovalResult": {
      "id": "ApprovalResult",
      "description": "ApprovalResult describes the decision and associated metadata of a manual approval of a build.",
      "type": "object",
      "properties": {
        "approverAccount": {
          "description": "Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called (the user's actual email that is tied to their GAIA ID may have changed). This field is not stored, rather, it is calculated on the fly using approver_id.",
          "readOnly": true,
          "type": "string"
        },
        "approvalTime": {
          "description": "Output only. The time when the approval decision was made.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "decision": {
          "description": "Required. The decision of this manual approval.",
          "type": "string",
          "enumDescriptions": [
            "Default enum type. This should not be used.",
            "Build is approved.",
            "Build is rejected."
          ],
          "enum": [
            "DECISION_UNSPECIFIED",
            "APPROVED",
            "REJECTED"
          ]
        },
        "comment": {
          "description": "Optional. An optional comment for this manual approval result.",
          "type": "string"
        },
        "url": {
          "description": "Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build.",
          "type": "string"
        }
      }
    },
    "Secrets": {
      "id": "Secrets",
      "description": "Secrets and secret environment variables.",
      "type": "object",
      "properties": {
        "secretManager": {
          "description": "Secrets in Secret Manager and associated secret environment variable.",
          "type": "array",
          "items": {
            "$ref": "SecretManagerSecret"
          }
        },
        "inline": {
          "description": "Secrets encrypted with KMS key and the associated secret environment variable.",
          "type": "array",
          "items": {
            "$ref": "InlineSecret"
          }
        }
      }
    },
    "SecretManagerSecret": {
      "id": "SecretManagerSecret",
      "description": "Pairs a secret environment variable with a SecretVersion in Secret Manager.",
      "type": "object",
      "properties": {
        "versionName": {
          "description": "Resource name of the SecretVersion. In format: projects\/*\/secrets\/*\/versions\/*",
          "type": "string"
        },
        "env": {
          "description": "Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.",
          "type": "string"
        }
      }
    },
    "InlineSecret": {
      "id": "InlineSecret",
      "description": "Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.",
      "type": "object",
      "properties": {
        "kmsKeyName": {
          "description": "Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects\/*\/locations\/*\/keyRings\/*\/cryptoKeys\/*",
          "type": "string"
        },
        "envMap": {
          "description": "Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "ListBuildsResponse": {
      "id": "ListBuildsResponse",
      "description": "Response including listed builds.",
      "type": "object",
      "properties": {
        "builds": {
          "description": "Builds will be sorted by `create_time`, descending.",
          "type": "array",
          "items": {
            "$ref": "Build"
          }
        },
        "nextPageToken": {
          "description": "Token to receive the next page of results. This will be absent if the end of the response list has been reached.",
          "type": "string"
        }
      }
    },
    "CancelBuildRequest": {
      "id": "CancelBuildRequest",
      "description": "Request to cancel an ongoing build.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the `Build` to retrieve. Format: `projects\/{project}\/locations\/{location}\/builds\/{build}`",
          "type": "string"
        },
        "projectId": {
          "description": "Required. ID of the project.",
          "type": "string"
        },
        "id": {
          "description": "Required. ID of the build.",
          "type": "string"
        }
      }
    },
    "RetryBuildRequest": {
      "id": "RetryBuildRequest",
      "description": "Specifies a build to retry.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the `Build` to retry. Format: `projects\/{project}\/locations\/{location}\/builds\/{build}`",
          "type": "string"
        },
        "projectId": {
          "description": "Required. ID of the project.",
          "type": "string"
        },
        "id": {
          "description": "Required. Build ID of the original build.",
          "type": "string"
        }
      }
    },
    "ApproveBuildRequest": {
      "id": "ApproveBuildRequest",
      "description": "Request to approve or reject a pending build.",
      "type": "object",
      "properties": {
        "approvalResult": {
          "description": "Approval decision and metadata.",
          "$ref": "ApprovalResult"
        }
      }
    },
    "BuildTrigger": {
      "id": "BuildTrigger",
      "description": "Configuration for an automated build in response to source repository changes.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Output only. Unique identifier of the trigger.",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "Human-readable description of this trigger.",
          "type": "string"
        },
        "name": {
          "description": "User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.",
          "type": "string"
        },
        "tags": {
          "description": "Tags for annotation of a `BuildTrigger`",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "triggerTemplate": {
          "description": "Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`.",
          "$ref": "RepoSource"
        },
        "github": {
          "description": "GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`.",
          "$ref": "GitHubEventsConfig"
        },
        "cron": {
          "description": "CronConfig describes the configuration of a trigger that creates a build whenever a Cloud Scheduler event is received.",
          "$ref": "CronConfig"
        },
        "build": {
          "description": "Contents of the build template.",
          "$ref": "Build"
        },
        "filename": {
          "description": "Path, from the source root, to a file whose contents is used for the template.",
          "type": "string"
        },
        "gitFileSource": {
          "description": "The file source describing the local or remote Build template.",
          "$ref": "GitFileSource"
        },
        "createTime": {
          "description": "Output only. Time when the trigger was created.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "disabled": {
          "description": "If true, the trigger will never automatically execute a build.",
          "type": "boolean"
        },
        "substitutions": {
          "description": "Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ignoredFiles": {
          "description": "ignored_files and included_files are file glob matches using https:\/\/golang.org\/pkg\/path\/filepath\/#Match extended with support for \"**\". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "includedFiles": {
          "description": "If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sourceToBuild": {
          "description": "The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond to SCM events. Triggers that respond to such events build source at whatever commit caused the event.",
          "$ref": "GitRepoSource"
        },
        "approvalConfig": {
          "description": "Configuration for manual approval to start a build invocation of this BuildTrigger.",
          "$ref": "ApprovalConfig"
        }
      }
    },
    "GitHubEventsConfig": {
      "id": "GitHubEventsConfig",
      "description": "GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. This message is experimental.",
      "type": "object",
      "properties": {
        "installationId": {
          "description": "The installationID that emits the GitHub event.",
          "type": "string",
          "format": "int64"
        },
        "owner": {
          "description": "Owner of the repository. For example: The owner for https:\/\/github.com\/googlecloudplatform\/cloud-builders is \"googlecloudplatform\".",
          "type": "string"
        },
        "name": {
          "description": "Name of the repository. For example: The name for https:\/\/github.com\/googlecloudplatform\/cloud-builders is \"cloud-builders\".",
          "type": "string"
        },
        "pullRequest": {
          "description": "filter to match changes in pull requests.",
          "$ref": "PullRequestFilter"
        },
        "push": {
          "description": "filter to match changes in refs like branches, tags.",
          "$ref": "PushFilter"
        },
        "enterpriseConfigResourceName": {
          "description": "Optional: The resource name of the github enterprise config that should be applied to this installation. For example: \"projects\/{$project_id}\/githubEnterpriseConfig\/{$config_id}\"",
          "type": "string"
        },
        "enterpriseConfig": {
          "description": "Output only. The GitHubEnterpriseConfig enterprise config specified in the enterprise_config_resource_name field.",
          "readOnly": true,
          "$ref": "GitHubEnterpriseConfig"
        }
      }
    },
    "PullRequestFilter": {
      "id": "PullRequestFilter",
      "description": "PullRequestFilter contains filter properties for matching GitHub Pull Requests.",
      "type": "object",
      "properties": {
        "branch": {
          "description": "Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https:\/\/github.com\/google\/re2\/wiki\/Syntax",
          "type": "string"
        },
        "commentControl": {
          "description": "Configure builds to run whether a repository owner or collaborator need to comment `\/gcbrun`.",
          "type": "string",
          "enumDescriptions": [
            "Do not require comments on Pull Requests before builds are triggered.",
            "Enforce that repository owners or collaborators must comment on Pull Requests before builds are triggered.",
            "Enforce that repository owners or collaborators must comment on external contributors' Pull Requests before builds are triggered."
          ],
          "enum": [
            "COMMENTS_DISABLED",
            "COMMENTS_ENABLED",
            "COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY"
          ]
        },
        "invertRegex": {
          "description": "If true, branches that do NOT match the git_ref will trigger a build.",
          "type": "boolean"
        }
      }
    },
    "PushFilter": {
      "id": "PushFilter",
      "description": "Push contains filter properties for matching GitHub git pushes.",
      "type": "object",
      "properties": {
        "branch": {
          "description": "Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https:\/\/github.com\/google\/re2\/wiki\/Syntax",
          "type": "string"
        },
        "tag": {
          "description": "Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https:\/\/github.com\/google\/re2\/wiki\/Syntax",
          "type": "string"
        },
        "invertRegex": {
          "description": "When true, only trigger a build if the revision regex does NOT match the git_ref regex.",
          "type": "boolean"
        }
      }
    },
    "GitHubEnterpriseConfig": {
      "id": "GitHubEnterpriseConfig",
      "description": "GitHubEnterpriseConfig represents a configuration for a GitHub Enterprise server.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects\/{$project_id}\/githubEnterpriseConfig\/{$config_id}\"",
          "type": "string"
        },
        "hostUrl": {
          "description": "The URL of the github enterprise host the configuration is for.",
          "type": "string"
        },
        "appId": {
          "description": "Required. The GitHub app id of the Cloud Build app on the GitHub Enterprise server.",
          "type": "string",
          "format": "int64"
        },
        "appConfigJson": {
          "description": "Optional. Cloud Storage location of the encrypted GitHub App config information.",
          "$ref": "GCSLocation"
        },
        "createTime": {
          "description": "Output only. Time when the installation was associated with the project.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "webhookKey": {
          "description": "Optional. The key that should be attached to webhook calls to the ReceiveWebhook endpoint.",
          "type": "string"
        },
        "peeredNetwork": {
          "description": "Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects\/{project}\/global\/networks\/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.",
          "type": "string"
        },
        "secrets": {
          "description": "Optional. Names of secrets in Secret Manager.",
          "$ref": "GitHubEnterpriseSecrets"
        }
      }
    },
    "GCSLocation": {
      "id": "GCSLocation",
      "description": "Represents a storage location in Cloud Storage",
      "type": "object",
      "properties": {
        "bucket": {
          "description": "Google Cloud Storage bucket. See https:\/\/cloud.google.com\/storage\/docs\/naming#requirements",
          "type": "string"
        },
        "object": {
          "description": "Google Cloud Storage object. See https:\/\/cloud.google.com\/storage\/docs\/naming#objectnames",
          "type": "string"
        },
        "generation": {
          "description": "Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GitHubEnterpriseSecrets": {
      "id": "GitHubEnterpriseSecrets",
      "description": "GitHubEnterpriseSecrets represents the names of all necessary secrets in Secret Manager for a GitHub Enterprise server. Format is: projects\/\/secrets\/.",
      "type": "object",
      "properties": {
        "privateKeyName": {
          "description": "The resource name for the private key secret.",
          "type": "string"
        },
        "webhookSecretName": {
          "description": "The resource name for the webhook secret in Secret Manager.",
          "type": "string"
        },
        "oauthSecretName": {
          "description": "The resource name for the OAuth secret in Secret Manager.",
          "type": "string"
        },
        "oauthClientIdName": {
          "description": "The resource name for the OAuth client ID secret in Secret Manager.",
          "type": "string"
        }
      }
    },
    "CronConfig": {
      "id": "CronConfig",
      "description": "CronConfig describes the configuration of a trigger that creates a build whenever a Cloud Scheduler event is received.",
      "type": "object",
      "properties": {
        "enterpriseConfigResource": {
          "description": "Optional. The GitHub Enterprise config resource name that is associated with this installation.",
          "type": "string"
        },
        "schedule": {
          "description": "Required. Describes the schedule on which the job will be executed. The schedule can be either of the following types: * [Crontab](http:\/\/en.wikipedia.org\/wiki\/Cron#Overview) * English-like [schedule](https:\/\/cloud.google.com\/scheduler\/docs\/configuring\/cron-job-schedules)",
          "type": "string"
        },
        "timeZone": {
          "description": "Optional. Specifies the time zone to be used in interpreting the schedule. The value of this field must be a time zone name from the [tz database] (http:\/\/en.wikipedia.org\/wiki\/Tz_database). Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string \"utc\". If a time zone is not specified, the default will be in UTC (also known as GMT).",
          "type": "string"
        }
      }
    },
    "GitFileSource": {
      "id": "GitFileSource",
      "description": "GitFileSource describes a file within a (possibly remote) code repository.",
      "type": "object",
      "properties": {
        "path": {
          "description": "The path of the file, with the repo root as the root of the path.",
          "type": "string"
        },
        "uri": {
          "description": "The URI of the repo (optional). If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.",
          "type": "string"
        },
        "repoType": {
          "description": "See RepoType above.",
          "type": "string",
          "enumDescriptions": [
            "The default, unknown repo type.",
            "A Google Cloud Source Repositories-hosted repo.",
            "A GitHub-hosted repo not necessarily on \"github.com\" (i.e. GitHub Enterprise)."
          ],
          "enum": [
            "UNKNOWN",
            "CLOUD_SOURCE_REPOSITORIES",
            "GITHUB"
          ]
        },
        "revision": {
          "description": "The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax\/resolution as described here: https:\/\/git-scm.com\/docs\/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.",
          "type": "string"
        }
      }
    },
    "GitRepoSource": {
      "id": "GitRepoSource",
      "description": "GitRepoSource describes a repo and ref of a code repository.",
      "type": "object",
      "properties": {
        "uri": {
          "description": "The URI of the repo (required).",
          "type": "string"
        },
        "ref": {
          "description": "The branch or tag to use. Must start with \"refs\/\" (required).",
          "type": "string"
        },
        "repoType": {
          "description": "See RepoType below.",
          "type": "string",
          "enumDescriptions": [
            "The default, unknown repo type.",
            "A Google Cloud Source Repositories-hosted repo.",
            "A GitHub-hosted repo not necessarily on \"github.com\" (i.e. GitHub Enterprise)."
          ],
          "enum": [
            "UNKNOWN",
            "CLOUD_SOURCE_REPOSITORIES",
            "GITHUB"
          ]
        }
      }
    },
    "ListBuildTriggersResponse": {
      "id": "ListBuildTriggersResponse",
      "description": "Response containing existing `BuildTriggers`.",
      "type": "object",
      "properties": {
        "triggers": {
          "description": "`BuildTriggers` for the project, sorted by `create_time` descending.",
          "type": "array",
          "items": {
            "$ref": "BuildTrigger"
          }
        },
        "nextPageToken": {
          "description": "Token to receive the next page of results.",
          "type": "string"
        }
      }
    },
    "HttpBody": {
      "id": "HttpBody",
      "description": "Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { \/\/ A unique request id. string request_id = 1; \/\/ The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.",
      "type": "object",
      "properties": {
        "contentType": {
          "description": "The HTTP Content-Type header value specifying the content type of the body.",
          "type": "string"
        },
        "data": {
          "description": "The HTTP request\/response body as raw binary.",
          "type": "string",
          "format": "byte"
        },
        "extensions": {
          "description": "Application specific response metadata. Must be set in the first response for streaming APIs.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        }
      }
    },
    "Installation": {
      "id": "Installation",
      "description": "A GitHub-app installation.",
      "type": "object",
      "properties": {
        "id": {
          "description": "GitHub installation ID, created by GitHub.",
          "type": "string",
          "format": "int64"
        },
        "projectNum": {
          "description": "Numerical ID of the project.",
          "type": "string",
          "format": "int64"
        },
        "projectId": {
          "description": "The project ID of the GCP project the installation is associated with.",
          "type": "string"
        },
        "createTime": {
          "description": "Time when the installation was associated with the project. This field is immutable and cannot be updated.",
          "type": "string",
          "format": "google-datetime"
        },
        "repositorySettingList": {
          "description": "The GitHub repositories that we should respond to for this installation. If this is not set, we will respect the default_check_suite_events boolean for any repository visible for that installation.",
          "$ref": "GitHubRepositorySettingList"
        },
        "enterpriseConfigResourceName": {
          "description": "Optional: The resource name of the github enterprise config that should be applied to this installation. For example: \"projects\/{$project_id}\/githubEnterpriseConfig\/{$config_id}\"",
          "type": "string"
        },
        "enterpriseConfig": {
          "description": "Output only. The GitHubEnterpriseConfig enterprise config specified in the enterprise_config_resource_name field.",
          "readOnly": true,
          "$ref": "GitHubEnterpriseConfig"
        }
      }
    },
    "GitHubRepositorySettingList": {
      "id": "GitHubRepositorySettingList",
      "description": "A wrapper message for a list of GitHubRepositorySettings.",
      "type": "object",
      "properties": {
        "repositorySettings": {
          "description": "A list of GitHubRepositorySettings.",
          "type": "array",
          "items": {
            "$ref": "GitHubRepositorySetting"
          }
        }
      }
    },
    "GitHubRepositorySetting": {
      "id": "GitHubRepositorySetting",
      "description": "Represents a GitHub repository setting.",
      "type": "object",
      "properties": {
        "owner": {
          "description": "GitHub user or organization name.",
          "type": "string"
        },
        "name": {
          "description": "Name of the repository.",
          "type": "string"
        }
      }
    },
    "ListGitHubInstallationsResponse": {
      "id": "ListGitHubInstallationsResponse",
      "description": "RPC response object accepted by the ListGitHubInstallations RPC method.",
      "type": "object",
      "properties": {
        "installations": {
          "description": "Installations matching the requested installation ID.",
          "type": "array",
          "items": {
            "$ref": "Installation"
          }
        }
      }
    },
    "ListGitHubInstallationsForProjectResponse": {
      "id": "ListGitHubInstallationsForProjectResponse",
      "description": "RPC response object returned by the ListGitHubInstallations RPC method.",
      "type": "object",
      "properties": {
        "installations": {
          "description": "Installations belonging to the specified project_id.",
          "type": "array",
          "items": {
            "$ref": "Installation"
          }
        }
      }
    },
    "ListGithubEnterpriseConfigsResponse": {
      "id": "ListGithubEnterpriseConfigsResponse",
      "description": "RPC response object returned by ListGithubEnterpriseConfigs RPC method.",
      "type": "object",
      "properties": {
        "configs": {
          "description": "A list of GitHubEnterpriseConfigs",
          "type": "array",
          "items": {
            "$ref": "GitHubEnterpriseConfig"
          }
        }
      }
    },
    "GitHubEnterpriseApp": {
      "id": "GitHubEnterpriseApp",
      "description": "RPC response object returned by the GetGitHubEnterpriseApp RPC method.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the GitHub App",
          "type": "string"
        }
      }
    },
    "OAuthRegistrationURI": {
      "id": "OAuthRegistrationURI",
      "description": "RPC Response object returned by GetOAuthRegistrationURL",
      "type": "object",
      "properties": {
        "registrationUri": {
          "description": "The URL that the user should be redirected to in order to start the OAuth flow. When the user is redirected to this URL, they will be sent to the source provider specified in the request to authorize CloudBuild to access their oauth credentials. After the authorization is completed, the user will be redirected to the Cloud Build console.",
          "type": "string"
        }
      }
    },
    "BuildOperationMetadata": {
      "id": "BuildOperationMetadata",
      "description": "Metadata for build operations.",
      "type": "object",
      "properties": {
        "build": {
          "description": "The build that the operation is tracking.",
          "$ref": "Build"
        }
      }
    },
    "ArtifactResult": {
      "id": "ArtifactResult",
      "description": "An artifact that was uploaded during a build. This is a single record in the artifact manifest JSON file.",
      "type": "object",
      "properties": {
        "location": {
          "description": "The path of an artifact in a Google Cloud Storage bucket, with the generation number. For example, `gs:\/\/mybucket\/path\/to\/output.jar#generation`.",
          "type": "string"
        },
        "fileHash": {
          "description": "The file hash of the artifact.",
          "type": "array",
          "items": {
            "$ref": "FileHashes"
          }
        }
      }
    },
    "HTTPDelivery": {
      "id": "HTTPDelivery",
      "description": "HTTPDelivery is the delivery configuration for an HTTP notification.",
      "type": "object",
      "properties": {
        "uri": {
          "description": "The URI to which JSON-containing HTTP POST requests should be sent.",
          "type": "string"
        }
      }
    },
    "Notification": {
      "id": "Notification",
      "description": "Notification is the container which holds the data that is relevant to this particular notification.",
      "type": "object",
      "properties": {
        "filter": {
          "description": "The filter string to use for notification filtering. Currently, this is assumed to be a CEL program. See https:\/\/opensource.google\/projects\/cel for more.",
          "type": "string"
        },
        "smtpDelivery": {
          "description": "Configuration for SMTP (email) delivery.",
          "$ref": "SMTPDelivery"
        },
        "slackDelivery": {
          "description": "Configuration for Slack delivery.",
          "$ref": "SlackDelivery"
        },
        "httpDelivery": {
          "description": "Configuration for HTTP delivery.",
          "$ref": "HTTPDelivery"
        },
        "structDelivery": {
          "description": "Escape hatch for users to supply custom delivery configs.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          }
        }
      }
    },
    "SMTPDelivery": {
      "id": "SMTPDelivery",
      "description": "SMTPDelivery is the delivery configuration for an SMTP (email) notification.",
      "type": "object",
      "properties": {
        "server": {
          "description": "The address of the SMTP server.",
          "type": "string"
        },
        "port": {
          "description": "The SMTP port of the server.",
          "type": "string"
        },
        "senderAddress": {
          "description": "This is the SMTP account\/email that is used to send the message.",
          "type": "string"
        },
        "fromAddress": {
          "description": "This is the SMTP account\/email that appears in the `From:` of the email. If empty, it is assumed to be sender.",
          "type": "string"
        },
        "recipientAddresses": {
          "description": "This is the list of addresses to which we send the email (i.e. in the `To:` of the email).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "password": {
          "description": "The SMTP sender's password.",
          "$ref": "NotifierSecretRef"
        }
      }
    },
    "NotifierSecretRef": {
      "id": "NotifierSecretRef",
      "description": "NotifierSecretRef contains the reference to a secret stored in the corresponding NotifierSpec.",
      "type": "object",
      "properties": {
        "secretRef": {
          "description": "The value of `secret_ref` should be a `name` that is registered in a `Secret` in the `secrets` list of the `Spec`.",
          "type": "string"
        }
      }
    },
    "SlackDelivery": {
      "id": "SlackDelivery",
      "description": "SlackDelivery is the delivery configuration for delivering Slack messages via webhooks. See Slack webhook documentation at: https:\/\/api.slack.com\/messaging\/webhooks.",
      "type": "object",
      "properties": {
        "webhookUri": {
          "description": "The secret reference for the Slack webhook URI for sending messages to a channel.",
          "$ref": "NotifierSecretRef"
        }
      }
    },
    "NotifierConfig": {
      "id": "NotifierConfig",
      "description": "NotifierConfig is the top-level configuration message.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "The API version of this configuration format.",
          "type": "string"
        },
        "kind": {
          "description": "The type of notifier to use (e.g. SMTPNotifier).",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata for referring to\/handling\/deploying this notifier.",
          "$ref": "NotifierMetadata"
        },
        "spec": {
          "description": "The actual configuration for this notifier.",
          "$ref": "NotifierSpec"
        }
      }
    },
    "NotifierMetadata": {
      "id": "NotifierMetadata",
      "description": "NotifierMetadata contains the data which can be used to reference or describe this notifier.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The human-readable and user-given name for the notifier. For example: \"repo-merge-email-notifier\".",
          "type": "string"
        },
        "notifier": {
          "description": "The string representing the name and version of notifier to deploy. Expected to be of the form of \"\/:\". For example: \"gcr.io\/my-project\/notifiers\/smtp:1.2.34\".",
          "type": "string"
        }
      }
    },
    "NotifierSpec": {
      "id": "NotifierSpec",
      "description": "NotifierSpec is the configuration container for notifications.",
      "type": "object",
      "properties": {
        "notification": {
          "description": "The configuration of this particular notifier.",
          "$ref": "Notification"
        },
        "secrets": {
          "description": "Configurations for secret resources used by this particular notifier.",
          "type": "array",
          "items": {
            "$ref": "NotifierSecret"
          }
        }
      }
    },
    "NotifierSecret": {
      "id": "NotifierSecret",
      "description": "NotifierSecret is the container that maps a secret name (reference) to its Google Cloud Secret Manager resource path.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name is the local name of the secret, such as the verbatim string \"my-smtp-password\".",
          "type": "string"
        },
        "value": {
          "description": "Value is interpreted to be a resource path for fetching the actual (versioned) secret data for this secret. For example, this would be a Google Cloud Secret Manager secret version resource path like: \"projects\/my-project\/secrets\/my-secret\/versions\/latest\".",
          "type": "string"
        }
      }
    }
  },
  "resources": {
    "operations": {
      "methods": {
        "get": {
          "id": "cloudbuild.operations.get",
          "path": "v1/{+name}",
          "flatPath": "v1/operations/{operationsId}",
          "httpMethod": "GET",
          "parameters": {
            "name": {
              "description": "The name of the operation resource.",
              "location": "path",
              "required": true,
              "pattern": "^operations\/.*$",
              "type": "string"
            }
          },
          "parameterOrder": [
            "name"
          ],
          "response": {
            "$ref": "Operation"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."
        },
        "cancel": {
          "id": "cloudbuild.operations.cancel",
          "path": "v1/{+name}:cancel",
          "flatPath": "v1/operations/{operationsId}:cancel",
          "httpMethod": "POST",
          "parameters": {
            "name": {
              "description": "The name of the operation resource to be cancelled.",
              "location": "path",
              "required": true,
              "pattern": "^operations\/.*$",
              "type": "string"
            }
          },
          "parameterOrder": [
            "name"
          ],
          "request": {
            "$ref": "CancelOperationRequest"
          },
          "response": {
            "$ref": "Empty"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."
        }
      }
    },
    "projects": {
      "resources": {
        "locations": {
          "resources": {
            "operations": {
              "methods": {
                "get": {
                  "id": "cloudbuild.projects.locations.operations.get",
                  "path": "v1/{+name}",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/operations\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."
                },
                "cancel": {
                  "id": "cloudbuild.projects.locations.operations.cancel",
                  "path": "v1/{+name}:cancel",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
                  "httpMethod": "POST",
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource to be cancelled.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/operations\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "CancelOperationRequest"
                  },
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."
                }
              }
            },
            "builds": {
              "methods": {
                "create": {
                  "id": "cloudbuild.projects.locations.builds.create",
                  "path": "v1/{+parent}/builds",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds",
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "description": "The parent resource where this build will be created. Format: `projects\/{project}\/locations\/{location}`",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "type": "string"
                    },
                    "projectId": {
                      "description": "Required. ID of the project.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "Build"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Starts a build with the specified configuration. This method returns a long-running `Operation`, which includes the build ID. Pass the build ID to `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`)."
                },
                "get": {
                  "id": "cloudbuild.projects.locations.builds.get",
                  "path": "v1/{+name}",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "The name of the `Build` to retrieve. Format: `projects\/{project}\/locations\/{location}\/builds\/{build}`",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/builds\/[^\/]+$",
                      "type": "string"
                    },
                    "projectId": {
                      "description": "Required. ID of the project.",
                      "location": "query",
                      "type": "string"
                    },
                    "id": {
                      "description": "Required. ID of the build.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Build"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Returns information about a previously requested build. The `Build` that is returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`), and timing information."
                },
                "list": {
                  "id": "cloudbuild.projects.locations.builds.list",
                  "path": "v1/{+parent}/builds",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds",
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "description": "The parent of the collection of `Builds`. Format: `projects\/{project}\/locations\/location`",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "type": "string"
                    },
                    "projectId": {
                      "description": "Required. ID of the project.",
                      "location": "query",
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "Number of results to return in the list.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "The page token for the next page of Builds. If unspecified, the first page of results is returned. If the token is rejected for any reason, INVALID_ARGUMENT will be thrown. In this case, the token should be discarded, and pagination should be restarted from the first page of results. See https:\/\/google.aip.dev\/158 for more.",
                      "location": "query",
                      "type": "string"
                    },
                    "filter": {
                      "description": "The raw filter text to constrain the results.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListBuildsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Lists previously requested builds. Previously requested builds may still be in-progress, or may have finished successfully or unsuccessfully."
                },
                "cancel": {
                  "id": "cloudbuild.projects.locations.builds.cancel",
                  "path": "v1/{+name}:cancel",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:cancel",
                  "httpMethod": "POST",
                  "parameters": {
                    "name": {
                      "description": "The name of the `Build` to retrieve. Format: `projects\/{project}\/locations\/{location}\/builds\/{build}`",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/builds\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "CancelBuildRequest"
                  },
                  "response": {
                    "$ref": "Build"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Cancels a build in progress."
                },
                "retry": {
                  "id": "cloudbuild.projects.locations.builds.retry",
                  "path": "v1/{+name}:retry",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:retry",
                  "httpMethod": "POST",
                  "parameters": {
                    "name": {
                      "description": "The name of the `Build` to retry. Format: `projects\/{project}\/locations\/{location}\/builds\/{build}`",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/builds\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "RetryBuildRequest"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Creates a new build based on the specified build. This method creates a new build using the original build request, which may or may not result in an identical build. For triggered builds: * Triggered builds resolve to a precise revision; therefore a retry of a triggered build will result in a build that uses the same revision. For non-triggered builds that specify `RepoSource`: * If the original build built from the tip of a branch, the retried build will build from the tip of that branch, which may not be the same revision as the original build. * If the original build specified a commit sha or revision ID, the retried build will use the identical source. For builds that specify `StorageSource`: * If the original build pulled source from Google Cloud Storage without specifying the generation of the object, the new build will use the current object, which may be different from the original build source. * If the original build pulled source from Cloud Storage and specified the generation of the object, the new build will attempt to use the same object, which may or may not be available depending on the bucket's lifecycle management settings."
                }
              }
            }
          }
        },
        "builds": {
          "methods": {
            "create": {
              "id": "cloudbuild.projects.builds.create",
              "path": "v1/projects/{projectId}/builds",
              "flatPath": "v1/projects/{projectId}/builds",
              "httpMethod": "POST",
              "parameters": {
                "projectId": {
                  "description": "Required. ID of the project.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "parent": {
                  "description": "The parent resource where this build will be created. Format: `projects\/{project}\/locations\/{location}`",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectId"
              ],
              "request": {
                "$ref": "Build"
              },
              "response": {
                "$ref": "Operation"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Starts a build with the specified configuration. This method returns a long-running `Operation`, which includes the build ID. Pass the build ID to `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`)."
            },
            "get": {
              "id": "cloudbuild.projects.builds.get",
              "path": "v1/projects/{projectId}/builds/{id}",
              "flatPath": "v1/projects/{projectId}/builds/{id}",
              "httpMethod": "GET",
              "parameters": {
                "projectId": {
                  "description": "Required. ID of the project.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "Required. ID of the build.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "name": {
                  "description": "The name of the `Build` to retrieve. Format: `projects\/{project}\/locations\/{location}\/builds\/{build}`",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectId",
                "id"
              ],
              "response": {
                "$ref": "Build"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Returns information about a previously requested build. The `Build` that is returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`), and timing information."
            },
            "list": {
              "id": "cloudbuild.projects.builds.list",
              "path": "v1/projects/{projectId}/builds",
              "flatPath": "v1/projects/{projectId}/builds",
              "httpMethod": "GET",
              "parameters": {
                "projectId": {
                  "description": "Required. ID of the project.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "parent": {
                  "description": "The parent of the collection of `Builds`. Format: `projects\/{project}\/locations\/location`",
                  "location": "query",
                  "type": "string"
                },
                "pageSize": {
                  "description": "Number of results to return in the list.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "The page token for the next page of Builds. If unspecified, the first page of results is returned. If the token is rejected for any reason, INVALID_ARGUMENT will be thrown. In this case, the token should be discarded, and pagination should be restarted from the first page of results. See https:\/\/google.aip.dev\/158 for more.",
                  "location": "query",
                  "type": "string"
                },
                "filter": {
                  "description": "The raw filter text to constrain the results.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectId"
              ],
              "response": {
                "$ref": "ListBuildsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Lists previously requested builds. Previously requested builds may still be in-progress, or may have finished successfully or unsuccessfully."
            },
            "cancel": {
              "id": "cloudbuild.projects.builds.cancel",
              "path": "v1/projects/{projectId}/builds/{id}:cancel",
              "flatPath": "v1/projects/{projectId}/builds/{id}:cancel",
              "httpMethod": "POST",
              "parameters": {
                "projectId": {
                  "description": "Required. ID of the project.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "Required. ID of the build.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectId",
                "id"
              ],
              "request": {
                "$ref": "CancelBuildRequest"
              },
              "response": {
                "$ref": "Build"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Cancels a build in progress."
            },
            "retry": {
              "id": "cloudbuild.projects.builds.retry",
              "path": "v1/projects/{projectId}/builds/{id}:retry",
              "flatPath": "v1/projects/{projectId}/builds/{id}:retry",
              "httpMethod": "POST",
              "parameters": {
                "projectId": {
                  "description": "Required. ID of the project.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "Required. Build ID of the original build.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectId",
                "id"
              ],
              "request": {
                "$ref": "RetryBuildRequest"
              },
              "response": {
                "$ref": "Operation"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Creates a new build based on the specified build. This method creates a new build using the original build request, which may or may not result in an identical build. For triggered builds: * Triggered builds resolve to a precise revision; therefore a retry of a triggered build will result in a build that uses the same revision. For non-triggered builds that specify `RepoSource`: * If the original build built from the tip of a branch, the retried build will build from the tip of that branch, which may not be the same revision as the original build. * If the original build specified a commit sha or revision ID, the retried build will use the identical source. For builds that specify `StorageSource`: * If the original build pulled source from Google Cloud Storage without specifying the generation of the object, the new build will use the current object, which may be different from the original build source. * If the original build pulled source from Cloud Storage and specified the generation of the object, the new build will attempt to use the same object, which may or may not be available depending on the bucket's lifecycle management settings."
            },
            "approve": {
              "id": "cloudbuild.projects.builds.approve",
              "path": "v1/{+name}:approve",
              "flatPath": "v1/projects/{projectsId}/builds/{buildsId}:approve",
              "httpMethod": "POST",
              "parameters": {
                "name": {
                  "description": "Required. Name of the target build. For example: \"projects\/{$project_id}\/builds\/{$build_id}\"",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/builds\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "request": {
                "$ref": "ApproveBuildRequest"
              },
              "response": {
                "$ref": "Operation"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Approves or rejects a pending build. If approved, the returned LRO will be analogous to the LRO returned from a CreateBuild call. If rejected, the returned LRO will be immediately done."
            }
          }
        },
        "triggers": {
          "methods": {
            "create": {
              "id": "cloudbuild.projects.triggers.create",
              "path": "v1/projects/{projectId}/triggers",
              "flatPath": "v1/projects/{projectId}/triggers",
              "httpMethod": "POST",
              "parameters": {
                "projectId": {
                  "description": "Required. ID of the project for which to configure automatic builds.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectId"
              ],
              "request": {
                "$ref": "BuildTrigger"
              },
              "response": {
                "$ref": "BuildTrigger"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Creates a new `BuildTrigger`. This API is experimental."
            },
            "get": {
              "id": "cloudbuild.projects.triggers.get",
              "path": "v1/projects/{projectId}/triggers/{triggerId}",
              "flatPath": "v1/projects/{projectId}/triggers/{triggerId}",
              "httpMethod": "GET",
              "parameters": {
                "projectId": {
                  "description": "Required. ID of the project that owns the trigger.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "triggerId": {
                  "description": "Required. Identifier (`id` or `name`) of the `BuildTrigger` to get.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectId",
                "triggerId"
              ],
              "response": {
                "$ref": "BuildTrigger"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Returns information about a `BuildTrigger`. This API is experimental."
            },
            "list": {
              "id": "cloudbuild.projects.triggers.list",
              "path": "v1/projects/{projectId}/triggers",
              "flatPath": "v1/projects/{projectId}/triggers",
              "httpMethod": "GET",
              "parameters": {
                "projectId": {
                  "description": "Required. ID of the project for which to list BuildTriggers.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "pageSize": {
                  "description": "Number of results to return in the list.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "Token to provide to skip to a particular spot in the list.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectId"
              ],
              "response": {
                "$ref": "ListBuildTriggersResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Lists existing `BuildTrigger`s. This API is experimental."
            },
            "delete": {
              "id": "cloudbuild.projects.triggers.delete",
              "path": "v1/projects/{projectId}/triggers/{triggerId}",
              "flatPath": "v1/projects/{projectId}/triggers/{triggerId}",
              "httpMethod": "DELETE",
              "parameters": {
                "projectId": {
                  "description": "Required. ID of the project that owns the trigger.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "triggerId": {
                  "description": "Required. ID of the `BuildTrigger` to delete.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectId",
                "triggerId"
              ],
              "response": {
                "$ref": "Empty"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Deletes a `BuildTrigger` by its project ID and trigger ID. This API is experimental."
            },
            "patch": {
              "id": "cloudbuild.projects.triggers.patch",
              "path": "v1/projects/{projectId}/triggers/{triggerId}",
              "flatPath": "v1/projects/{projectId}/triggers/{triggerId}",
              "httpMethod": "PATCH",
              "parameters": {
                "projectId": {
                  "description": "Required. ID of the project that owns the trigger.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "triggerId": {
                  "description": "Required. ID of the `BuildTrigger` to update.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectId",
                "triggerId"
              ],
              "request": {
                "$ref": "BuildTrigger"
              },
              "response": {
                "$ref": "BuildTrigger"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Updates a `BuildTrigger` by its project ID and trigger ID. This API is experimental."
            },
            "run": {
              "id": "cloudbuild.projects.triggers.run",
              "path": "v1/projects/{projectId}/triggers/{triggerId}:run",
              "flatPath": "v1/projects/{projectId}/triggers/{triggerId}:run",
              "httpMethod": "POST",
              "parameters": {
                "projectId": {
                  "description": "Required. ID of the project.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "triggerId": {
                  "description": "Required. ID of the trigger.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectId",
                "triggerId"
              ],
              "request": {
                "$ref": "RepoSource"
              },
              "response": {
                "$ref": "Operation"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Runs a `BuildTrigger` at a particular source revision."
            }
          }
        },
        "github": {
          "resources": {
            "installations": {
              "methods": {
                "create": {
                  "id": "cloudbuild.projects.github.installations.create",
                  "path": "v1/projects/{projectId}/github/installations",
                  "flatPath": "v1/projects/{projectId}/github/installations",
                  "httpMethod": "POST",
                  "parameters": {
                    "projectId": {
                      "description": "ID of the project.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "userOauthCode": {
                      "description": "GitHub user code. If a GitHub credential is already associated with the user this can be omitted, else the code is used to exchange and store an OAuth token.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "projectId"
                  ],
                  "request": {
                    "$ref": "Installation"
                  },
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Create an association between a GCP project and a GitHub installation. This API is experimental."
                },
                "create": {
                  "id": "cloudbuild.projects.github.installations.create",
                  "path": "v1/projects/{projectId}/github/installations",
                  "flatPath": "v1/projects/{projectId}/github/installations",
                  "httpMethod": "POST",
                  "parameters": {
                    "projectId": {
                      "description": "The project ID of the GCP project the installation is associated with.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "projectId1": {
                      "description": "ID of the project.",
                      "location": "query",
                      "type": "string"
                    },
                    "userOauthCode": {
                      "description": "GitHub user code. If a GitHub credential is already associated with the user this can be omitted, else the code is used to exchange and store an OAuth token.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "projectId"
                  ],
                  "request": {
                    "$ref": "Installation"
                  },
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Create an association between a GCP project and a GitHub installation. This API is experimental."
                },
                "patch": {
                  "id": "cloudbuild.projects.github.installations.patch",
                  "path": "v1/projects/{projectId}/github/installations/{id}",
                  "flatPath": "v1/projects/{projectId}/github/installations/{id}",
                  "httpMethod": "PATCH",
                  "parameters": {
                    "projectId": {
                      "description": "The project ID of the GCP project the installation is associated with.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "id": {
                      "description": "GitHub installation ID, created by GitHub.",
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "format": "int64"
                    },
                    "projectId1": {
                      "description": "ID of the project.",
                      "location": "query",
                      "type": "string"
                    },
                    "installationId": {
                      "description": "Unique identifier of the GitHub installation. Deprecated. Should set installation.id",
                      "location": "query",
                      "type": "string",
                      "format": "int64"
                    },
                    "updateMask": {
                      "description": "Update mask for the Installation resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the resource will be performed.",
                      "location": "query",
                      "type": "string",
                      "format": "google-fieldmask"
                    }
                  },
                  "parameterOrder": [
                    "projectId",
                    "id"
                  ],
                  "request": {
                    "$ref": "Installation"
                  },
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Update settings for a GCP project to GitHub installation mapping. This API is experimental."
                },
                "delete": {
                  "id": "cloudbuild.projects.github.installations.delete",
                  "path": "v1/projects/{projectId}/github/installations/{installationId}",
                  "flatPath": "v1/projects/{projectId}/github/installations/{installationId}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "projectId": {
                      "description": "Cloud Project ID.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "installationId": {
                      "description": "GitHub app installation ID.",
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "format": "int64"
                    }
                  },
                  "parameterOrder": [
                    "projectId",
                    "installationId"
                  ],
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Delete an association between a GCP project and a GitHub installation. This API is experimental."
                },
                "list": {
                  "id": "cloudbuild.projects.github.installations.list",
                  "path": "v1/projects/{projectId}/github/installations",
                  "flatPath": "v1/projects/{projectId}/github/installations",
                  "httpMethod": "GET",
                  "parameters": {
                    "projectId": {
                      "description": "Project id",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "projectId"
                  ],
                  "response": {
                    "$ref": "ListGitHubInstallationsForProjectResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "List all Installations for a given project id. This API is experimental."
                }
              }
            }
          }
        },
        "installations": {
          "methods": {
            "create": {
              "id": "cloudbuild.projects.installations.create",
              "path": "v1/projects/{projectId}/installations",
              "flatPath": "v1/projects/{projectId}/installations",
              "httpMethod": "POST",
              "parameters": {
                "projectId": {
                  "description": "ID of the project.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "userOauthCode": {
                  "description": "GitHub user code. If a GitHub credential is already associated with the user this can be omitted, else the code is used to exchange and store an OAuth token.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectId"
              ],
              "request": {
                "$ref": "Installation"
              },
              "response": {
                "$ref": "Empty"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Create an association between a GCP project and a GitHub installation. This API is experimental."
            },
            "patch": {
              "id": "cloudbuild.projects.installations.patch",
              "path": "v1/projects/{projectNum}/installations/{id}",
              "flatPath": "v1/projects/{projectNum}/installations/{id}",
              "httpMethod": "PATCH",
              "parameters": {
                "projectNum": {
                  "description": "Numerical ID of the project.",
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "format": "int64"
                },
                "id": {
                  "description": "GitHub installation ID, created by GitHub.",
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "format": "int64"
                },
                "projectId": {
                  "description": "ID of the project.",
                  "location": "query",
                  "type": "string"
                },
                "installationId": {
                  "description": "Unique identifier of the GitHub installation. Deprecated. Should set installation.id",
                  "location": "query",
                  "type": "string",
                  "format": "int64"
                },
                "updateMask": {
                  "description": "Update mask for the Installation resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the resource will be performed.",
                  "location": "query",
                  "type": "string",
                  "format": "google-fieldmask"
                }
              },
              "parameterOrder": [
                "projectNum",
                "id"
              ],
              "request": {
                "$ref": "Installation"
              },
              "response": {
                "$ref": "Empty"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Update settings for a GCP project to GitHub installation mapping. This API is experimental."
            },
            "delete": {
              "id": "cloudbuild.projects.installations.delete",
              "path": "v1/projects/{projectId}/installations/{installationId}",
              "flatPath": "v1/projects/{projectId}/installations/{installationId}",
              "httpMethod": "DELETE",
              "parameters": {
                "projectId": {
                  "description": "Cloud Project ID.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "installationId": {
                  "description": "GitHub app installation ID.",
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "format": "int64"
                }
              },
              "parameterOrder": [
                "projectId",
                "installationId"
              ],
              "response": {
                "$ref": "Empty"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Delete an association between a GCP project and a GitHub installation. This API is experimental."
            },
            "list": {
              "id": "cloudbuild.projects.installations.list",
              "path": "v1/projects/{projectId}/installations",
              "flatPath": "v1/projects/{projectId}/installations",
              "httpMethod": "GET",
              "parameters": {
                "projectId": {
                  "description": "Project id",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectId"
              ],
              "response": {
                "$ref": "ListGitHubInstallationsForProjectResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "List all Installations for a given project id. This API is experimental."
            }
          }
        },
        "githubEnterpriseConfigs": {
          "methods": {
            "create": {
              "id": "cloudbuild.projects.githubEnterpriseConfigs.create",
              "path": "v1/{+parent}/githubEnterpriseConfigs",
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs",
              "httpMethod": "POST",
              "parameters": {
                "parent": {
                  "description": "Name of the parent project. For example: projects\/{$project_number} or projects\/{$project_id}",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+$",
                  "type": "string"
                },
                "projectId": {
                  "description": "ID of the project.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "request": {
                "$ref": "GitHubEnterpriseConfig"
              },
              "response": {
                "$ref": "GitHubEnterpriseConfig"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Create an association between a GCP project and a GitHub Enterprise server. This API is experimental."
            },
            "patch": {
              "id": "cloudbuild.projects.githubEnterpriseConfigs.patch",
              "path": "v1/{+name}",
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
              "httpMethod": "PATCH",
              "parameters": {
                "name": {
                  "description": "Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects\/{$project_id}\/githubEnterpriseConfig\/{$config_id}\"",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/githubEnterpriseConfigs\/[^\/]+$",
                  "type": "string"
                },
                "updateMask": {
                  "description": "Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed.",
                  "location": "query",
                  "type": "string",
                  "format": "google-fieldmask"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "request": {
                "$ref": "GitHubEnterpriseConfig"
              },
              "response": {
                "$ref": "GitHubEnterpriseConfig"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Update an association between a GCP project and a GitHub Enterprise server. This API is experimental."
            },
            "get": {
              "id": "cloudbuild.projects.githubEnterpriseConfigs.get",
              "path": "v1/{+name}",
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "description": "This field should contain the name of the enterprise config resource. For example: \"projects\/{$project_id}\/githubEnterpriseConfig\/{$config_id}\"",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/githubEnterpriseConfigs\/[^\/]+$",
                  "type": "string"
                },
                "projectId": {
                  "description": "ID of the project",
                  "location": "query",
                  "type": "string"
                },
                "configId": {
                  "description": "Unique identifier of the `GitHubEnterpriseConfig`",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "GitHubEnterpriseConfig"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Retrieve a GitHubEnterpriseConfig. This API is experimental."
            },
            "list": {
              "id": "cloudbuild.projects.githubEnterpriseConfigs.list",
              "path": "v1/{+parent}/githubEnterpriseConfigs",
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs",
              "httpMethod": "GET",
              "parameters": {
                "parent": {
                  "description": "Name of the parent project. For example: projects\/{$project_number} or projects\/{$project_id}",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+$",
                  "type": "string"
                },
                "projectId": {
                  "description": "ID of the project",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "ListGithubEnterpriseConfigsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "List all GitHubEnterpriseConfigs for a given project. This API is experimental."
            },
            "delete": {
              "id": "cloudbuild.projects.githubEnterpriseConfigs.delete",
              "path": "v1/{+name}",
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
              "httpMethod": "DELETE",
              "parameters": {
                "name": {
                  "description": "This field should contain the name of the enterprise config resource. For example: \"projects\/{$project_id}\/githubEnterpriseConfig\/{$config_id}\"",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/githubEnterpriseConfigs\/[^\/]+$",
                  "type": "string"
                },
                "projectId": {
                  "description": "ID of the project",
                  "location": "query",
                  "type": "string"
                },
                "configId": {
                  "description": "Unique identifier of the `GitHubEnterpriseConfig`",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Empty"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Delete an association between a GCP project and a GitHub Enterprise server. This API is experimental."
            },
            "getApp": {
              "id": "cloudbuild.projects.githubEnterpriseConfigs.getApp",
              "path": "v1/{+enterpriseConfigResource}/app",
              "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}/app",
              "httpMethod": "GET",
              "parameters": {
                "enterpriseConfigResource": {
                  "description": "Required. The name of the enterprise config resource associated with the GitHub App. For example: \"projects\/{$project_id}\/githubEnterpriseConfig\/{$config_id}\"",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/githubEnterpriseConfigs\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "enterpriseConfigResource"
              ],
              "response": {
                "$ref": "GitHubEnterpriseApp"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Get the GitHub App associated with a GitHub Enterprise Config. Uses the GitHub API: https:\/\/developer.github.com\/enterprise\/2.21\/v3\/apps\/#get-the-authenticated-app This API is experimental."
            }
          }
        }
      }
    },
    "v1": {
      "methods": {
        "webhook": {
          "id": "cloudbuild.webhook",
          "path": "v1/webhook",
          "flatPath": "v1/webhook",
          "httpMethod": "POST",
          "parameters": {
          },
          "parameterOrder": [
          ],
          "request": {
            "$ref": "HttpBody"
          },
          "response": {
            "$ref": "Empty"
          },
          "description": "ReceiveWebhook is called when the API receives a GitHub webhook."
        }
      }
    },
    "github": {
      "resources": {
        "installations": {
          "resources": {
            "projects": {
              "methods": {
                "list": {
                  "id": "cloudbuild.github.installations.projects.list",
                  "path": "v1/github/installations/{installationId}/projects",
                  "flatPath": "v1/github/installations/{installationId}/projects",
                  "httpMethod": "GET",
                  "parameters": {
                    "installationId": {
                      "description": "Installation ID",
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "format": "int64"
                    }
                  },
                  "parameterOrder": [
                    "installationId"
                  ],
                  "response": {
                    "$ref": "ListGitHubInstallationsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "For given installation id, list project-installation mappings across all GCB projects visible to the caller. This API is experimental."
                }
              }
            },
            "installations": {
              "methods": {
                "list": {
                  "id": "cloudbuild.github.installations.installations.list",
                  "path": "v1/github/installations/{installationId}/installations",
                  "flatPath": "v1/github/installations/{installationId}/installations",
                  "httpMethod": "GET",
                  "parameters": {
                    "installationId": {
                      "description": "Installation ID",
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "format": "int64"
                    }
                  },
                  "parameterOrder": [
                    "installationId"
                  ],
                  "response": {
                    "$ref": "ListGitHubInstallationsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "For given installation id, list project-installation mappings across all GCB projects visible to the caller. This API is experimental."
                }
              }
            }
          }
        }
      }
    },
    "installations": {
      "resources": {
        "installations": {
          "methods": {
            "list": {
              "id": "cloudbuild.installations.installations.list",
              "path": "v1/installations/{installationId}/installations",
              "flatPath": "v1/installations/{installationId}/installations",
              "httpMethod": "GET",
              "parameters": {
                "installationId": {
                  "description": "Installation ID",
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "format": "int64"
                }
              },
              "parameterOrder": [
                "installationId"
              ],
              "response": {
                "$ref": "ListGitHubInstallationsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "For given installation id, list project-installation mappings across all GCB projects visible to the caller. This API is experimental."
            }
          }
        }
      }
    },
    "oauth": {
      "methods": {
        "getRegistration": {
          "id": "cloudbuild.oauth.getRegistration",
          "path": "v1/oauth/registration",
          "flatPath": "v1/oauth/registration",
          "httpMethod": "GET",
          "parameters": {
            "hostUrl": {
              "description": "Required. The host url that the oauth credentials are associated with. For GitHub, this would be \"https:\/\/github.com\". For GitHubEnterprise, this would be the host name of their github enterprise instance.",
              "location": "query",
              "type": "string"
            },
            "namespace": {
              "description": "Required. The namespace that the credential belongs to.",
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "The default namespace.",
                "A credential to be used with GitHub enterprise."
              ],
              "enum": [
                "NAMESPACE_UNSPECIFIED",
                "GITHUB_ENTERPRISE"
              ]
            },
            "githubEnterpriseConfig": {
              "description": "Optional. The full resource name of the github enterprise resource if applicable.",
              "location": "query",
              "type": "string"
            },
            "authUser": {
              "description": "Optional. For users who are logged in using multiple accounts, specify the auth user parameter so that the registration url redirects back to the cloud console using the proper account.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
          ],
          "response": {
            "$ref": "OAuthRegistrationURI"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Get a URL that a customer should use to initiate an OAuth flow on an external source provider. This API is experimental."
        },
        "processOAuthCallback": {
          "id": "cloudbuild.oauth.processOAuthCallback",
          "path": "v1/oauth:processOAuthCallback",
          "flatPath": "v1/oauth:processOAuthCallback",
          "httpMethod": "GET",
          "parameters": {
            "namespace": {
              "description": "The namespace that the oauth callback credential should be processed for. This should map to the string name of the enum defined in the GetOAuthRegistrationURLRequest.",
              "location": "query",
              "type": "string"
            },
            "code": {
              "description": "GitHub generated temproary authorization code.",
              "location": "query",
              "type": "string"
            },
            "state": {
              "description": "The XSRF token that was sent as part of the initial request to start the OAuth flow.",
              "location": "query",
              "type": "string"
            },
            "hostUrl": {
              "description": "The host url of the site that the OAuth token is issued for.",
              "location": "query",
              "type": "string"
            },
            "githubEnterpriseConfig": {
              "description": "For github enterprise, the full resource name of the github enterprise resource.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
          ],
          "response": {
            "$ref": "Empty"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "ProcessOAuthCallback fulfills the last leg of the OAuth dance with a source provider. For GitHub this is as defined by https:\/\/developer.github.com\/apps\/building-oauth-apps\/authorizing-oauth-apps\/#2-users-are-redirected-back-to-your-site-by-github Users will not be able to call this in any meaningful way since they don't have access to the OAuth code used in the exchange. For now, this rpc only supports GitHubEnterprise, but will eventually replace GenerateGitHubAccessToken"
        }
      }
    }
  },
  "basePath": ""
}