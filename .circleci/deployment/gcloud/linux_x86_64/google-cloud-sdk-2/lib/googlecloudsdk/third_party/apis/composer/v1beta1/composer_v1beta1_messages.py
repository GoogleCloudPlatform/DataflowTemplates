"""Generated message classes for composer version v1beta1.

Manages Apache Airflow environments on Google Cloud Platform.
"""
# NOTE: This file is autogenerated and should not be edited by hand.

from __future__ import absolute_import

from apitools.base.protorpclite import messages as _messages
from apitools.base.py import encoding
from apitools.base.py import extra_types


package = 'composer'


class AllowedIpRange(_messages.Message):
  r"""Allowed IP range with user-provided description.

  Fields:
    description: Optional. User-provided description. It must contain at most
      300 characters.
    value: IP address or range, defined using CIDR notation, of requests that
      this rule applies to. Examples: `192.168.1.1` or `192.168.0.0/16` or
      `2001:db8::/32` or `2001:0db8:0000:0042:0000:8a2e:0370:7334`. IP range
      prefixes should be properly truncated. For example, `1.2.3.4/24` should
      be truncated to `1.2.3.0/24`. Similarly, for IPv6, `2001:db8::1/32`
      should be truncated to `2001:db8::/32`.
  """

  description = _messages.StringField(1)
  value = _messages.StringField(2)


class ComposerProjectsLocationsEnvironmentsCreateRequest(_messages.Message):
  r"""A ComposerProjectsLocationsEnvironmentsCreateRequest object.

  Fields:
    environment: A Environment resource to be passed as the request body.
    parent: The parent must be of the form
      "projects/{projectId}/locations/{locationId}".
  """

  environment = _messages.MessageField('Environment', 1)
  parent = _messages.StringField(2, required=True)


class ComposerProjectsLocationsEnvironmentsDeleteRequest(_messages.Message):
  r"""A ComposerProjectsLocationsEnvironmentsDeleteRequest object.

  Fields:
    name: The environment to delete, in the form:
      "projects/{projectId}/locations/{locationId}/environments/{environmentId
      }"
  """

  name = _messages.StringField(1, required=True)


class ComposerProjectsLocationsEnvironmentsGetRequest(_messages.Message):
  r"""A ComposerProjectsLocationsEnvironmentsGetRequest object.

  Fields:
    name: The resource name of the environment to get, in the form:
      "projects/{projectId}/locations/{locationId}/environments/{environmentId
      }"
  """

  name = _messages.StringField(1, required=True)


class ComposerProjectsLocationsEnvironmentsListRequest(_messages.Message):
  r"""A ComposerProjectsLocationsEnvironmentsListRequest object.

  Fields:
    pageSize: The maximum number of environments to return.
    pageToken: The next_page_token value returned from a previous List
      request, if any.
    parent: List environments in the given project and location, in the form:
      "projects/{projectId}/locations/{locationId}"
  """

  pageSize = _messages.IntegerField(1, variant=_messages.Variant.INT32)
  pageToken = _messages.StringField(2)
  parent = _messages.StringField(3, required=True)


class ComposerProjectsLocationsEnvironmentsPatchRequest(_messages.Message):
  r"""A ComposerProjectsLocationsEnvironmentsPatchRequest object.

  Fields:
    environment: A Environment resource to be passed as the request body.
    name: The relative resource name of the environment to update, in the
      form: "projects/{projectId}/locations/{locationId}/environments/{environ
      mentId}"
    updateMask: Required. A comma-separated list of paths, relative to
      `Environment`, of fields to update. For example, to set the version of
      scikit-learn to install in the environment to 0.19.0 and to remove an
      existing installation of argparse, the `updateMask` parameter would
      include the following two `paths` values:
      "config.softwareConfig.pypiPackages.scikit-learn" and
      "config.softwareConfig.pypiPackages.argparse". The included patch
      environment would specify the scikit-learn version as follows: {
      "config":{ "softwareConfig":{ "pypiPackages":{ "scikit-learn":"==0.19.0"
      } } } } Note that in the above example, any existing PyPI packages other
      than scikit-learn and argparse will be unaffected. Only one update type
      may be included in a single request's `updateMask`. For example, one
      cannot update both the PyPI packages and labels in the same request.
      However, it is possible to update multiple members of a map field
      simultaneously in the same request. For example, to set the labels
      "label1" and "label2" while clearing "label3" (assuming it already
      exists), one can provide the paths "labels.label1", "labels.label2", and
      "labels.label3" and populate the patch environment as follows: {
      "labels":{ "label1":"new-label1-value" "label2":"new-label2-value" } }
      Note that in the above example, any existing labels that are not
      included in the `updateMask` will be unaffected. It is also possible to
      replace an entire map field by providing the map field's path in the
      `updateMask`. The new value of the field will be that which is provided
      in the patch environment. For example, to delete all pre-existing user-
      specified PyPI packages and install botocore at version 1.7.14, the
      `updateMask` would contain the path
      "config.softwareConfig.pypiPackages", and the patch environment would be
      the following: { "config":{ "softwareConfig":{ "pypiPackages":{
      "botocore":"==1.7.14" } } } } *Note:* Only the following fields can be
      updated: * config.softwareConfig.pypiPackages * Replace all custom
      custom PyPI packages. If a replacement package map is not included in
      `environment`, all custom PyPI packages are cleared. It is an error to
      provide both this mask and a mask specifying an individual package. *
      config.softwareConfig.pypiPackages.packagename * Update the custom PyPI
      package packagename, preserving other packages. To delete the package,
      include it in `updateMask`, and omit the mapping for it in
      `environment.config.softwareConfig.pypiPackages`. It is an error to
      provide both a mask of this form and the
      "config.softwareConfig.pypiPackages" mask. * labels * Replace all
      environment labels. If a replacement labels map is not included in
      `environment`, all labels are cleared. It is an error to provide both
      this mask and a mask specifying one or more individual labels. *
      labels.labelName * Set the label named labelName, while preserving other
      labels. To delete the label, include it in `updateMask` and omit its
      mapping in `environment.labels`. It is an error to provide both a mask
      of this form and the "labels" mask. * config.nodeCount * Horizontally
      scale the number of nodes in the environment. An integer greater than or
      equal to 3 must be provided in the `config.nodeCount` field. *
      config.webServerNetworkAccessControl * Replace the environment's current
      WebServerNetworkAccessControl. *
      config.softwareConfig.airflowConfigOverrides * Replace all Apache
      Airflow config overrides. If a replacement config overrides map is not
      included in `environment`, all config overrides are cleared. It is an
      error to provide both this mask and a mask specifying one or more
      individual config overrides. *
      config.softwareConfig.airflowConfigOverrides.section- name * Override
      the Apache Airflow config property name in the section named section,
      preserving other properties. To delete the property override, include it
      in `updateMask` and omit its mapping in
      `environment.config.softwareConfig.airflowConfigOverrides`. It is an
      error to provide both a mask of this form and the
      "config.softwareConfig.airflowConfigOverrides" mask. *
      config.softwareConfig.envVariables * Replace all environment variables.
      If a replacement environment variable map is not included in
      `environment`, all custom environment variables are cleared. It is an
      error to provide both this mask and a mask specifying one or more
      individual environment variables. * config.softwareConfig.imageVersion *
      Upgrade the version of the environment in-place. Refer to
      `SoftwareConfig.image_version` for information on how to format the new
      image version. Additionally, the new image version cannot effect a
      version downgrade and must match the current image version's Composer
      major version and Airflow major and minor versions. Consult the Cloud
      Composer Version List for valid values. *
      config.databaseConfig.machineType * Cloud SQL machine type used by
      Airflow database. It has to be one of: db-n1-standard-2,
      db-n1-standard-4, db-n1-standard-8 or db-n1-standard-16. *
      config.webServerConfig.machineType * Machine type on which Airflow web
      server is running. It has to be one of: composer-n1-webserver-2,
      composer-n1-webserver-4 or composer-n1-webserver-8. *
      config.maintenanceWindow * Maintenance window during which Cloud
      Composer components may be under maintenance.
  """

  environment = _messages.MessageField('Environment', 1)
  name = _messages.StringField(2, required=True)
  updateMask = _messages.StringField(3)


class ComposerProjectsLocationsImageVersionsListRequest(_messages.Message):
  r"""A ComposerProjectsLocationsImageVersionsListRequest object.

  Fields:
    pageSize: The maximum number of image_versions to return.
    pageToken: The next_page_token value returned from a previous List
      request, if any.
    parent: List ImageVersions in the given project and location, in the form:
      "projects/{projectId}/locations/{locationId}"
  """

  pageSize = _messages.IntegerField(1, variant=_messages.Variant.INT32)
  pageToken = _messages.StringField(2)
  parent = _messages.StringField(3, required=True)


class ComposerProjectsLocationsOperationsDeleteRequest(_messages.Message):
  r"""A ComposerProjectsLocationsOperationsDeleteRequest object.

  Fields:
    name: The name of the operation resource to be deleted.
  """

  name = _messages.StringField(1, required=True)


class ComposerProjectsLocationsOperationsGetRequest(_messages.Message):
  r"""A ComposerProjectsLocationsOperationsGetRequest object.

  Fields:
    name: The name of the operation resource.
  """

  name = _messages.StringField(1, required=True)


class ComposerProjectsLocationsOperationsListRequest(_messages.Message):
  r"""A ComposerProjectsLocationsOperationsListRequest object.

  Fields:
    filter: The standard list filter.
    name: The name of the operation's parent resource.
    pageSize: The standard list page size.
    pageToken: The standard list page token.
  """

  filter = _messages.StringField(1)
  name = _messages.StringField(2, required=True)
  pageSize = _messages.IntegerField(3, variant=_messages.Variant.INT32)
  pageToken = _messages.StringField(4)


class DatabaseConfig(_messages.Message):
  r"""The configuration of Cloud SQL instance that is used by the Apache
  Airflow software.

  Fields:
    machineType: Optional. Cloud SQL machine type used by Airflow database. It
      has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8
      or db-n1-standard-16. If not specified, db-n1-standard-2 will be used.
  """

  machineType = _messages.StringField(1)


class Empty(_messages.Message):
  r"""A generic empty message that you can re-use to avoid defining duplicated
  empty messages in your APIs. A typical example is to use it as the request
  or the response type of an API method. For instance: service Foo { rpc
  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON
  representation for `Empty` is empty JSON object `{}`.
  """



class Environment(_messages.Message):
  r"""An environment for running orchestration tasks.

  Enums:
    StateValueValuesEnum: The current state of the environment.

  Messages:
    LabelsValue: Optional. User-defined labels for this environment. The
      labels map can contain no more than 64 entries. Entries of the labels
      map are UTF8 strings that comply with the following restrictions: * Keys
      must conform to regexp: \p{Ll}\p{Lo}{0,62} * Values must conform to
      regexp: [\p{Ll}\p{Lo}\p{N}_-]{0,63} * Both keys and values are
      additionally constrained to be <= 128 bytes in size.

  Fields:
    config: Configuration parameters for this environment.
    createTime: Output only. The time at which this environment was created.
    labels: Optional. User-defined labels for this environment. The labels map
      can contain no more than 64 entries. Entries of the labels map are UTF8
      strings that comply with the following restrictions: * Keys must conform
      to regexp: \p{Ll}\p{Lo}{0,62} * Values must conform to regexp:
      [\p{Ll}\p{Lo}\p{N}_-]{0,63} * Both keys and values are additionally
      constrained to be <= 128 bytes in size.
    name: The resource name of the environment, in the form:
      "projects/{projectId}/locations/{locationId}/environments/{environmentId
      }" EnvironmentId must start with a lowercase letter followed by up to 63
      lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
    state: The current state of the environment.
    updateTime: Output only. The time at which this environment was last
      modified.
    uuid: Output only. The UUID (Universally Unique IDentifier) associated
      with this environment. This value is generated when the environment is
      created.
  """

  class StateValueValuesEnum(_messages.Enum):
    r"""The current state of the environment.

    Values:
      STATE_UNSPECIFIED: The state of the environment is unknown.
      CREATING: The environment is in the process of being created.
      RUNNING: The environment is currently running and healthy. It is ready
        for use.
      UPDATING: The environment is being updated. It remains usable but cannot
        receive additional update requests or be deleted at this time.
      DELETING: The environment is undergoing deletion. It cannot be used.
      ERROR: The environment has encountered an error and cannot be used.
    """
    STATE_UNSPECIFIED = 0
    CREATING = 1
    RUNNING = 2
    UPDATING = 3
    DELETING = 4
    ERROR = 5

  @encoding.MapUnrecognizedFields('additionalProperties')
  class LabelsValue(_messages.Message):
    r"""Optional. User-defined labels for this environment. The labels map can
    contain no more than 64 entries. Entries of the labels map are UTF8
    strings that comply with the following restrictions: * Keys must conform
    to regexp: \p{Ll}\p{Lo}{0,62} * Values must conform to regexp:
    [\p{Ll}\p{Lo}\p{N}_-]{0,63} * Both keys and values are additionally
    constrained to be <= 128 bytes in size.

    Messages:
      AdditionalProperty: An additional property for a LabelsValue object.

    Fields:
      additionalProperties: Additional properties of type LabelsValue
    """

    class AdditionalProperty(_messages.Message):
      r"""An additional property for a LabelsValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  config = _messages.MessageField('EnvironmentConfig', 1)
  createTime = _messages.StringField(2)
  labels = _messages.MessageField('LabelsValue', 3)
  name = _messages.StringField(4)
  state = _messages.EnumField('StateValueValuesEnum', 5)
  updateTime = _messages.StringField(6)
  uuid = _messages.StringField(7)


class EnvironmentConfig(_messages.Message):
  r"""Configuration information for an environment.

  Fields:
    airflowUri: Output only. The URI of the Apache Airflow Web UI hosted
      within this environment (see [Airflow web interface](/composer/docs/how-
      to/accessing/airflow-web-interface)).
    dagGcsPrefix: Output only. The Cloud Storage prefix of the DAGs for this
      environment. Although Cloud Storage objects reside in a flat namespace,
      a hierarchical file tree can be simulated using "/"-delimited object
      name prefixes. DAG objects for this environment reside in a simulated
      directory with the given prefix.
    databaseConfig: Optional. The configuration settings for Cloud SQL
      instance used internally by Apache Airflow software.
    gkeCluster: Output only. The Kubernetes Engine cluster used to run this
      environment.
    nodeConfig: The configuration used for the Kubernetes Engine cluster.
    nodeCount: The number of nodes in the Kubernetes Engine cluster that will
      be used to run this environment.
    privateEnvironmentConfig: The configuration used for the Private IP Cloud
      Composer environment.
    softwareConfig: The configuration settings for software inside the
      environment.
    webServerConfig: Optional. The configuration settings for the Airflow web
      server App Engine instance.
    webServerNetworkAccessControl: Optional. The network-level access control
      policy for the Airflow web server. If unspecified, no network-level
      access restrictions will be applied.
  """

  airflowUri = _messages.StringField(1)
  dagGcsPrefix = _messages.StringField(2)
  databaseConfig = _messages.MessageField('DatabaseConfig', 3)
  gkeCluster = _messages.StringField(4)
  nodeConfig = _messages.MessageField('NodeConfig', 5)
  nodeCount = _messages.IntegerField(6, variant=_messages.Variant.INT32)
  privateEnvironmentConfig = _messages.MessageField('PrivateEnvironmentConfig', 7)
  softwareConfig = _messages.MessageField('SoftwareConfig', 8)
  webServerConfig = _messages.MessageField('WebServerConfig', 9)
  webServerNetworkAccessControl = _messages.MessageField('WebServerNetworkAccessControl', 10)


class IPAllocationPolicy(_messages.Message):
  r"""Configuration for controlling how IPs are allocated in the GKE cluster.

  Fields:
    clusterIpv4CidrBlock: Optional. The IP address range used to allocate IP
      addresses to pods in the cluster. This field is applicable only when
      `use_ip_aliases` is true. Set to blank to have GKE choose a range with
      the default size. Set to /netmask (e.g. `/14`) to have GKE choose a
      range with a specific netmask. Set to a
      [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
      notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g.
      `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific
      range to use. Specify `cluster_secondary_range_name` or
      `cluster_ipv4_cidr_block` but not both.
    clusterSecondaryRangeName: Optional. The name of the cluster's secondary
      range used to allocate IP addresses to pods. Specify either
      `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not
      both. This field is applicable only when `use_ip_aliases` is true.
    servicesIpv4CidrBlock: Optional. The IP address range of the services IP
      addresses in this cluster. This field is applicable only when
      `use_ip_aliases` is true. Set to blank to have GKE choose a range with
      the default size. Set to /netmask (e.g. `/14`) to have GKE choose a
      range with a specific netmask. Set to a
      [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
      notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g.
      `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific
      range to use. Specify `services_secondary_range_name` or
      `services_ipv4_cidr_block` but not both.
    servicesSecondaryRangeName: Optional. The name of the services' secondary
      range used to allocate IP addresses to the cluster. Specify either
      `services_secondary_range_name` or `services_ipv4_cidr_block` but not
      both. This field is applicable only when `use_ip_aliases` is true.
    useIpAliases: Optional. Whether or not to enable Alias IPs in the GKE
      cluster. If `true`, a VPC-native cluster is created.
  """

  clusterIpv4CidrBlock = _messages.StringField(1)
  clusterSecondaryRangeName = _messages.StringField(2)
  servicesIpv4CidrBlock = _messages.StringField(3)
  servicesSecondaryRangeName = _messages.StringField(4)
  useIpAliases = _messages.BooleanField(5)


class ImageVersion(_messages.Message):
  r"""Image Version information

  Fields:
    imageVersionId: The string identifier of the ImageVersion, in the form:
      "composer-x.y.z-airflow-a.b(.c)"
    isDefault: Whether this is the default ImageVersion used by Composer
      during environment creation if no input ImageVersion is specified.
    supportedPythonVersions: supported python versions
  """

  imageVersionId = _messages.StringField(1)
  isDefault = _messages.BooleanField(2)
  supportedPythonVersions = _messages.StringField(3, repeated=True)


class ListEnvironmentsResponse(_messages.Message):
  r"""The environments in a project and location.

  Fields:
    environments: The list of environments returned by a
      ListEnvironmentsRequest.
    nextPageToken: The page token used to query for the next page if one
      exists.
  """

  environments = _messages.MessageField('Environment', 1, repeated=True)
  nextPageToken = _messages.StringField(2)


class ListImageVersionsResponse(_messages.Message):
  r"""The ImageVersions in a project and location.

  Fields:
    imageVersions: The list of supported ImageVersions in a location.
    nextPageToken: The page token used to query for the next page if one
      exists.
  """

  imageVersions = _messages.MessageField('ImageVersion', 1, repeated=True)
  nextPageToken = _messages.StringField(2)


class ListOperationsResponse(_messages.Message):
  r"""The response message for Operations.ListOperations.

  Fields:
    nextPageToken: The standard List next-page token.
    operations: A list of operations that matches the specified filter in the
      request.
  """

  nextPageToken = _messages.StringField(1)
  operations = _messages.MessageField('Operation', 2, repeated=True)


class NodeConfig(_messages.Message):
  r"""The configuration information for the Kubernetes Engine nodes running
  the Apache Airflow software.

  Fields:
    diskSizeGb: Optional. The disk size in GB used for node VMs. Minimum size
      is 20GB. If unspecified, defaults to 100GB. Cannot be updated.
    ipAllocationPolicy: Optional. The IPAllocationPolicy fields for the GKE
      cluster.
    location: Optional. The Compute Engine [zone](/compute/docs/regions-zones)
      in which to deploy the VMs used to run the Apache Airflow software,
      specified as a [relative resource
      name](/apis/design/resource_names#relative_resource_name). For example:
      "projects/{projectId}/zones/{zoneId}". This `location` must belong to
      the enclosing environment's project and location. If both this field and
      `nodeConfig.machineType` are specified, `nodeConfig.machineType` must
      belong to this `location`; if both are unspecified, the service will
      pick a zone in the Compute Engine region corresponding to the Cloud
      Composer location, and propagate that choice to both fields. If only one
      field (`location` or `nodeConfig.machineType`) is specified, the
      location information from the specified field will be propagated to the
      unspecified field.
    machineType: Optional. The Compute Engine [machine
      type](/compute/docs/machine-types) used for cluster instances, specified
      as a [relative resource
      name](/apis/design/resource_names#relative_resource_name). For example:
      "projects/{projectId}/zones/{zoneId}/machineTypes/{machineTypeId}". The
      `machineType` must belong to the enclosing environment's project and
      location. If both this field and `nodeConfig.location` are specified,
      this `machineType` must belong to the `nodeConfig.location`; if both are
      unspecified, the service will pick a zone in the Compute Engine region
      corresponding to the Cloud Composer location, and propagate that choice
      to both fields. If exactly one of this field and `nodeConfig.location`
      is specified, the location information from the specified field will be
      propagated to the unspecified field. The `machineTypeId` must not be a
      [shared-core machine type](/compute/docs/machine-types#sharedcore). If
      this field is unspecified, the `machineTypeId` defaults to
      "n1-standard-1".
    network: Optional. The Compute Engine network to be used for machine
      communications, specified as a [relative resource
      name](/apis/design/resource_names#relative_resource_name). For example:
      "projects/{projectId}/global/networks/{networkId}". If unspecified, the
      default network in the environment's project is used. If a [Custom
      Subnet Network](/vpc/docs/vpc#vpc_networks_and_subnets) is provided,
      `nodeConfig.subnetwork` must also be provided. For [Shared
      VPC](/vpc/docs/shared-vpc) subnetwork requirements, see
      `nodeConfig.subnetwork`.
    oauthScopes: Optional. The set of Google API scopes to be made available
      on all node VMs. If `oauth_scopes` is empty, defaults to
      ["https://www.googleapis.com/auth/cloud-platform"]. Cannot be updated.
    serviceAccount: Optional. The Google Cloud Platform Service Account to be
      used by the node VMs. If a service account is not specified, the
      "default" Compute Engine service account is used. Cannot be updated.
    subnetwork: Optional. The Compute Engine subnetwork to be used for machine
      communications, specified as a [relative resource
      name](/apis/design/resource_names#relative_resource_name). For example:
      "projects/{projectId}/regions/{regionId}/subnetworks/{subnetworkId}" If
      a subnetwork is provided, `nodeConfig.network` must also be provided,
      and the subnetwork must belong to the enclosing environment's project
      and location.
    tags: Optional. The list of instance tags applied to all node VMs. Tags
      are used to identify valid sources or targets for network firewalls.
      Each tag within the list must comply with
      [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Cannot be updated.
  """

  diskSizeGb = _messages.IntegerField(1, variant=_messages.Variant.INT32)
  ipAllocationPolicy = _messages.MessageField('IPAllocationPolicy', 2)
  location = _messages.StringField(3)
  machineType = _messages.StringField(4)
  network = _messages.StringField(5)
  oauthScopes = _messages.StringField(6, repeated=True)
  serviceAccount = _messages.StringField(7)
  subnetwork = _messages.StringField(8)
  tags = _messages.StringField(9, repeated=True)


class Operation(_messages.Message):
  r"""This resource represents a long-running operation that is the result of
  a network API call.

  Messages:
    MetadataValue: Service-specific metadata associated with the operation. It
      typically contains progress information and common metadata such as
      create time. Some services might not provide such metadata. Any method
      that returns a long-running operation should document the metadata type,
      if any.
    ResponseValue: The normal response of the operation in case of success. If
      the original method returns no data on success, such as `Delete`, the
      response is `google.protobuf.Empty`. If the original method is standard
      `Get`/`Create`/`Update`, the response should be the resource. For other
      methods, the response should have the type `XxxResponse`, where `Xxx` is
      the original method name. For example, if the original method name is
      `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.

  Fields:
    done: If the value is `false`, it means the operation is still in
      progress. If `true`, the operation is completed, and either `error` or
      `response` is available.
    error: The error result of the operation in case of failure or
      cancellation.
    metadata: Service-specific metadata associated with the operation. It
      typically contains progress information and common metadata such as
      create time. Some services might not provide such metadata. Any method
      that returns a long-running operation should document the metadata type,
      if any.
    name: The server-assigned name, which is only unique within the same
      service that originally returns it. If you use the default HTTP mapping,
      the `name` should be a resource name ending with
      `operations/{unique_id}`.
    response: The normal response of the operation in case of success. If the
      original method returns no data on success, such as `Delete`, the
      response is `google.protobuf.Empty`. If the original method is standard
      `Get`/`Create`/`Update`, the response should be the resource. For other
      methods, the response should have the type `XxxResponse`, where `Xxx` is
      the original method name. For example, if the original method name is
      `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class MetadataValue(_messages.Message):
    r"""Service-specific metadata associated with the operation. It typically
    contains progress information and common metadata such as create time.
    Some services might not provide such metadata. Any method that returns a
    long-running operation should document the metadata type, if any.

    Messages:
      AdditionalProperty: An additional property for a MetadataValue object.

    Fields:
      additionalProperties: Properties of the object. Contains field @type
        with type URL.
    """

    class AdditionalProperty(_messages.Message):
      r"""An additional property for a MetadataValue object.

      Fields:
        key: Name of the additional property.
        value: A extra_types.JsonValue attribute.
      """

      key = _messages.StringField(1)
      value = _messages.MessageField('extra_types.JsonValue', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  @encoding.MapUnrecognizedFields('additionalProperties')
  class ResponseValue(_messages.Message):
    r"""The normal response of the operation in case of success. If the
    original method returns no data on success, such as `Delete`, the response
    is `google.protobuf.Empty`. If the original method is standard
    `Get`/`Create`/`Update`, the response should be the resource. For other
    methods, the response should have the type `XxxResponse`, where `Xxx` is
    the original method name. For example, if the original method name is
    `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.

    Messages:
      AdditionalProperty: An additional property for a ResponseValue object.

    Fields:
      additionalProperties: Properties of the object. Contains field @type
        with type URL.
    """

    class AdditionalProperty(_messages.Message):
      r"""An additional property for a ResponseValue object.

      Fields:
        key: Name of the additional property.
        value: A extra_types.JsonValue attribute.
      """

      key = _messages.StringField(1)
      value = _messages.MessageField('extra_types.JsonValue', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  done = _messages.BooleanField(1)
  error = _messages.MessageField('Status', 2)
  metadata = _messages.MessageField('MetadataValue', 3)
  name = _messages.StringField(4)
  response = _messages.MessageField('ResponseValue', 5)


class OperationMetadata(_messages.Message):
  r"""Metadata describing an operation.

  Enums:
    OperationTypeValueValuesEnum: Output only. The type of operation being
      performed.
    StateValueValuesEnum: Output only. The current operation state.

  Fields:
    createTime: Output only. The time the operation was submitted to the
      server.
    endTime: Output only. The time when the operation terminated, regardless
      of its success. This field is unset if the operation is still ongoing.
    operationType: Output only. The type of operation being performed.
    resource: Output only. The resource being operated on, as a [relative
      resource name]( /apis/design/resource_names#relative_resource_name).
    resourceUuid: Output only. The UUID of the resource being operated on.
    state: Output only. The current operation state.
  """

  class OperationTypeValueValuesEnum(_messages.Enum):
    r"""Output only. The type of operation being performed.

    Values:
      TYPE_UNSPECIFIED: Unused.
      CREATE: A resource creation operation.
      DELETE: A resource deletion operation.
      UPDATE: A resource update operation.
    """
    TYPE_UNSPECIFIED = 0
    CREATE = 1
    DELETE = 2
    UPDATE = 3

  class StateValueValuesEnum(_messages.Enum):
    r"""Output only. The current operation state.

    Values:
      STATE_UNSPECIFIED: Unused.
      PENDING: The operation has been created but is not yet started.
      RUNNING: The operation is underway.
      SUCCESSFUL: The operation completed successfully.
      FAILED: The operation is no longer running but did not succeed.
    """
    STATE_UNSPECIFIED = 0
    PENDING = 1
    RUNNING = 2
    SUCCESSFUL = 3
    FAILED = 4

  createTime = _messages.StringField(1)
  endTime = _messages.StringField(2)
  operationType = _messages.EnumField('OperationTypeValueValuesEnum', 3)
  resource = _messages.StringField(4)
  resourceUuid = _messages.StringField(5)
  state = _messages.EnumField('StateValueValuesEnum', 6)


class PrivateClusterConfig(_messages.Message):
  r"""Configuration options for the private GKE cluster in a Cloud Composer
  environment.

  Fields:
    enablePrivateEndpoint: Optional. If `true`, access to the public endpoint
      of the GKE cluster is denied.
    masterIpv4CidrBlock: Optional. The CIDR block from which IPv4 range for
      GKE master will be reserved. If left blank, the default value of
      '172.16.0.0/23' is used.
    masterIpv4ReservedRange: Output only. The IP range in CIDR notation to use
      for the hosted master network. This range is used for assigning internal
      IP addresses to the cluster master or set of masters and to the internal
      load balancer virtual IP. This range must not overlap with any other
      ranges in use within the cluster's network.
  """

  enablePrivateEndpoint = _messages.BooleanField(1)
  masterIpv4CidrBlock = _messages.StringField(2)
  masterIpv4ReservedRange = _messages.StringField(3)


class PrivateEnvironmentConfig(_messages.Message):
  r"""The configuration information for configuring a Private IP Cloud
  Composer environment.

  Fields:
    cloudSqlIpv4CidrBlock: Optional. The CIDR block from which IP range in
      tenant project will be reserved for Cloud SQL. Needs to be disjoint from
      web_server_ipv4_cidr_block
    enablePrivateEnvironment: Optional. If `true`, a Private IP Cloud Composer
      environment is created. If this field is set to true,
      `IPAllocationPolicy.use_ip_aliases` must be set to true.
    privateClusterConfig: Optional. Configuration for the private GKE cluster
      for a Private IP Cloud Composer environment.
    webServerIpv4CidrBlock: Optional. The CIDR block from which IP range for
      web server will be reserved. Needs to be disjoint from
      private_cluster_config.master_ipv4_cidr_block and
      cloud_sql_ipv4_cidr_block.
    webServerIpv4ReservedRange: Output only. The IP range reserved for the
      tenant project's App Engine VMs.
  """

  cloudSqlIpv4CidrBlock = _messages.StringField(1)
  enablePrivateEnvironment = _messages.BooleanField(2)
  privateClusterConfig = _messages.MessageField('PrivateClusterConfig', 3)
  webServerIpv4CidrBlock = _messages.StringField(4)
  webServerIpv4ReservedRange = _messages.StringField(5)


class SoftwareConfig(_messages.Message):
  r"""Specifies the selection and configuration of software inside the
  environment.

  Messages:
    AirflowConfigOverridesValue: Optional. Apache Airflow configuration
      properties to override. Property keys contain the section and property
      names, separated by a hyphen, for example "core-
      dags_are_paused_at_creation". Section names must not contain hyphens
      ("-"), opening square brackets ("["), or closing square brackets ("]").
      The property name must not be empty and must not contain an equals sign
      ("=") or semicolon (";"). Section and property names must not contain a
      period ("."). Apache Airflow configuration property names must be
      written in [snake_case](https://en.wikipedia.org/wiki/Snake_case).
      Property values can contain any character, and can be written in any
      lower/upper case format. Certain Apache Airflow configuration property
      values are [blocked](/composer/docs/concepts/airflow-configurations),
      and cannot be overridden.
    EnvVariablesValue: Optional. Additional environment variables to provide
      to the Apache Airflow scheduler, worker, and webserver processes.
      Environment variable names must match the regular expression `a-zA-Z_*`.
      They cannot specify Apache Airflow software configuration overrides
      (they cannot match the regular expression
      `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the
      following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` *
      `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` *
      `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` *
      `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`
    PypiPackagesValue: Optional. Custom Python Package Index (PyPI) packages
      to be installed in the environment. Keys refer to the lowercase package
      name such as "numpy" and values are the lowercase extras and version
      specifier such as "==1.12.0", "[devel,gcp_api]", or "[devel]>=1.8.2,
      <1.9.2". To specify a package without pinning it to a version specifier,
      use the empty string as the value.

  Fields:
    airflowConfigOverrides: Optional. Apache Airflow configuration properties
      to override. Property keys contain the section and property names,
      separated by a hyphen, for example "core-dags_are_paused_at_creation".
      Section names must not contain hyphens ("-"), opening square brackets
      ("["), or closing square brackets ("]"). The property name must not be
      empty and must not contain an equals sign ("=") or semicolon (";").
      Section and property names must not contain a period ("."). Apache
      Airflow configuration property names must be written in
      [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values
      can contain any character, and can be written in any lower/upper case
      format. Certain Apache Airflow configuration property values are
      [blocked](/composer/docs/concepts/airflow-configurations), and cannot be
      overridden.
    envVariables: Optional. Additional environment variables to provide to the
      Apache Airflow scheduler, worker, and webserver processes. Environment
      variable names must match the regular expression `a-zA-Z_*`. They cannot
      specify Apache Airflow software configuration overrides (they cannot
      match the regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and
      they cannot match any of the following reserved names: * `AIRFLOW_HOME`
      * `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` *
      `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` *
      `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`
    imageVersion: The version of the software running in the environment. This
      encapsulates both the version of Cloud Composer functionality and the
      version of Apache Airflow. It must match the regular expression `compose
      r-([0-9]+\.[0-9]+\.[0-9]+|latest)-airflow-[0-9]+\.[0-9]+(\.[0-9]+.*)?`.
      When used as input, the server also checks if the provided version is
      supported and denies the request for an unsupported version. The Cloud
      Composer portion of the version is a [semantic
      version](https://semver.org) or `latest`. When the patch version is
      omitted, the current Cloud Composer patch version is selected. When
      `latest` is provided instead of an explicit version number, the server
      replaces `latest` with the current Cloud Composer version and stores
      that version number in the same field. The portion of the image version
      that follows *airflow-* is an official Apache Airflow repository
      [release name](https://github.com/apache/incubator-airflow/releases).
      See also [Version List](/composer/docs/concepts/versioning/composer-
      versions).
    pypiPackages: Optional. Custom Python Package Index (PyPI) packages to be
      installed in the environment. Keys refer to the lowercase package name
      such as "numpy" and values are the lowercase extras and version
      specifier such as "==1.12.0", "[devel,gcp_api]", or "[devel]>=1.8.2,
      <1.9.2". To specify a package without pinning it to a version specifier,
      use the empty string as the value.
    pythonVersion: Optional. The major version of Python used to run the
      Apache Airflow scheduler, worker, and webserver processes. Can be set to
      '2' or '3'. If not specified, the default is '2'. Cannot be updated.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class AirflowConfigOverridesValue(_messages.Message):
    r"""Optional. Apache Airflow configuration properties to override.
    Property keys contain the section and property names, separated by a
    hyphen, for example "core-dags_are_paused_at_creation". Section names must
    not contain hyphens ("-"), opening square brackets ("["), or closing
    square brackets ("]"). The property name must not be empty and must not
    contain an equals sign ("=") or semicolon (";"). Section and property
    names must not contain a period ("."). Apache Airflow configuration
    property names must be written in
    [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values
    can contain any character, and can be written in any lower/upper case
    format. Certain Apache Airflow configuration property values are
    [blocked](/composer/docs/concepts/airflow-configurations), and cannot be
    overridden.

    Messages:
      AdditionalProperty: An additional property for a
        AirflowConfigOverridesValue object.

    Fields:
      additionalProperties: Additional properties of type
        AirflowConfigOverridesValue
    """

    class AdditionalProperty(_messages.Message):
      r"""An additional property for a AirflowConfigOverridesValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  @encoding.MapUnrecognizedFields('additionalProperties')
  class EnvVariablesValue(_messages.Message):
    r"""Optional. Additional environment variables to provide to the Apache
    Airflow scheduler, worker, and webserver processes. Environment variable
    names must match the regular expression `a-zA-Z_*`. They cannot specify
    Apache Airflow software configuration overrides (they cannot match the
    regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot
    match any of the following reserved names: * `AIRFLOW_HOME` *
    `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` *
    `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` *
    `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`

    Messages:
      AdditionalProperty: An additional property for a EnvVariablesValue
        object.

    Fields:
      additionalProperties: Additional properties of type EnvVariablesValue
    """

    class AdditionalProperty(_messages.Message):
      r"""An additional property for a EnvVariablesValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  @encoding.MapUnrecognizedFields('additionalProperties')
  class PypiPackagesValue(_messages.Message):
    r"""Optional. Custom Python Package Index (PyPI) packages to be installed
    in the environment. Keys refer to the lowercase package name such as
    "numpy" and values are the lowercase extras and version specifier such as
    "==1.12.0", "[devel,gcp_api]", or "[devel]>=1.8.2, <1.9.2". To specify a
    package without pinning it to a version specifier, use the empty string as
    the value.

    Messages:
      AdditionalProperty: An additional property for a PypiPackagesValue
        object.

    Fields:
      additionalProperties: Additional properties of type PypiPackagesValue
    """

    class AdditionalProperty(_messages.Message):
      r"""An additional property for a PypiPackagesValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  airflowConfigOverrides = _messages.MessageField('AirflowConfigOverridesValue', 1)
  envVariables = _messages.MessageField('EnvVariablesValue', 2)
  imageVersion = _messages.StringField(3)
  pypiPackages = _messages.MessageField('PypiPackagesValue', 4)
  pythonVersion = _messages.StringField(5)


class StandardQueryParameters(_messages.Message):
  r"""Query parameters accepted by all methods.

  Enums:
    FXgafvValueValuesEnum: V1 error format.
    AltValueValuesEnum: Data format for response.

  Fields:
    f__xgafv: V1 error format.
    access_token: OAuth access token.
    alt: Data format for response.
    callback: JSONP
    fields: Selector specifying which fields to include in a partial response.
    key: API key. Your API key identifies your project and provides you with
      API access, quota, and reports. Required unless you provide an OAuth 2.0
      token.
    oauth_token: OAuth 2.0 token for the current user.
    prettyPrint: Returns response with indentations and line breaks.
    quotaUser: Available to use for quota purposes for server-side
      applications. Can be any arbitrary string assigned to a user, but should
      not exceed 40 characters.
    trace: A tracing token of the form "token:<tokenid>" to include in api
      requests.
    uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
    upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
  """

  class AltValueValuesEnum(_messages.Enum):
    r"""Data format for response.

    Values:
      json: Responses with Content-Type of application/json
      media: Media download with context-dependent Content-Type
      proto: Responses with Content-Type of application/x-protobuf
    """
    json = 0
    media = 1
    proto = 2

  class FXgafvValueValuesEnum(_messages.Enum):
    r"""V1 error format.

    Values:
      _1: v1 error format
      _2: v2 error format
    """
    _1 = 0
    _2 = 1

  f__xgafv = _messages.EnumField('FXgafvValueValuesEnum', 1)
  access_token = _messages.StringField(2)
  alt = _messages.EnumField('AltValueValuesEnum', 3, default='json')
  callback = _messages.StringField(4)
  fields = _messages.StringField(5)
  key = _messages.StringField(6)
  oauth_token = _messages.StringField(7)
  prettyPrint = _messages.BooleanField(8, default=True)
  quotaUser = _messages.StringField(9)
  trace = _messages.StringField(10)
  uploadType = _messages.StringField(11)
  upload_protocol = _messages.StringField(12)


class Status(_messages.Message):
  r"""The `Status` type defines a logical error model that is suitable for
  different programming environments, including REST APIs and RPC APIs. It is
  used by [gRPC](https://github.com/grpc). Each `Status` message contains
  three pieces of data: error code, error message, and error details. You can
  find out more about this error model and how to work with it in the [API
  Design Guide](https://cloud.google.com/apis/design/errors).

  Messages:
    DetailsValueListEntry: A DetailsValueListEntry object.

  Fields:
    code: The status code, which should be an enum value of google.rpc.Code.
    details: A list of messages that carry the error details. There is a
      common set of message types for APIs to use.
    message: A developer-facing error message, which should be in English. Any
      user-facing error message should be localized and sent in the
      google.rpc.Status.details field, or localized by the client.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class DetailsValueListEntry(_messages.Message):
    r"""A DetailsValueListEntry object.

    Messages:
      AdditionalProperty: An additional property for a DetailsValueListEntry
        object.

    Fields:
      additionalProperties: Properties of the object. Contains field @type
        with type URL.
    """

    class AdditionalProperty(_messages.Message):
      r"""An additional property for a DetailsValueListEntry object.

      Fields:
        key: Name of the additional property.
        value: A extra_types.JsonValue attribute.
      """

      key = _messages.StringField(1)
      value = _messages.MessageField('extra_types.JsonValue', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  code = _messages.IntegerField(1, variant=_messages.Variant.INT32)
  details = _messages.MessageField('DetailsValueListEntry', 2, repeated=True)
  message = _messages.StringField(3)


class WebServerConfig(_messages.Message):
  r"""The configuration settings for the Airflow web server App Engine
  instance.

  Fields:
    machineType: Optional. Machine type on which Airflow web server is
      running. It has to be one of: composer-n1-webserver-2,
      composer-n1-webserver-4 or composer-n1-webserver-8. If not specified,
      composer-n1-webserver-2 will be used. Value custom is returned only in
      response, if Airflow web server parameters were manually changed to a
      non-standard values.
  """

  machineType = _messages.StringField(1)


class WebServerNetworkAccessControl(_messages.Message):
  r"""Network-level access control policy for the Airflow web server.

  Fields:
    allowedIpRanges: A collection of allowed IP ranges with descriptions.
  """

  allowedIpRanges = _messages.MessageField('AllowedIpRange', 1, repeated=True)


encoding.AddCustomJsonFieldMapping(
    StandardQueryParameters, 'f__xgafv', '$.xgafv')
encoding.AddCustomJsonEnumMapping(
    StandardQueryParameters.FXgafvValueValuesEnum, '_1', '1')
encoding.AddCustomJsonEnumMapping(
    StandardQueryParameters.FXgafvValueValuesEnum, '_2', '2')
