{
  "kind": "discovery#restDescription",
  "discoveryVersion": "v1",
  "id": "datacatalog:v1alpha3",
  "name": "datacatalog",
  "canonicalName": "Data Catalog",
  "version": "v1alpha3",
  "revision": "0",
  "title": "Google Cloud Data Catalog API",
  "description": "A fully managed and highly scalable data discovery and metadata management service. ",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
   },
  "documentationLink": "https://cloud.google.com/data-catalog/docs/",
  "protocol": "rest",
  "rootUrl": "https://datacatalog.googleapis.com/",
  "mtlsRootUrl": "https://datacatalog.mtls.googleapis.com/",
  "servicePath": "",
  "baseUrl": "https://datacatalog.googleapis.com/",
  "batchPath": "batch",
  "version_module": true,
  "fullyEncodeReservedExpansion": true,
  "parameters": {
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "schemas": {
    "GoogleCloudDatacatalogV1alpha3Taxonomy": {
      "id": "GoogleCloudDatacatalogV1alpha3Taxonomy",
      "description": "A taxonomy is a collection of categories of business significance, typically associated with the substance of the category (e.g. credit card, SSN), or how it is used (e.g. account name, user ID).",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. Resource name of the taxonomy, whose format is: \"projects\/project_number\/taxonomies\/{id}\".",
          "type": "string"
        },
        "displayName": {
          "description": "Required. Human readable name of this taxonomy. Max 200 bytes when encoded in UTF-8.",
          "type": "string"
        },
        "description": {
          "description": "Description of the taxonomy. The length of the description is limited to 2000 bytes when encoded in UTF-8.",
          "type": "string"
        }
      }
    },
    "Empty": {
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object",
      "properties": {
      }
    },
    "GoogleCloudDatacatalogV1alpha3ListTaxonomiesResponse": {
      "id": "GoogleCloudDatacatalogV1alpha3ListTaxonomiesResponse",
      "description": "Response message for \"CategoryManager.ListTaxonomies\".",
      "type": "object",
      "properties": {
        "taxonomies": {
          "description": "Taxonomies that the project contains.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1alpha3Taxonomy"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        }
      }
    },
    "GoogleCloudDatacatalogV1alpha3Category": {
      "id": "GoogleCloudDatacatalogV1alpha3Category",
      "description": "Denotes one category in a taxonomy (e.g. ssn). Categories can be defined in a hierarchy. For example, consider the following hierachy: Geolocation | ------------------------------------ | | | LatLong City ZipCode Category \"Geolocation\" contains three child categories: \"LatLong\", \"City\", and \"ZipCode\".",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. Resource name of the category, whose format is: \"projects\/project_number\/taxonomies\/{taxonomy_id}\/categories\/{id}\".",
          "type": "string"
        },
        "displayName": {
          "description": "Required. Human readable name of this category. Max 200 bytes when encoded in UTF-8.",
          "type": "string"
        },
        "description": {
          "description": "Description of the category. The length of the description is limited to 2000 bytes when encoded in UTF-8.",
          "type": "string"
        },
        "parentCategoryId": {
          "description": "Id of the parent category to this category (e.g. for category \"LatLong\" in the example above, this field contains the id of category \"Geolocation\"). If empty, it means this category is a top level category (e.g. this field is empty for category \"Geolocation\" in the example above).",
          "type": "string"
        },
        "childCategoryIds": {
          "description": "Output only. Ids of child categories of this category.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GoogleCloudDatacatalogV1alpha3ListCategoriesResponse": {
      "id": "GoogleCloudDatacatalogV1alpha3ListCategoriesResponse",
      "description": "Response message for \"CategoryManager.ListCategories\".",
      "type": "object",
      "properties": {
        "categories": {
          "description": "Categories that are in this taxonomy.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1alpha3Category"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        }
      }
    },
    "GetIamPolicyRequest": {
      "id": "GetIamPolicyRequest",
      "description": "Request message for `GetIamPolicy` method.",
      "type": "object",
      "properties": {
        "options": {
          "description": "OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`.",
          "$ref": "GetPolicyOptions"
        }
      }
    },
    "GetPolicyOptions": {
      "id": "GetPolicyOptions",
      "description": "Encapsulates settings provided to GetIamPolicy.",
      "type": "object",
      "properties": {
        "requestedPolicyVersion": {
          "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies).",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Policy": {
      "id": "Policy",
      "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles\/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles\/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles\/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles\/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/docs\/).",
      "type": "object",
      "properties": {
        "version": {
          "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies).",
          "type": "integer",
          "format": "int32"
        },
        "bindings": {
          "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.",
          "type": "array",
          "items": {
            "$ref": "Binding"
          }
        },
        "etag": {
          "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "Binding": {
      "id": "Binding",
      "description": "Associates `members` with a `role`.",
      "type": "object",
      "properties": {
        "role": {
          "description": "Role that is assigned to `members`. For example, `roles\/viewer`, `roles\/editor`, or `roles\/owner`.",
          "type": "string"
        },
        "members": {
          "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. ",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "condition": {
          "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies).",
          "$ref": "Expr"
        },
        "bindingId": {
          "type": "string"
        }
      }
    },
    "Expr": {
      "id": "Expr",
      "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https:\/\/github.com\/google\/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() < 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
      "type": "object",
      "properties": {
        "expression": {
          "description": "Textual representation of an expression in Common Expression Language syntax.",
          "type": "string"
        },
        "title": {
          "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.",
          "type": "string"
        },
        "description": {
          "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.",
          "type": "string"
        },
        "location": {
          "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.",
          "type": "string"
        }
      }
    },
    "SetIamPolicyRequest": {
      "id": "SetIamPolicyRequest",
      "description": "Request message for `SetIamPolicy` method.",
      "type": "object",
      "properties": {
        "policy": {
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.",
          "$ref": "Policy"
        }
      }
    },
    "TestIamPermissionsRequest": {
      "id": "TestIamPermissionsRequest",
      "description": "Request message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as '*' or 'storage.*') are not allowed. For more information see [IAM Overview](https:\/\/cloud.google.com\/iam\/docs\/overview#permissions).",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TestIamPermissionsResponse": {
      "id": "TestIamPermissionsResponse",
      "description": "Response message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GoogleCloudDatacatalogV1alpha3ImportTaxonomiesRequest": {
      "id": "GoogleCloudDatacatalogV1alpha3ImportTaxonomiesRequest",
      "description": "Request message for \"CategoryManagerSerialization.ImportTaxonomies\".",
      "type": "object",
      "properties": {
        "taxonomies": {
          "description": "Required. Taxonomies to be imported in a tree structure.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1alpha3SerializedTaxonomy"
          }
        }
      }
    },
    "GoogleCloudDatacatalogV1alpha3SerializedTaxonomy": {
      "id": "GoogleCloudDatacatalogV1alpha3SerializedTaxonomy",
      "description": "Message capturing a taxonomy and its category hierachy as a nested proto. Used for taxonomy import\/export and mutation.",
      "type": "object",
      "properties": {
        "displayName": {
          "description": "Required. Display name of the taxonomy. Max 200 bytes when encoded in UTF-8.",
          "type": "string"
        },
        "description": {
          "description": "Description of the taxonomy. The length of the description is limited to 2000 bytes when encoded in UTF-8.",
          "type": "string"
        },
        "categories": {
          "description": "Top level categories associated with the taxonomy if any.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1alpha3SerializedCategory"
          }
        }
      }
    },
    "GoogleCloudDatacatalogV1alpha3SerializedCategory": {
      "id": "GoogleCloudDatacatalogV1alpha3SerializedCategory",
      "description": "Message representing one category when exported as a nested proto.",
      "type": "object",
      "properties": {
        "displayName": {
          "description": "Required. Display name of the category. Max 200 bytes when encoded in UTF-8.",
          "type": "string"
        },
        "description": {
          "description": "Description of the category. The length of the description is limited to 2000 bytes when encoded in UTF-8.",
          "type": "string"
        },
        "childCategories": {
          "description": "Children of the category if any.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1alpha3SerializedCategory"
          }
        }
      }
    },
    "GoogleCloudDatacatalogV1alpha3ImportTaxonomiesResponse": {
      "id": "GoogleCloudDatacatalogV1alpha3ImportTaxonomiesResponse",
      "description": "Response message for \"CategoryManagerSerialization.ImportTaxonomies\".",
      "type": "object",
      "properties": {
        "taxonomies": {
          "description": "Required. Taxonomies that were imported.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1alpha3Taxonomy"
          }
        }
      }
    },
    "GoogleCloudDatacatalogV1alpha3ExportTaxonomiesResponse": {
      "id": "GoogleCloudDatacatalogV1alpha3ExportTaxonomiesResponse",
      "description": "Response message for \"CategoryManagerSerialization.ExportTaxonomies\".",
      "type": "object",
      "properties": {
        "taxonomies": {
          "description": "Required. List of taxonomies and categories in a tree structure.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1alpha3SerializedTaxonomy"
          }
        }
      }
    },
    "GoogleCloudDatacatalogV1alpha3Crawler": {
      "id": "GoogleCloudDatacatalogV1alpha3Crawler",
      "description": "Crawler Metadata.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. The resource name of the crawler. Must be empty when creating a crawler. For example, \"projects\/a\/crawlers\/b\".",
          "type": "string"
        },
        "displayName": {
          "description": "Required. The display name of the crawler.",
          "type": "string"
        },
        "description": {
          "description": "The description of the crawler.",
          "type": "string"
        },
        "config": {
          "description": "Required. The configuration of the crawler.",
          "$ref": "GoogleCloudDatacatalogV1alpha3CrawlerConfig"
        }
      }
    },
    "GoogleCloudDatacatalogV1alpha3CrawlerConfig": {
      "id": "GoogleCloudDatacatalogV1alpha3CrawlerConfig",
      "description": "Crawler configuration.",
      "type": "object",
      "properties": {
        "bucketScope": {
          "description": "Bucket scope. Directs the crawler to crawl specific buckets within the project that owns the crawler.",
          "$ref": "GoogleCloudDatacatalogV1alpha3BucketScope"
        },
        "projectScope": {
          "description": "Project scope. Directs the crawler to crawl the buckets of the project that owns the crawler.",
          "$ref": "GoogleCloudDatacatalogV1alpha3ParentProjectScope"
        },
        "organizationScope": {
          "description": "Organization scope. Directs the crawler to crawl the buckets of the projects in the organization that owns the crawler.",
          "$ref": "GoogleCloudDatacatalogV1alpha3ParentOrganizationScope"
        },
        "adHocRun": {
          "description": "Ad-hoc option. User can choose this option for ad-hoc runs.",
          "$ref": "GoogleCloudDatacatalogV1alpha3AdhocRun"
        },
        "scheduledRun": {
          "description": "Scheduled option. User can choose this option for scheduled runs.",
          "$ref": "GoogleCloudDatacatalogV1alpha3ScheduledRun"
        },
        "bundleSpecs": {
          "description": "The bundling specifications. Directs the crawler to bundle files into filesets based on the bundling specifications.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GoogleCloudDatacatalogV1alpha3BucketScope": {
      "id": "GoogleCloudDatacatalogV1alpha3BucketScope",
      "description": "Configuration to scope a crawler to the provided list of buckets.",
      "type": "object",
      "properties": {
        "buckets": {
          "description": "The maximum number of buckets allowed is 1000.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1alpha3BucketSpec"
          }
        }
      }
    },
    "GoogleCloudDatacatalogV1alpha3BucketSpec": {
      "id": "GoogleCloudDatacatalogV1alpha3BucketSpec",
      "description": "Configuration for a crawl bucket.",
      "type": "object",
      "properties": {
        "bucket": {
          "description": "The Google Cloud Storage bucket name.",
          "type": "string"
        }
      }
    },
    "GoogleCloudDatacatalogV1alpha3ParentProjectScope": {
      "id": "GoogleCloudDatacatalogV1alpha3ParentProjectScope",
      "description": "Configuration to scope a crawler to the parent project.",
      "type": "object",
      "properties": {
      }
    },
    "GoogleCloudDatacatalogV1alpha3ParentOrganizationScope": {
      "id": "GoogleCloudDatacatalogV1alpha3ParentOrganizationScope",
      "description": "Configuration to scope a crawler to the parent Organization.",
      "type": "object",
      "properties": {
      }
    },
    "GoogleCloudDatacatalogV1alpha3AdhocRun": {
      "id": "GoogleCloudDatacatalogV1alpha3AdhocRun",
      "description": "Configuration for ad-hoc runs.",
      "type": "object",
      "properties": {
      }
    },
    "GoogleCloudDatacatalogV1alpha3ScheduledRun": {
      "id": "GoogleCloudDatacatalogV1alpha3ScheduledRun",
      "description": "Configuration for scheduled runs.",
      "type": "object",
      "properties": {
        "scheduledRunOption": {
          "description": "Required. The scheduled run option of the crawler.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified scheduled run option.",
            "Daily scheduled run option.",
            "Weekly scheduled run option."
          ],
          "enum": [
            "SCHEDULED_RUN_OPTION_UNSPECIFIED",
            "DAILY",
            "WEEKLY"
          ]
        }
      }
    },
    "GoogleCloudDatacatalogV1alpha3ListCrawlersResponse": {
      "id": "GoogleCloudDatacatalogV1alpha3ListCrawlersResponse",
      "description": "Response message for `ListCrawlers` API.",
      "type": "object",
      "properties": {
        "crawlers": {
          "description": "List of crawlers.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1alpha3Crawler"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results or empty if there are no more results in the list.",
          "type": "string"
        }
      }
    },
    "GoogleCloudDatacatalogV1alpha3RunCrawlerRequest": {
      "id": "GoogleCloudDatacatalogV1alpha3RunCrawlerRequest",
      "description": "Request to run a crawler manually.",
      "type": "object",
      "properties": {
      }
    },
    "GoogleCloudDatacatalogV1alpha3CrawlerRun": {
      "id": "GoogleCloudDatacatalogV1alpha3CrawlerRun",
      "description": "A run of the crawler.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. The name of the crawler run. For example, \"projects\/project1\/crawlers\/crawler1\/crawlerRuns\/042423713e9a\"",
          "type": "string"
        },
        "runOption": {
          "type": "string",
          "enumDescriptions": [
            "Unspecified run option.",
            "Ad-hoc run option.",
            "Scheduled run option."
          ],
          "enum": [
            "RUN_OPTION_UNSPECIFIED",
            "AD_HOC",
            "SCHEDULED"
          ]
        },
        "state": {
          "description": "Output only. The state of the crawler run.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified crawler run state.",
            "This crawler run is waiting on resources to be ready.",
            "This crawler run is running.",
            "This crawler run failed.",
            "This crawler run succeeded."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "RUNNING",
            "FAILED",
            "SUCCEEDED"
          ]
        },
        "error": {
          "description": "Output only. The error status of the crawler run. This field will be populated only if the crawler run state is FAILED.",
          "$ref": "Status"
        }
      }
    },
    "Status": {
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https:\/\/github.com\/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https:\/\/cloud.google.com\/apis\/design\/errors).",
      "type": "object",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        }
      }
    },
    "GoogleCloudDatacatalogV1alpha3ListCrawlerRunsResponse": {
      "id": "GoogleCloudDatacatalogV1alpha3ListCrawlerRunsResponse",
      "description": "Response to listing the runs from a crawler.",
      "type": "object",
      "properties": {
        "crawlerRuns": {
          "description": "The crawler runs from this crawler, it includes both currently running and completed runs.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1alpha3CrawlerRun"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results or empty if there are no more results in the list.",
          "type": "string"
        }
      }
    }
  },
  "resources": {
    "projects": {
      "resources": {
        "taxonomies": {
          "methods": {
            "create": {
              "id": "datacatalog.projects.taxonomies.create",
              "path": "v1alpha3/{+parent}/taxonomies",
              "flatPath": "v1alpha3/projects/{projectsId}/taxonomies",
              "httpMethod": "POST",
              "parameters": {
                "parent": {
                  "description": "Required. Resource name of the project that the newly created taxonomy belongs to.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "request": {
                "$ref": "GoogleCloudDatacatalogV1alpha3Taxonomy"
              },
              "response": {
                "$ref": "GoogleCloudDatacatalogV1alpha3Taxonomy"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Creates a new taxonomy in a given project."
            },
            "delete": {
              "id": "datacatalog.projects.taxonomies.delete",
              "path": "v1alpha3/{+name}",
              "flatPath": "v1alpha3/projects/{projectsId}/taxonomies/{taxonomiesId}",
              "httpMethod": "DELETE",
              "parameters": {
                "name": {
                  "description": "Required. Resource name of the taxonomy to be deleted. All categories in this taxonomy will also be deleted.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/taxonomies\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Empty"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Deletes a taxonomy. This operation will also delete all categories in this taxonomy."
            },
            "patch": {
              "id": "datacatalog.projects.taxonomies.patch",
              "path": "v1alpha3/{+name}",
              "flatPath": "v1alpha3/projects/{projectsId}/taxonomies/{taxonomiesId}",
              "httpMethod": "PATCH",
              "parameters": {
                "name": {
                  "description": "Required. Resource name of the taxonomy to be updated.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/taxonomies\/[^\/]+$",
                  "type": "string"
                },
                "updateMask": {
                  "description": "The update mask applies to the resource. For the `FieldMask` definition, see https:\/\/developers.google.com\/protocol-buffers\/docs\/reference\/google.protobuf#fieldmask",
                  "location": "query",
                  "type": "string",
                  "format": "google-fieldmask"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "request": {
                "$ref": "GoogleCloudDatacatalogV1alpha3Taxonomy"
              },
              "response": {
                "$ref": "GoogleCloudDatacatalogV1alpha3Taxonomy"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Updates a taxonomy."
            },
            "list": {
              "id": "datacatalog.projects.taxonomies.list",
              "path": "v1alpha3/{+parent}/taxonomies",
              "flatPath": "v1alpha3/projects/{projectsId}/taxonomies",
              "httpMethod": "GET",
              "parameters": {
                "parent": {
                  "description": "Required. Resource name of a project to list the taxonomies of.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+$",
                  "type": "string"
                },
                "pageSize": {
                  "description": "The maximum number of items to return.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "The next_page_token value returned from a previous list request, if any.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "GoogleCloudDatacatalogV1alpha3ListTaxonomiesResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Lists all taxonomies in a project."
            },
            "get": {
              "id": "datacatalog.projects.taxonomies.get",
              "path": "v1alpha3/{+name}",
              "flatPath": "v1alpha3/projects/{projectsId}/taxonomies/{taxonomiesId}",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "description": "Required. Resource name of the taxonomy to be returned.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/taxonomies\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "GoogleCloudDatacatalogV1alpha3Taxonomy"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Gets the taxonomy referred by name."
            },
            "getIamPolicy": {
              "id": "datacatalog.projects.taxonomies.getIamPolicy",
              "path": "v1alpha3/{+resource}:getIamPolicy",
              "flatPath": "v1alpha3/projects/{projectsId}/taxonomies/{taxonomiesId}:getIamPolicy",
              "httpMethod": "POST",
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/taxonomies\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "resource"
              ],
              "request": {
                "$ref": "GetIamPolicyRequest"
              },
              "response": {
                "$ref": "Policy"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Gets the IAM policy for a taxonomy or a category."
            },
            "setIamPolicy": {
              "id": "datacatalog.projects.taxonomies.setIamPolicy",
              "path": "v1alpha3/{+resource}:setIamPolicy",
              "flatPath": "v1alpha3/projects/{projectsId}/taxonomies/{taxonomiesId}:setIamPolicy",
              "httpMethod": "POST",
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/taxonomies\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "resource"
              ],
              "request": {
                "$ref": "SetIamPolicyRequest"
              },
              "response": {
                "$ref": "Policy"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Sets the IAM policy for a taxonomy or a category."
            },
            "testIamPermissions": {
              "id": "datacatalog.projects.taxonomies.testIamPermissions",
              "path": "v1alpha3/{+resource}:testIamPermissions",
              "flatPath": "v1alpha3/projects/{projectsId}/taxonomies/{taxonomiesId}:testIamPermissions",
              "httpMethod": "POST",
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/taxonomies\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "resource"
              ],
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "response": {
                "$ref": "TestIamPermissionsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Returns permissions that a caller has on specified resources."
            },
            "import": {
              "id": "datacatalog.projects.taxonomies.import",
              "path": "v1alpha3/{+parent}/taxonomies:import",
              "flatPath": "v1alpha3/projects/{projectsId}/taxonomies:import",
              "httpMethod": "POST",
              "parameters": {
                "parent": {
                  "description": "Required. Resource name of project that the newly created taxonomies will belong to.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "request": {
                "$ref": "GoogleCloudDatacatalogV1alpha3ImportTaxonomiesRequest"
              },
              "response": {
                "$ref": "GoogleCloudDatacatalogV1alpha3ImportTaxonomiesResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Imports all taxonomies and their categories to a project as new taxonomies. This method provides a bulk taxonomy \/ category creation using nested proto structure."
            },
            "export": {
              "id": "datacatalog.projects.taxonomies.export",
              "path": "v1alpha3/{+parent}/taxonomies:export",
              "flatPath": "v1alpha3/projects/{projectsId}/taxonomies:export",
              "httpMethod": "GET",
              "parameters": {
                "parent": {
                  "description": "Required. Resource name of the project that taxonomies to be exported will share.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+$",
                  "type": "string"
                },
                "taxonomyNames": {
                  "description": "Required. Resource names of the taxonomies to be exported.",
                  "location": "query",
                  "repeated": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "GoogleCloudDatacatalogV1alpha3ExportTaxonomiesResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Exports all taxonomies and their categories in a project. This method generates SerializedTaxonomy protos with nested categories that can be used as an input for future ImportTaxonomies calls."
            }
          }
          ,
          "resources": {
            "categories": {
              "methods": {
                "create": {
                  "id": "datacatalog.projects.taxonomies.categories.create",
                  "path": "v1alpha3/{+parent}/categories",
                  "flatPath": "v1alpha3/projects/{projectsId}/taxonomies/{taxonomiesId}/categories",
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "description": "Required. Resource name of the taxonomy that the newly created category belongs to.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/taxonomies\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "GoogleCloudDatacatalogV1alpha3Category"
                  },
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1alpha3Category"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Creates a category in a taxonomy."
                },
                "delete": {
                  "id": "datacatalog.projects.taxonomies.categories.delete",
                  "path": "v1alpha3/{+name}",
                  "flatPath": "v1alpha3/projects/{projectsId}/taxonomies/{taxonomiesId}/categories/{categoriesId}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "description": "Required. Resource name of the category to be deleted. All its descendant categories will also be deleted.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/taxonomies\/[^\/]+\/categories\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Deletes a category. Also deletes all of its descendant categories."
                },
                "patch": {
                  "id": "datacatalog.projects.taxonomies.categories.patch",
                  "path": "v1alpha3/{+name}",
                  "flatPath": "v1alpha3/projects/{projectsId}/taxonomies/{taxonomiesId}/categories/{categoriesId}",
                  "httpMethod": "PATCH",
                  "parameters": {
                    "name": {
                      "description": "Required. Resource name of the category to be updated.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/taxonomies\/[^\/]+\/categories\/[^\/]+$",
                      "type": "string"
                    },
                    "updateMask": {
                      "description": "The update mask applies to the resource. Only display_name, description and parent_category_id can be updated and thus can be listed in the mask. If update_mask is not provided, all allowed fields (i.e. display_name, description and parent_id) will be updated. For more information including the `FieldMask` definition, see https:\/\/developers.google.com\/protocol-buffers\/docs\/reference\/google.protobuf#fieldmask",
                      "location": "query",
                      "type": "string",
                      "format": "google-fieldmask"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "GoogleCloudDatacatalogV1alpha3Category"
                  },
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1alpha3Category"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Updates a category."
                },
                "list": {
                  "id": "datacatalog.projects.taxonomies.categories.list",
                  "path": "v1alpha3/{+parent}/categories",
                  "flatPath": "v1alpha3/projects/{projectsId}/taxonomies/{taxonomiesId}/categories",
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "description": "Required. Resource name of a taxonomy to list the categories of.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/taxonomies\/[^\/]+$",
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "The maximum number of items to return.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "The next_page_token value returned from a previous List request, if any.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1alpha3ListCategoriesResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Lists all categories in a taxonomy."
                },
                "get": {
                  "id": "datacatalog.projects.taxonomies.categories.get",
                  "path": "v1alpha3/{+name}",
                  "flatPath": "v1alpha3/projects/{projectsId}/taxonomies/{taxonomiesId}/categories/{categoriesId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "Required. Resource name of the category to be returned.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/taxonomies\/[^\/]+\/categories\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1alpha3Category"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets a category."
                },
                "getIamPolicy": {
                  "id": "datacatalog.projects.taxonomies.categories.getIamPolicy",
                  "path": "v1alpha3/{+resource}:getIamPolicy",
                  "flatPath": "v1alpha3/projects/{projectsId}/taxonomies/{taxonomiesId}/categories/{categoriesId}:getIamPolicy",
                  "httpMethod": "POST",
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/taxonomies\/[^\/]+\/categories\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "request": {
                    "$ref": "GetIamPolicyRequest"
                  },
                  "response": {
                    "$ref": "Policy"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets the IAM policy for a taxonomy or a category."
                },
                "setIamPolicy": {
                  "id": "datacatalog.projects.taxonomies.categories.setIamPolicy",
                  "path": "v1alpha3/{+resource}:setIamPolicy",
                  "flatPath": "v1alpha3/projects/{projectsId}/taxonomies/{taxonomiesId}/categories/{categoriesId}:setIamPolicy",
                  "httpMethod": "POST",
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/taxonomies\/[^\/]+\/categories\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "request": {
                    "$ref": "SetIamPolicyRequest"
                  },
                  "response": {
                    "$ref": "Policy"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Sets the IAM policy for a taxonomy or a category."
                },
                "testIamPermissions": {
                  "id": "datacatalog.projects.taxonomies.categories.testIamPermissions",
                  "path": "v1alpha3/{+resource}:testIamPermissions",
                  "flatPath": "v1alpha3/projects/{projectsId}/taxonomies/{taxonomiesId}/categories/{categoriesId}:testIamPermissions",
                  "httpMethod": "POST",
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/taxonomies\/[^\/]+\/categories\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "request": {
                    "$ref": "TestIamPermissionsRequest"
                  },
                  "response": {
                    "$ref": "TestIamPermissionsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Returns permissions that a caller has on specified resources."
                }
              }
            }
          }
        },
        "crawlers": {
          "methods": {
            "create": {
              "id": "datacatalog.projects.crawlers.create",
              "path": "v1alpha3/{+parent}/crawlers",
              "flatPath": "v1alpha3/projects/{projectsId}/crawlers",
              "httpMethod": "POST",
              "parameters": {
                "parent": {
                  "description": "Required. The name of the project this crawler is in. Example: \"projects\/foo\".",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+$",
                  "type": "string"
                },
                "crawlerId": {
                  "description": "Required. The id of the crawler to create.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "request": {
                "$ref": "GoogleCloudDatacatalogV1alpha3Crawler"
              },
              "response": {
                "$ref": "GoogleCloudDatacatalogV1alpha3Crawler"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Creates a new crawler in a project. The request fails if the crawler (`parent`, crawlerId) exists."
            },
            "get": {
              "id": "datacatalog.projects.crawlers.get",
              "path": "v1alpha3/{+name}",
              "flatPath": "v1alpha3/projects/{projectsId}/crawlers/{crawlersId}",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "description": "Required. The resource name of the crawler. For example, \"projects\/foo\/crawlers\/bar\".",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/crawlers\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "GoogleCloudDatacatalogV1alpha3Crawler"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Gets a crawler in a project."
            },
            "list": {
              "id": "datacatalog.projects.crawlers.list",
              "path": "v1alpha3/{+parent}/crawlers",
              "flatPath": "v1alpha3/projects/{projectsId}/crawlers",
              "httpMethod": "GET",
              "parameters": {
                "parent": {
                  "description": "Required. The parent resource name. Example: \"projects\/foo\".",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+$",
                  "type": "string"
                },
                "pageSize": {
                  "description": "The maximum number of items to return. The default value for this field is 10. The maximum value for this field is 1000.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "The next_page_token value returned from a previous list request, if any.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "GoogleCloudDatacatalogV1alpha3ListCrawlersResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Lists the crawlers in a project."
            },
            "patch": {
              "id": "datacatalog.projects.crawlers.patch",
              "path": "v1alpha3/{+name}",
              "flatPath": "v1alpha3/projects/{projectsId}/crawlers/{crawlersId}",
              "httpMethod": "PATCH",
              "parameters": {
                "name": {
                  "description": "Output only. The resource name of the crawler. Must be empty when creating a crawler. For example, \"projects\/a\/crawlers\/b\".",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/crawlers\/[^\/]+$",
                  "type": "string"
                },
                "updateMask": {
                  "description": "The update mask applies to the resource.",
                  "location": "query",
                  "type": "string",
                  "format": "google-fieldmask"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "request": {
                "$ref": "GoogleCloudDatacatalogV1alpha3Crawler"
              },
              "response": {
                "$ref": "GoogleCloudDatacatalogV1alpha3Crawler"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Updates a crawler in a project."
            },
            "delete": {
              "id": "datacatalog.projects.crawlers.delete",
              "path": "v1alpha3/{+name}",
              "flatPath": "v1alpha3/projects/{projectsId}/crawlers/{crawlersId}",
              "httpMethod": "DELETE",
              "parameters": {
                "name": {
                  "description": "Required. The resource name of the crawler. For example, \"projects\/bar\/crawlers\/foo\".",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/crawlers\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Empty"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Deletes a crawler in a project. The request fails if the crawler does not exist."
            },
            "run": {
              "id": "datacatalog.projects.crawlers.run",
              "path": "v1alpha3/{+name}:run",
              "flatPath": "v1alpha3/projects/{projectsId}/crawlers/{crawlersId}:run",
              "httpMethod": "POST",
              "parameters": {
                "name": {
                  "description": "Required. Resource name of the crawler resource. For example, \"projects\/project1\/crawlers\/crawler1\".",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/crawlers\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "request": {
                "$ref": "GoogleCloudDatacatalogV1alpha3RunCrawlerRequest"
              },
              "response": {
                "$ref": "GoogleCloudDatacatalogV1alpha3CrawlerRun"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Runs a crawler will create and execute an ad-hoc crawler run. The request fails if the crawler is already running."
            }
          }
          ,
          "resources": {
            "crawlerRuns": {
              "methods": {
                "get": {
                  "id": "datacatalog.projects.crawlers.crawlerRuns.get",
                  "path": "v1alpha3/{+name}",
                  "flatPath": "v1alpha3/projects/{projectsId}/crawlers/{crawlersId}/crawlerRuns/{crawlerRunsId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "Required. Resource name of the crawler run to retrieve. For example, \"projects\/project1\/crawlers\/crawler1\/crawlerRuns\/run1\".",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/crawlers\/[^\/]+\/crawlerRuns\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1alpha3CrawlerRun"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets a particular run of the crawler."
                },
                "list": {
                  "id": "datacatalog.projects.crawlers.crawlerRuns.list",
                  "path": "v1alpha3/{+parent}/crawlerRuns",
                  "flatPath": "v1alpha3/projects/{projectsId}/crawlers/{crawlersId}/crawlerRuns",
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "description": "Required. Resource name of the parent crawler resource. For example, \"projects\/project1\/crawlers\/crawler1\".",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/crawlers\/[^\/]+$",
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "The maximum number of items to return. The default value for this field is 10. The maximum value for this field is 1000.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "The next_page_token value returned from a previous list request, if any.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1alpha3ListCrawlerRunsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Lists crawler runs. This includes the currently running, pending and completed crawler runs."
                }
              }
            }
          }
        }
      }
    }
  },
  "basePath": ""
}