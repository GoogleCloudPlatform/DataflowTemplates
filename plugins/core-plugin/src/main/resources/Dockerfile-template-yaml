#===================================================================#
# Create build environment from base Python template launcher image #
#===================================================================#
FROM ${basePythonContainerImage} as python-base

# Build args
ARG WORKDIR=${workingDirectory}
ARG REQUIREMENTS_FILE=requirements.txt
ARG PY_VERSION=${pythonVersion}

# Copy template files to /template
RUN mkdir -p $WORKDIR
${filesToCopy}
${directoriesToCopy}
WORKDIR $WORKDIR

# Throw if requirements.txt file not provided
RUN if ! [ -f requirements.txt ] ; then >&2 echo "error: no requirements.txt file found" && exit 1 ; fi

# Set up custom PyPi repository, if applicable
${airlockConfig}

# Install dependencies to launch the pipeline and download to reduce startup time
RUN python -m venv /venv \
    && /venv/bin/pip install --require-hashes --no-deps --no-cache-dir -U -r $REQUIREMENTS_FILE \
    && /venv/bin/pip download --require-hashes --no-cache-dir --dest /tmp/dataflow-requirements-cache -r $REQUIREMENTS_FILE \
    && rm -rf /usr/local/lib/python$PY_VERSION/site-packages \
    && mv /venv/lib/python$PY_VERSION/site-packages /usr/local/lib/python$PY_VERSION/

# Cache provider environments for faster startup and expansion time
RUN python -m apache_beam.yaml.cache_provider_artifacts

<#if saSecretName?? && airlockJavaRepo??>
COPY cache_provider_jars.py /template
RUN mkdir -p $HOME/.apache_beam/cache/jars
RUN python cache_provider_jars.py --cache_dir="/root/.apache_beam/cache/jars/" --maven_central_repository_url="https://_json_key_base64:$(gcloud secrets versions access latest --secret=${saSecretName} | base64 -w 0)@us-maven.pkg.dev/artifact-foundry-prod/${airlockJavaRepo}"
</#if>

#============================================================#
# Create Distroless xlang image compatible with YamlTemplate #
#============================================================#
FROM ${baseJavaContainerImage}

# Build args
ARG CHIPSET_ARCH=x86_64-linux-gnu
ARG PY_VERSION=${pythonVersion}

# Set python environment variables
ENV FLEX_TEMPLATE_PYTHON_PY_FILE=main.py

# Copy template, python wheels and python launcher script from python-base
COPY --from=python-base /template /template
COPY --from=python-base /opt/google/dataflow/python_template_launcher /opt/google/dataflow/python_template_launcher
COPY --from=python-base /tmp/dataflow-requirements-cache /tmp/dataflow-requirements-cache

# Copy python and installed packages from python-base
COPY --from=python-base /usr/local/bin/python$PY_VERSION /usr/local/bin/python
COPY --from=python-base /usr/local/lib/python$PY_VERSION /usr/local/lib/python$PY_VERSION

# Copy required shared libraries from python-base
COPY --from=python-base /lib/$CHIPSET_ARCH/ld-*so* /lib64/
COPY --from=python-base /lib/$CHIPSET_ARCH/lib*so* /lib/$CHIPSET_ARCH/
COPY --from=python-base /usr/lib/$CHIPSET_ARCH/libffi* /usr/lib/$CHIPSET_ARCH/
COPY --from=python-base /usr/local/lib/libpython$PY_VERSION* /usr/local/lib/

# Copy minimal commands from python-base needed to execute template
COPY --from=python-base /bin/dash /bin/sh
COPY --from=python-base /usr/bin/which.debianutils /usr/bin/which

# Copy cached beam library cache from python-base
COPY --from=python-base /bin/mkdir /bin/mkdir
RUN mkdir -p /root/.apache_beam/cache
COPY --from=python-base /root/.apache_beam/cache /root/.apache_beam/cache

# Copy licenses
COPY --from=python-base /usr/licenses/ /usr/licenses/

WORKDIR /template

ENTRYPOINT ${entryPoint}
