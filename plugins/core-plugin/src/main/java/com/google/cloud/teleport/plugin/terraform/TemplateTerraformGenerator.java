/*
 * Copyright (C) 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.google.cloud.teleport.plugin.terraform;

import static com.google.cloud.teleport.plugin.terraform.TerraformVariable.Type.BOOL;
import static com.google.cloud.teleport.plugin.terraform.TerraformVariable.Type.NUMBER;
import static com.google.cloud.teleport.plugin.terraform.TerraformVariable.Type.STRING;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.google.cloud.teleport.plugin.model.ImageSpec;
import com.google.cloud.teleport.plugin.model.ImageSpecParameter;
import com.google.cloud.teleport.plugin.model.ImageSpecParameterType;
import com.google.common.annotations.VisibleForTesting;
import freemarker.template.Configuration;
import freemarker.template.TemplateExceptionHandler;
import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** Class that can generate terraform files based on template annotations. */
public class TemplateTerraformGenerator {
  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();
  private static final Logger LOG = LoggerFactory.getLogger(TemplateTerraformGenerator.class);
  private static final Configuration FREEMARKER_CONFIG =
      new Configuration(Configuration.VERSION_2_3_32);

  static {
    FREEMARKER_CONFIG.setDefaultEncoding("UTF-8");
    FREEMARKER_CONFIG.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
    FREEMARKER_CONFIG.setLogTemplateExceptions(true);
    FREEMARKER_CONFIG.setClassForTemplateLoading(TemplateTerraformGenerator.class, "/");
  }

  private static final String COMMENT_KEY = "//";
  private static final String COMMENT_VALUE = "This file is autogenerated. DO NOT EDIT.";
  private static final String VARIABLE_KEY = "variable";

  public static void terraform(ImageSpec imageSpec, OutputStream destination) throws IOException {
    LOG.info("Generating terraform for template {}...", imageSpec.getMetadata().getInternalName());
    destination.flush();
    destination.close();
  }

  @VisibleForTesting
  static void terraform(ImageSpec imageSpec, ObjectNode destination) {
    destination.put(COMMENT_KEY, COMMENT_VALUE);
    terraform(imageSpec.getMetadata().getParameters(), destination);
  }

  @VisibleForTesting
  static void terraform(List<ImageSpecParameter> parameterList, ObjectNode destination) {
    ObjectNode children = OBJECT_MAPPER.createObjectNode();
    for (ImageSpecParameter parameter : parameterList) {
      children.putIfAbsent(parameter.getName(), variable(parameter));
    }

    destination.putIfAbsent(VARIABLE_KEY, children);
  }

  @VisibleForTesting
  static JsonNode variable(ImageSpecParameter parameter) {
    boolean optional = parameter.isOptional() != null && parameter.isOptional();
    TerraformVariable terraform =
        TerraformVariable.builder()
            .setName(parameter.getName())
            .setDescription(parameter.getHelpText())
            .setType(type(parameter.getParamType()))
            .setNullable(optional)
            .build();

    return OBJECT_MAPPER.valueToTree(terraform);
  }

  private static TerraformVariable.Type type(ImageSpecParameterType specParameterType) {
    switch (specParameterType) {
      case NUMBER:
        return NUMBER;
      case BOOLEAN:
        return BOOL;
      default:
        return STRING;
    }
  }
}
