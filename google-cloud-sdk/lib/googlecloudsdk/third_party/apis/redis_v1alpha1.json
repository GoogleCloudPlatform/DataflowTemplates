{
  "kind": "discovery#restDescription",
  "discoveryVersion": "v1",
  "id": "redis:v1alpha1",
  "name": "redis",
  "canonicalName": "Cloud Redis",
  "version": "v1alpha1",
  "revision": "0",
  "title": "Google Cloud Memorystore for Redis API",
  "description": "Creates and manages Redis instances on the Google Cloud Platform.",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
   },
  "documentationLink": "https://cloud.google.com/memorystore/docs/redis/",
  "protocol": "rest",
  "rootUrl": "https://redis.googleapis.com/",
  "mtlsRootUrl": "https://redis.mtls.googleapis.com/",
  "servicePath": "",
  "baseUrl": "https://redis.googleapis.com/",
  "batchPath": "batch",
  "version_module": true,
  "fullyEncodeReservedExpansion": true,
  "parameters": {
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "schemas": {
    "ListOperationsResponse": {
      "id": "ListOperationsResponse",
      "description": "The response message for Operations.ListOperations.",
      "type": "object",
      "properties": {
        "operations": {
          "description": "A list of operations that matches the specified filter in the request.",
          "type": "array",
          "items": {
            "$ref": "Operation"
          }
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      }
    },
    "Operation": {
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations\/{unique_id}`.",
          "type": "string"
        },
        "metadata": {
          "description": "{ `createTime`: The time the operation was created. `endTime`: The time the operation finished running. `target`: Server-defined resource path for the target of the operation. `verb`: Name of the verb executed by the operation. `statusDetail`: Human-readable status of the operation, if any. `cancelRequested`: Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. `apiVersion`: API version used to start the operation. }",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "response": {
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`\/`Create`\/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        }
      }
    },
    "Status": {
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https:\/\/github.com\/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https:\/\/cloud.google.com\/apis\/design\/errors).",
      "type": "object",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        }
      }
    },
    "Empty": {
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object",
      "properties": {
      }
    },
    "ListInstancesResponse": {
      "id": "ListInstancesResponse",
      "description": "Response for ListInstances.",
      "type": "object",
      "properties": {
        "instances": {
          "description": "A list of Redis instances in the project in the specified location, or across all locations. If the `location_id` in the parent field of the request is \"-\", all regions available to the project are queried, and the results aggregated. If in such an aggregated query a location is unavailable, a placeholder Redis entry is included in the response with the `name` field set to a value of the form `projects\/{project_id}\/locations\/{location_id}\/instances\/`- and the `status` field set to ERROR and `status_message` field set to \"location not available for ListInstances\".",
          "type": "array",
          "items": {
            "$ref": "Instance"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        },
        "unreachable": {
          "description": "Locations that could not be reached.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Instance": {
      "id": "Instance",
      "description": "A Google Cloud Redis instance.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Required. Unique name of the resource in this scope including project and location using the form: `projects\/{project_id}\/locations\/{location_id}\/instances\/{instance_id}` Note: Redis instances are managed and addressed at regional level so location_id here refers to a GCP region; however, users get to choose which specific zone (or collection of zones for cross zone instances) an instance should be provisioned in. Refer to [location_id] and [alternative_location_id] fields for more details.",
          "type": "string"
        },
        "displayName": {
          "description": "An arbitrary and optional user provided name for the instance.",
          "type": "string"
        },
        "labels": {
          "description": "Resource labels to represent user provided metadata",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "locationId": {
          "description": "Optional. The zone where the instance will be provisioned. If not provided, the service will choose a zone for the instance. For standard tier, instances will be created across two zones for protection against zonal failures. If [alternative_location_id] is also provided, it must be different from [location_id].",
          "type": "string"
        },
        "alternativeLocationId": {
          "description": "Optional. Only applicable to standard tier which protects the instance against zonal failures by provisioning it across two zones. If provided, it must be a different zone from the one provided in [location_id].",
          "type": "string"
        },
        "redisVersion": {
          "description": "Optional. The version of Redis software. If not provided, latest supported version will be used. Updating the version will perform an upgrade\/downgrade to the new version. Currently, the supported values are: * `REDIS_4_0` for Redis 4.0 compatibility * `REDIS_3_2` for Redis 3.2 compatibility (default)",
          "type": "string"
        },
        "reservedIpRange": {
          "description": "Optional. The CIDR range of internal addresses that are reserved for this instance. If not provided, the service will choose an unused \/29 block, for example, 10.0.0.0\/29 or 192.168.0.0\/29. Ranges must be unique and non-overlapping with existing subnets in a network.",
          "type": "string"
        },
        "host": {
          "description": "Output only. Hostname or IP address of the exposed redis endpoint used by clients to connect to the service.",
          "type": "string"
        },
        "port": {
          "description": "Output only. The port number of the exposed redis endpoint.",
          "type": "integer",
          "format": "int32"
        },
        "currentLocationId": {
          "description": "Output only. The current zone where the Redis endpoint is placed. In single zone deployments, this will always be the same as [location_id] provided by the user at creation time. In cross-zone instances (only applicable in standard tier), this can be either [location_id] or [alternative_location_id] and can change on a failover event.",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. The time the instance was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "state": {
          "description": "Output only. The current state of this instance.",
          "type": "string",
          "enumDescriptions": [
            "Not set.",
            "Redis instance is being created.",
            "Redis instance has been created and is fully usable.",
            "Redis instance configuration is being updated. Certain kinds of updates may cause the instance to become unusable while the update is in progress.",
            "Redis instance is being deleted.",
            "Redis instance is being repaired and may be unusable. Details can be found in the `status_message` field.",
            "Maintenance is being performed on this Redis instance.",
            "Redis instance is importing data (availability may be affected).",
            "Redis instance is failing over (availability may be affected)."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "READY",
            "UPDATING",
            "DELETING",
            "REPAIRING",
            "PERFORMING_MAINTENANCE",
            "IMPORTING",
            "FAILING_OVER"
          ]
        },
        "statusMessage": {
          "description": "Output only. Additional information about the current status of this instance, if available.",
          "type": "string"
        },
        "redisConfigs": {
          "description": "Optional. Redis configuration parameters, according to http:\/\/redis.io\/topics\/config. Currently, the only supported parameters are: Redis 3.2 and above: * maxmemory-policy * notify-keyspace-events Redis 4.0 and above: * activedefrag * lfu-log-factor * lfu-decay-time",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tier": {
          "description": "Required. The service tier of the instance.",
          "type": "string",
          "enumDescriptions": [
            "Not set.",
            "BASIC tier: standalone instance",
            "STANDARD_HA tier: highly available primary\/replica instances"
          ],
          "enum": [
            "TIER_UNSPECIFIED",
            "BASIC",
            "STANDARD_HA"
          ]
        },
        "memorySizeGb": {
          "description": "Required. Redis memory size in GB, up to 200GB.",
          "type": "integer",
          "format": "int32"
        },
        "authorizedNetwork": {
          "description": "Optional. The full name of the Google Compute Engine [network](\/compute\/docs\/networks-and-firewalls#networks) to which the instance is connected. If left unspecified, the `default` network will be used.",
          "type": "string"
        },
        "persistenceIamIdentity": {
          "description": "Output only. Cloud IAM identity used by import \/ export operations to transfer data to\/from Cloud Storage. Format is \"serviceAccount:\". The value may change over time for a given instance so should be checked before each import\/export operation.",
          "type": "string"
        },
        "connectMode": {
          "description": "Optional. The connect mode of Redis instance. If not provided, default one will be used. Current default: DIRECT_PEERING.",
          "type": "string",
          "enumDescriptions": [
            "Not set.",
            "Connect via directly peering with memorystore redis hosted service.",
            "Connect with google via private service access and share connection across google managed services."
          ],
          "enum": [
            "CONNECT_MODE_UNSPECIFIED",
            "DIRECT_PEERING",
            "PRIVATE_SERVICE_ACCESS"
          ]
        },
        "authEnabled": {
          "description": "Optional. Indicates whether OSS Redis AUTH is enabled for the instance. If set to \"true\" AUTH is enabled on the instance. Default value is \"false\" meaning AUTH is disabled.",
          "type": "boolean"
        },
        "serverCaCerts": {
          "description": "Output only. List of server CA certificates for the instance.",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "TlsCertificate"
          }
        },
        "persistenceConfig": {
          "description": "Optional. Persistence configuration parameters",
          "$ref": "PersistenceConfig"
        },
        "transitEncryptionMode": {
          "description": "Optional. The In-transit encryption mode of Redis instance. If not provided, in-transit encryption is disabled for instance.",
          "type": "string",
          "enumDescriptions": [
            "Not set.",
            "Client to Server traffic encryption enabled with server authentication.",
            "In-transit encryption is disabled for instance."
          ],
          "enum": [
            "TRANSIT_ENCRYPTION_MODE_UNSPECIFIED",
            "SERVER_AUTHENTICATION",
            "DISABLED"
          ]
        }
      }
    },
    "TlsCertificate": {
      "id": "TlsCertificate",
      "description": "TlsCertificate Resource",
      "type": "object",
      "properties": {
        "serialNumber": {
          "description": "Serial number, as extracted from the certificate.",
          "type": "string"
        },
        "cert": {
          "description": "PEM representation.",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. The time when the certificate was created in [RFC 3339](https:\/\/tools.ietf.org\/html\/rfc3339) format, for example `2020-05-18T00:00:00.094Z`.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "expireTime": {
          "description": "Output only. The time when the certificate expires in [RFC 3339](https:\/\/tools.ietf.org\/html\/rfc3339) format, for example `2020-05-18T00:00:00.094Z`.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "sha1Fingerprint": {
          "description": "Sha1 Fingerprint of the certificate.",
          "type": "string"
        }
      }
    },
    "PersistenceConfig": {
      "id": "PersistenceConfig",
      "description": "Configuration of the persistence functionality.",
      "type": "object",
      "properties": {
        "persistenceMode": {
          "description": "Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.",
          "type": "string",
          "enumDescriptions": [
            "Not set.",
            "Persistence is disabled for the instance.",
            "RDB based Persistence is enabled."
          ],
          "enum": [
            "PERSISTENCE_MODE_UNSPECIFIED",
            "DISABLED",
            "RDB"
          ]
        },
        "rdbSnapshotPeriod": {
          "description": "Optional. Time period for snapshot scheduling. Snapshots will be created every period starting from the provided snapshot start time. Example, start time of 00:00 and SIX_HOURS snapshort period configuration will trigger snapshots every day at 00:00, 06:00, 12:00 and 18:00. If not provided TWENTY_FOUR_HOURS will be used as default.",
          "type": "string",
          "enumDescriptions": [
            "Not set.",
            "Snapshot every 15 minutes.",
            "Snapshot every 30 minutes.",
            "Snapshot every 1 hour.",
            "Snapshot every 6 hours.",
            "Snapshot every 12 hours.",
            "Snapshot every 24 horus."
          ],
          "enum": [
            "SNAPSHOT_PERIOD_UNSPECIFIED",
            "FIFTEEN_MINUTES",
            "THIRTY_MINUTES",
            "ONE_HOUR",
            "SIX_HOURS",
            "TWELVE_HOURS",
            "TWENTY_FOUR_HOURS"
          ]
        },
        "rdbSnapshotStartTime": {
          "description": "Optional. Time of the day when the snapshots are going to be triggered. If backup is already ongoing the trigger will be skipped. If not provided the current time will be used.",
          "$ref": "TimeOfDay"
        }
      }
    },
    "TimeOfDay": {
      "id": "TimeOfDay",
      "description": "Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.",
      "type": "object",
      "properties": {
        "hours": {
          "description": "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
          "type": "integer",
          "format": "int32"
        },
        "minutes": {
          "description": "Minutes of hour of day. Must be from 0 to 59.",
          "type": "integer",
          "format": "int32"
        },
        "seconds": {
          "description": "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
          "type": "integer",
          "format": "int32"
        },
        "nanos": {
          "description": "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "InstanceAuthString": {
      "id": "InstanceAuthString",
      "description": "Instance AUTH string details.",
      "type": "object",
      "properties": {
        "authString": {
          "description": "AUTH string set on the instance.",
          "type": "string"
        }
      }
    },
    "ReportInstanceHealthResponse": {
      "id": "ReportInstanceHealthResponse",
      "description": "Response for ReportInstanceHealth.",
      "type": "object",
      "properties": {
        "overallState": {
          "description": "Health state of overall health of this instance. Such as unhealthy\/warning\/healthy",
          "type": "string",
          "enumDescriptions": [
            "Invalid",
            "Unknown. May indicate exceptions.",
            "Healthy",
            "Warning",
            "Unhealthy"
          ],
          "enum": [
            "HEALTH_STATE_UNSPECIFIED",
            "UNKNOWN",
            "HEALTHY",
            "WARNING",
            "UNHEALTHY"
          ]
        },
        "categories": {
          "description": "Associated categories, such as CPU\/Memory",
          "type": "array",
          "items": {
            "$ref": "CategoryHealth"
          }
        }
      }
    },
    "CategoryHealth": {
      "id": "CategoryHealth",
      "description": "Category health, such as CPU\/memory",
      "type": "object",
      "properties": {
        "category": {
          "description": "Name of this category",
          "type": "string"
        },
        "state": {
          "description": "Health state, such as unhealthy\/warning\/healthy",
          "type": "string",
          "enumDescriptions": [
            "Invalid",
            "Unknown. May indicate exceptions.",
            "Healthy",
            "Warning",
            "Unhealthy"
          ],
          "enum": [
            "HEALTH_STATE_UNSPECIFIED",
            "UNKNOWN",
            "HEALTHY",
            "WARNING",
            "UNHEALTHY"
          ]
        },
        "metrics": {
          "description": "Associated metrics",
          "type": "array",
          "items": {
            "$ref": "MetricHealth"
          }
        }
      }
    },
    "MetricHealth": {
      "id": "MetricHealth",
      "description": "Metric health, such as used_memory_ratio, redis_server_cpu_usage",
      "type": "object",
      "properties": {
        "metric": {
          "description": "Name of this metric",
          "type": "string"
        },
        "state": {
          "description": "Health state, such as unhealthy\/warning\/healthy",
          "type": "string",
          "enumDescriptions": [
            "Invalid",
            "Unknown. May indicate exceptions.",
            "Healthy",
            "Warning",
            "Unhealthy"
          ],
          "enum": [
            "HEALTH_STATE_UNSPECIFIED",
            "UNKNOWN",
            "HEALTHY",
            "WARNING",
            "UNHEALTHY"
          ]
        },
        "reason": {
          "description": "Reason if the status is not healthy",
          "type": "string"
        },
        "suggestion": {
          "description": "Actional suggestion if the status is not healthy",
          "type": "string"
        }
      }
    },
    "UpgradeInstanceRequest": {
      "id": "UpgradeInstanceRequest",
      "description": "Request for UpgradeInstance.",
      "type": "object",
      "properties": {
        "redisVersion": {
          "description": "Required. Specifies the target version of Redis software to upgrade to.",
          "type": "string"
        }
      }
    },
    "ImportInstanceRequest": {
      "id": "ImportInstanceRequest",
      "description": "Request for Import.",
      "type": "object",
      "properties": {
        "inputConfig": {
          "description": "Required. Specify data to be imported.",
          "$ref": "InputConfig"
        }
      }
    },
    "InputConfig": {
      "id": "InputConfig",
      "description": "The input content",
      "type": "object",
      "properties": {
        "gcsSource": {
          "description": "Google Cloud Storage location where input content is located.",
          "$ref": "GcsSource"
        }
      }
    },
    "GcsSource": {
      "id": "GcsSource",
      "description": "The Cloud Storage location for the input content",
      "type": "object",
      "properties": {
        "uri": {
          "description": "Required. Source data URI. (e.g. 'gs:\/\/my_bucket\/my_object').",
          "type": "string"
        }
      }
    },
    "ExportInstanceRequest": {
      "id": "ExportInstanceRequest",
      "description": "Request for Export.",
      "type": "object",
      "properties": {
        "outputConfig": {
          "description": "Required. Specify data to be exported.",
          "$ref": "OutputConfig"
        }
      }
    },
    "OutputConfig": {
      "id": "OutputConfig",
      "description": "The output content",
      "type": "object",
      "properties": {
        "gcsDestination": {
          "description": "Google Cloud Storage destination for output content.",
          "$ref": "GcsDestination"
        }
      }
    },
    "GcsDestination": {
      "id": "GcsDestination",
      "description": "The Cloud Storage location for the output content",
      "type": "object",
      "properties": {
        "uri": {
          "description": "Required. Data destination URI (e.g. 'gs:\/\/my_bucket\/my_object'). Existing files will be overwritten.",
          "type": "string"
        }
      }
    },
    "ListLocationsResponse": {
      "id": "ListLocationsResponse",
      "description": "The response message for Locations.ListLocations.",
      "type": "object",
      "properties": {
        "locations": {
          "description": "A list of locations that matches the specified filter in the request.",
          "type": "array",
          "items": {
            "$ref": "Location"
          }
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      }
    },
    "Location": {
      "id": "Location",
      "description": "A resource that represents Google Cloud Platform location.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Full resource name for the region. For example: \"projects\/example-project\/locations\/us-east1\".",
          "type": "string"
        },
        "locationId": {
          "description": "Resource ID for the region. For example: \"us-east1\".",
          "type": "string"
        },
        "displayName": {
          "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\".",
          "type": "string"
        },
        "labels": {
          "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com\/region\": \"us-east1\"}",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Output only. The set of available zones in the location. The map is keyed by the lowercase ID of each zone, as defined by Compute Engine. These keys can be specified in `location_id` or `alternative_location_id` fields when creating a Redis instance.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        }
      }
    },
    "GoogleCloudCommonOperationMetadata": {
      "id": "GoogleCloudCommonOperationMetadata",
      "description": "Represents the metadata of the long-running operation.",
      "type": "object",
      "properties": {
        "createTime": {
          "description": "[Output only] The time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "endTime": {
          "description": "[Output only] The time the operation finished running.",
          "type": "string",
          "format": "google-datetime"
        },
        "target": {
          "description": "[Output only] Server-defined resource path for the target of the operation.",
          "type": "string"
        },
        "verb": {
          "description": "[Output only] Name of the verb executed by the operation.",
          "type": "string"
        },
        "statusDetail": {
          "description": "[Output only] Human-readable status of the operation, if any.",
          "type": "string"
        },
        "cancelRequested": {
          "description": "[Output only] Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "type": "boolean"
        },
        "apiVersion": {
          "description": "[Output only] API version used to start the operation.",
          "type": "string"
        }
      }
    },
    "LocationMetadata": {
      "id": "LocationMetadata",
      "description": "This location metadata represents additional configuration options for a given location where a Redis instance may be created. All fields are output only. It is returned as content of the `google.cloud.location.Location.metadata` field.",
      "type": "object",
      "properties": {
        "availableZones": {
          "description": "Output only. The set of available zones in the location. The map is keyed by the lowercase ID of each zone, as defined by GCE. These keys can be specified in `location_id` or `alternative_location_id` fields when creating a Redis instance.",
          "type": "object",
          "additionalProperties": {
            "$ref": "ZoneMetadata"
          }
        }
      }
    },
    "ZoneMetadata": {
      "id": "ZoneMetadata",
      "description": "Defines specific information for a particular zone. Currently empty and reserved for future use only.",
      "type": "object",
      "properties": {
      }
    }
  },
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "methods": {
            "list": {
              "id": "redis.projects.locations.list",
              "path": "v1alpha1/{+name}/locations",
              "flatPath": "v1alpha1/projects/{projectsId}/locations",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "description": "The resource that owns the locations collection, if applicable.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+$",
                  "type": "string"
                },
                "filter": {
                  "description": "The standard list filter.",
                  "location": "query",
                  "type": "string"
                },
                "pageSize": {
                  "description": "The standard list page size.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "The standard list page token.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "ListLocationsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Lists information about the supported locations for this service."
            },
            "get": {
              "id": "redis.projects.locations.get",
              "path": "v1alpha1/{+name}",
              "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "description": "Resource name for the location.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Location"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Gets information about a location."
            }
          }
          ,
          "resources": {
            "operations": {
              "methods": {
                "list": {
                  "id": "redis.projects.locations.operations.list",
                  "path": "v1alpha1/{+name}/operations",
                  "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "The name of the operation's parent resource.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "type": "string"
                    },
                    "filter": {
                      "description": "The standard list filter.",
                      "location": "query",
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "The standard list page size.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "The standard list page token.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "ListOperationsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users\/*\/operations`. To override the binding, API services can add a binding such as `\"\/v1\/{name=users\/*}\/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id."
                },
                "get": {
                  "id": "redis.projects.locations.operations.get",
                  "path": "v1alpha1/{+name}",
                  "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/operations\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."
                },
                "delete": {
                  "id": "redis.projects.locations.operations.delete",
                  "path": "v1alpha1/{+name}",
                  "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource to be deleted.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/operations\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`."
                },
                "cancel": {
                  "id": "redis.projects.locations.operations.cancel",
                  "path": "v1alpha1/{+name}:cancel",
                  "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
                  "httpMethod": "POST",
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource to be cancelled.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/operations\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."
                }
              }
            },
            "instances": {
              "methods": {
                "list": {
                  "id": "redis.projects.locations.instances.list",
                  "path": "v1alpha1/{+parent}/instances",
                  "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/instances",
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "description": "Required. The resource name of the instance location using the form: `projects\/{project_id}\/locations\/{location_id}` where `location_id` refers to a GCP region.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "The maximum number of items to return. If not specified, a default value of 1000 will be used by the service. Regardless of the page_size value, the response may include a partial list and a caller should only rely on response's next_page_token to determine if there are more instances left to be queried.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "The next_page_token value returned from a previous List request, if any.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListInstancesResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Lists all Redis instances owned by a project in either the specified location (region) or all locations. The location should have the following format: * `projects\/{project_id}\/locations\/{location_id}` If `location_id` is specified as `-` (wildcard), then all regions available to the project are queried, and the results are aggregated."
                },
                "get": {
                  "id": "redis.projects.locations.instances.get",
                  "path": "v1alpha1/{+name}",
                  "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "Required. Redis instance resource name using the form: `projects\/{project_id}\/locations\/{location_id}\/instances\/{instance_id}` where `location_id` refers to a GCP region.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/instances\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Instance"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets the details of a specific Redis instance."
                },
                "getAuthString": {
                  "id": "redis.projects.locations.instances.getAuthString",
                  "path": "v1alpha1/{+name}/authString",
                  "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}/authString",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "Required. Redis instance resource name using the form: `projects\/{project_id}\/locations\/{location_id}\/instances\/{instance_id}` where `location_id` refers to a GCP region.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/instances\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "InstanceAuthString"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets the AUTH string for a Redis instance. If AUTH is not enabled for the instance the response will be empty. This information is not included in the details returned to GetInstance."
                },
                "reportInstanceHealth": {
                  "id": "redis.projects.locations.instances.reportInstanceHealth",
                  "path": "v1alpha1/{+instance}:reportInstanceHealth",
                  "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:reportInstanceHealth",
                  "httpMethod": "GET",
                  "parameters": {
                    "instance": {
                      "description": "Required. Name of Redis instance for which health report will be retrieved",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/instances\/[^\/]+$",
                      "type": "string"
                    },
                    "window": {
                      "description": "Optional. Window associated with the health report. Default: ONE_HOUR",
                      "location": "query",
                      "type": "string",
                      "enumDescriptions": [
                        "Invalid window",
                        "1 hour",
                        "1 day",
                        "1 week"
                      ],
                      "enum": [
                        "HEALTH_WINDOW_UNSPECIFIED",
                        "ONE_HOUR",
                        "ONE_DAY",
                        "ONE_WEEK"
                      ]
                    },
                    "reportTime": {
                      "description": "Optional. Timestamp for the health report. Default: latest",
                      "location": "query",
                      "type": "string",
                      "format": "google-datetime"
                    }
                  },
                  "parameterOrder": [
                    "instance"
                  ],
                  "response": {
                    "$ref": "ReportInstanceHealthResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets health report for an instance."
                },
                "create": {
                  "id": "redis.projects.locations.instances.create",
                  "path": "v1alpha1/{+parent}/instances",
                  "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/instances",
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "description": "Required. The resource name of the instance location using the form: `projects\/{project_id}\/locations\/{location_id}` where `location_id` refers to a GCP region.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "type": "string"
                    },
                    "instanceId": {
                      "description": "Required. The logical name of the Redis instance in the customer project with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-40 characters. * Must end with a number or a letter. * Must be unique within the customer project \/ location",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "Instance"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Creates a Redis instance based on the specified tier and memory size. By default, the instance is peered to the project's [default network](\/compute\/docs\/networks-and-firewalls#networks). The creation is executed asynchronously and callers may check the returned operation to track its progress. Once the operation is completed the Redis instance will be fully functional. The returned operation is automatically deleted after a few hours, so there is no need to call DeleteOperation."
                },
                "patch": {
                  "id": "redis.projects.locations.instances.patch",
                  "path": "v1alpha1/{+name}",
                  "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
                  "httpMethod": "PATCH",
                  "parameters": {
                    "name": {
                      "description": "Required. Unique name of the resource in this scope including project and location using the form: `projects\/{project_id}\/locations\/{location_id}\/instances\/{instance_id}` Note: Redis instances are managed and addressed at regional level so location_id here refers to a GCP region; however, users get to choose which specific zone (or collection of zones for cross zone instances) an instance should be provisioned in. Refer to [location_id] and [alternative_location_id] fields for more details.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/instances\/[^\/]+$",
                      "type": "string"
                    },
                    "updateMask": {
                      "description": "Required. Mask of fields to update. At least one path must be supplied in this field. The elements of the repeated paths field may only include these fields from Instance: * `display_name` * `labels` * `memory_size_gb` * `redis_config`",
                      "location": "query",
                      "type": "string",
                      "format": "google-fieldmask"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "Instance"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Updates the metadata and configuration of a specific Redis instance."
                },
                "upgrade": {
                  "id": "redis.projects.locations.instances.upgrade",
                  "path": "v1alpha1/{+name}:upgrade",
                  "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:upgrade",
                  "httpMethod": "POST",
                  "parameters": {
                    "name": {
                      "description": "Required. Redis instance resource name using the form: `projects\/{project_id}\/locations\/{location_id}\/instances\/{instance_id}` where `location_id` refers to a GCP region.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/instances\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "UpgradeInstanceRequest"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Upgrades Redis instance to the newer Redis version specified in the request."
                },
                "import": {
                  "id": "redis.projects.locations.instances.import",
                  "path": "v1alpha1/{+name}:import",
                  "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:import",
                  "httpMethod": "POST",
                  "parameters": {
                    "name": {
                      "description": "Required. Redis instance resource name using the form: `projects\/{project_id}\/locations\/{location_id}\/instances\/{instance_id}` where `location_id` refers to a GCP region.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/instances\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "ImportInstanceRequest"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Import a Redis RDB snapshot file from Cloud Storage into a Redis instance. Redis may stop serving during this operation. Instance state will be IMPORTING for entire operation. When complete, the instance will contain only data from the imported file. The returned operation is automatically deleted after a few hours, so there is no need to call DeleteOperation."
                },
                "export": {
                  "id": "redis.projects.locations.instances.export",
                  "path": "v1alpha1/{+name}:export",
                  "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:export",
                  "httpMethod": "POST",
                  "parameters": {
                    "name": {
                      "description": "Required. Redis instance resource name using the form: `projects\/{project_id}\/locations\/{location_id}\/instances\/{instance_id}` where `location_id` refers to a GCP region.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/instances\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "ExportInstanceRequest"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Redis will continue serving during this operation. The returned operation is automatically deleted after a few hours, so there is no need to call DeleteOperation."
                },
                "delete": {
                  "id": "redis.projects.locations.instances.delete",
                  "path": "v1alpha1/{+name}",
                  "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "description": "Required. Redis instance resource name using the form: `projects\/{project_id}\/locations\/{location_id}\/instances\/{instance_id}` where `location_id` refers to a GCP region.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/instances\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Deletes a specific Redis instance. Instance stops serving and data is deleted."
                }
              }
            }
          }
        }
      }
    }
  },
  "basePath": ""
}