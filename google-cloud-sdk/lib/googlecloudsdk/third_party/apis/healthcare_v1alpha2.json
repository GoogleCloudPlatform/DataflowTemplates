{
  "kind": "discovery#restDescription",
  "discoveryVersion": "v1",
  "id": "healthcare:v1alpha2",
  "name": "healthcare",
  "canonicalName": "Cloud Healthcare",
  "version": "v1alpha2",
  "revision": "0",
  "title": "Cloud Healthcare API",
  "description": "Manage, store, and access healthcare data in Google Cloud Platform.",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
   },
  "documentationLink": "https://cloud.google.com/healthcare",
  "protocol": "rest",
  "rootUrl": "https://healthcare.googleapis.com/",
  "mtlsRootUrl": "https://healthcare.mtls.googleapis.com/",
  "servicePath": "",
  "baseUrl": "https://healthcare.googleapis.com/",
  "batchPath": "batch",
  "version_module": true,
  "fullyEncodeReservedExpansion": true,
  "parameters": {
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "schemas": {
    "ListLocationsResponse": {
      "id": "ListLocationsResponse",
      "description": "The response message for Locations.ListLocations.",
      "type": "object",
      "properties": {
        "locations": {
          "description": "A list of locations that matches the specified filter in the request.",
          "type": "array",
          "items": {
            "$ref": "Location"
          }
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      }
    },
    "Location": {
      "id": "Location",
      "description": "A resource that represents Google Cloud Platform location.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Resource name for the location, which may vary between implementations. For example: `\"projects\/example-project\/locations\/us-east1\"`",
          "type": "string"
        },
        "locationId": {
          "description": "The canonical id for this location. For example: `\"us-east1\"`.",
          "type": "string"
        },
        "displayName": {
          "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\".",
          "type": "string"
        },
        "labels": {
          "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com\/region\": \"us-east1\"}",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Service-specific metadata. For example the available capacity at the given location.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        }
      }
    },
    "SetIamPolicyRequest": {
      "id": "SetIamPolicyRequest",
      "description": "Request message for `SetIamPolicy` method.",
      "type": "object",
      "properties": {
        "policy": {
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.",
          "$ref": "Policy"
        },
        "updateMask": {
          "description": "OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: \"bindings, etag\"`",
          "type": "string",
          "format": "google-fieldmask"
        }
      }
    },
    "Policy": {
      "id": "Policy",
      "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles\/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles\/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles\/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles\/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/docs\/).",
      "type": "object",
      "properties": {
        "version": {
          "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies).",
          "type": "integer",
          "format": "int32"
        },
        "bindings": {
          "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.",
          "type": "array",
          "items": {
            "$ref": "Binding"
          }
        },
        "auditConfigs": {
          "description": "Specifies cloud audit logging configuration for this policy.",
          "type": "array",
          "items": {
            "$ref": "AuditConfig"
          }
        },
        "etag": {
          "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "Binding": {
      "id": "Binding",
      "description": "Associates `members` with a `role`.",
      "type": "object",
      "properties": {
        "role": {
          "description": "Role that is assigned to `members`. For example, `roles\/viewer`, `roles\/editor`, or `roles\/owner`.",
          "type": "string"
        },
        "members": {
          "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. ",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "condition": {
          "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies).",
          "$ref": "Expr"
        }
      }
    },
    "Expr": {
      "id": "Expr",
      "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https:\/\/github.com\/google\/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() < 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
      "type": "object",
      "properties": {
        "expression": {
          "description": "Textual representation of an expression in Common Expression Language syntax.",
          "type": "string"
        },
        "title": {
          "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.",
          "type": "string"
        },
        "description": {
          "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.",
          "type": "string"
        },
        "location": {
          "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.",
          "type": "string"
        }
      }
    },
    "AuditConfig": {
      "id": "AuditConfig",
      "description": "Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { \"audit_configs\": [ { \"service\": \"allServices\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" }, { \"log_type\": \"ADMIN_READ\" } ] }, { \"service\": \"sampleservice.googleapis.com\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\" }, { \"log_type\": \"DATA_WRITE\", \"exempted_members\": [ \"user:aliya@example.com\" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.",
      "type": "object",
      "properties": {
        "service": {
          "description": "Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.",
          "type": "string"
        },
        "auditLogConfigs": {
          "description": "The configuration for logging of each type of permission.",
          "type": "array",
          "items": {
            "$ref": "AuditLogConfig"
          }
        }
      }
    },
    "AuditLogConfig": {
      "id": "AuditLogConfig",
      "description": "Provides the configuration for logging a type of permissions. Example: { \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.",
      "type": "object",
      "properties": {
        "logType": {
          "description": "The log type that this config enables.",
          "type": "string",
          "enumDescriptions": [
            "Default case. Should never be this.",
            "Admin reads. Example: CloudIAM getIamPolicy",
            "Data writes. Example: CloudSQL Users create",
            "Data reads. Example: CloudSQL Users list"
          ],
          "enum": [
            "LOG_TYPE_UNSPECIFIED",
            "ADMIN_READ",
            "DATA_WRITE",
            "DATA_READ"
          ]
        },
        "exemptedMembers": {
          "description": "Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TestIamPermissionsRequest": {
      "id": "TestIamPermissionsRequest",
      "description": "Request message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as '*' or 'storage.*') are not allowed. For more information see [IAM Overview](https:\/\/cloud.google.com\/iam\/docs\/overview#permissions).",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TestIamPermissionsResponse": {
      "id": "TestIamPermissionsResponse",
      "description": "Response message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ListOperationsResponse": {
      "id": "ListOperationsResponse",
      "description": "The response message for Operations.ListOperations.",
      "type": "object",
      "properties": {
        "operations": {
          "description": "A list of operations that matches the specified filter in the request.",
          "type": "array",
          "items": {
            "$ref": "Operation"
          }
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      }
    },
    "Operation": {
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations\/{unique_id}`.",
          "type": "string"
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "response": {
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`\/`Create`\/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        }
      }
    },
    "Status": {
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https:\/\/github.com\/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https:\/\/cloud.google.com\/apis\/design\/errors).",
      "type": "object",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        }
      }
    },
    "CancelOperationRequest": {
      "id": "CancelOperationRequest",
      "description": "The request message for Operations.CancelOperation.",
      "type": "object",
      "properties": {
      }
    },
    "Empty": {
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object",
      "properties": {
      }
    },
    "AnnotationStore": {
      "id": "AnnotationStore",
      "description": "An Annotation store that can store annotation resources such as labels and tags for text, image and audio.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Resource name of the Annotation store, of the form `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/annotationStores\/{annotation_store_id}`.",
          "type": "string"
        },
        "labels": {
          "description": "Optional. User-supplied key-value pairs used to organize Annotation stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ListAnnotationStoresResponse": {
      "id": "ListAnnotationStoresResponse",
      "description": "Lists the Annotation stores in the given dataset.",
      "type": "object",
      "properties": {
        "annotationStores": {
          "description": "The returned Annotation stores. Won't be more Annotation stores than the value of page_size in the request.",
          "type": "array",
          "items": {
            "$ref": "AnnotationStore"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results or empty if there are no more results in the list.",
          "type": "string"
        }
      }
    },
    "ImportAnnotationsRequest": {
      "id": "ImportAnnotationsRequest",
      "description": "Request to import Annotations. The Annotations to be imported must have client-supplied resource names which indicate the annotation resource. The import operation is not atomic. If a failure occurs, any annotations already imported are not removed.",
      "type": "object",
      "properties": {
        "gcsSource": {
          "$ref": "GoogleCloudHealthcareV1alpha2AnnotationGcsSource"
        }
      }
    },
    "GoogleCloudHealthcareV1alpha2AnnotationGcsSource": {
      "id": "GoogleCloudHealthcareV1alpha2AnnotationGcsSource",
      "description": "Specifies the configuration for importing data from Cloud Storage.",
      "type": "object",
      "properties": {
        "uri": {
          "description": "Points to a Cloud Storage URI containing file(s) with content only. The URI must be in the following format: `gs:\/\/{bucket_id}\/{object_id}`. The URI can include wildcards in `object_id` and thus identify multiple files. Supported wildcards: '*' to match 0 or more non-separator characters '**' to match 0 or more characters (including separators). Must be used at the end of a path and with no other wildcards in the path. Can also be used with a file extension (such as .dcm), which imports all files with the extension in the specified directory and its sub-directories. For example, `gs:\/\/my-bucket\/my-directory\/**.json` imports all files with .json extensions in `my-directory\/` and its sub-directories. '?' to match 1 character All other URI formats are invalid. Files matching the wildcard are expected to contain content only, no metadata.",
          "type": "string"
        }
      }
    },
    "ExportAnnotationsRequest": {
      "id": "ExportAnnotationsRequest",
      "description": "Request to export Annotations. The export operation is not atomic. If a failure occurs, any annotations already imported are not removed.",
      "type": "object",
      "properties": {
        "gcsDestination": {
          "description": "The Cloud Storage destination, which requires the `roles\/storage.objectAdmin` Cloud IAM role.",
          "$ref": "GoogleCloudHealthcareV1alpha2AnnotationGcsDestination"
        },
        "bigqueryDestination": {
          "description": "The BigQuery output destination, which requires two IAM roles: `roles\/bigquery.dataEditor` and `roles\/bigquery.jobUser`.",
          "$ref": "GoogleCloudHealthcareV1alpha2AnnotationBigQueryDestination"
        }
      }
    },
    "GoogleCloudHealthcareV1alpha2AnnotationGcsDestination": {
      "id": "GoogleCloudHealthcareV1alpha2AnnotationGcsDestination",
      "description": "The Cloud Storage location for export.",
      "type": "object",
      "properties": {
        "uriPrefix": {
          "description": "The Cloud Storage destination to export to. URI for a Cloud Storage directory where the server writes result files, in the format `gs:\/\/{bucket-id}\/{path\/to\/destination\/dir}`. If there is no trailing slash, the service appends one when composing the object path. The user is responsible for creating the Cloud Storage bucket referenced in `uri_prefix`.",
          "type": "string"
        }
      }
    },
    "GoogleCloudHealthcareV1alpha2AnnotationBigQueryDestination": {
      "id": "GoogleCloudHealthcareV1alpha2AnnotationBigQueryDestination",
      "description": "The BigQuery table for export.",
      "type": "object",
      "properties": {
        "tableUri": {
          "description": "BigQuery URI to a table, up to 2000 characters long, must be of the form bq:\/\/projectId.bqDatasetId.tableId.",
          "type": "string"
        },
        "force": {
          "description": "Use `write_disposition` instead. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.",
          "type": "boolean"
        },
        "schemaType": {
          "description": "Specifies the schema format to export.",
          "type": "string",
          "enumDescriptions": [
            "Same as SIMPLE.",
            "A flatterned version of Annotation."
          ],
          "enum": [
            "SCHEMA_TYPE_UNSPECIFIED",
            "SIMPLE"
          ]
        },
        "writeDisposition": {
          "description": "Determines whether existing tables in the destination dataset are overwritten or appended to. If a write_disposition is specified, the `force` parameter is ignored.",
          "type": "string",
          "enumDescriptions": [
            "Default behavior is the same as WRITE_EMPTY.",
            "Only export data if the destination table is empty.",
            "Erase all existing data in a table before writing the instances.",
            "Append data to the existing table."
          ],
          "enum": [
            "WRITE_DISPOSITION_UNSPECIFIED",
            "WRITE_EMPTY",
            "WRITE_TRUNCATE",
            "WRITE_APPEND"
          ]
        }
      }
    },
    "EvaluateAnnotationStoreRequest": {
      "id": "EvaluateAnnotationStoreRequest",
      "description": "Request to evaluate an Annotation store against a ground truth [Annotation store].",
      "type": "object",
      "properties": {
        "goldenStore": {
          "description": "The Annotation store to use as ground truth, in the format of `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/annotationStores\/{annotation_store_id}`.",
          "type": "string"
        },
        "bigqueryDestination": {
          "description": "The BigQuery table where the server writes the output. BigQueryDestination requires the `roles\/bigquery.dataEditor` and `roles\/bigquery.jobUser` Cloud IAM roles.",
          "$ref": "GoogleCloudHealthcareV1alpha2AnnotationBigQueryDestination"
        }
      }
    },
    "ConsentStore": {
      "id": "ConsentStore",
      "description": "Represents a Consent store.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Resource name of the Consent store, of the form `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/consentStores\/{consent_store_id}`.",
          "type": "string"
        },
        "labels": {
          "description": "User-supplied key-value pairs used to organize Consent stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ListConsentStoresResponse": {
      "id": "ListConsentStoresResponse",
      "description": "Lists the Consent stores in the given dataset.",
      "type": "object",
      "properties": {
        "consentStores": {
          "description": "The returned Consent stores. The maximum number of stores returned is determined by the value of page_size in the ListConsentStoresRequest.",
          "type": "array",
          "items": {
            "$ref": "ConsentStore"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results or empty if there are no more results in the list.",
          "type": "string"
        }
      }
    },
    "AttributeDefinition": {
      "id": "AttributeDefinition",
      "description": "A client-defined consent attribute.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Resource name of the attribute definition, of the form `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/consentStores\/{consent_store_id}\/attributeDefinitions\/{attribute_definition_id}`.",
          "type": "string"
        },
        "description": {
          "description": "A description of the attribute.",
          "type": "string"
        },
        "category": {
          "description": "Required. The category of the attribute. The value of this field cannot be changed after creation.",
          "type": "string",
          "enumDescriptions": [
            "No category specified. This option is invalid.",
            "Specify when this attribute captures properties of data resources. For example, data anonymity or data type.",
            "Specify when this attribute captures properties of access requests. For example, requester's role or requester's organization."
          ],
          "enum": [
            "CATEGORY_UNSPECIFIED",
            "RESOURCE",
            "REQUEST"
          ]
        },
        "allowedValues": {
          "description": "Required. Possible values for the attribute. The number of allowed values must not exceed 100. An empty list is invalid. The list can only be expanded after creation.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "consentDefaultValues": {
          "description": "Default values of the attribute in consents. If no default values are specified, it defaults to an empty value.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dataMappingDefaultValue": {
          "description": "Default value of the attribute in user data mappings. If no default value is specified, it defaults to an empty value. This field is only applicable to attributes of the category `RESOURCE`.",
          "type": "string"
        }
      }
    },
    "ListAttributeDefinitionsResponse": {
      "id": "ListAttributeDefinitionsResponse",
      "description": "Lists the Attribute definitions in the given Consent store.",
      "type": "object",
      "properties": {
        "attributeDefinitions": {
          "description": "The returned attribute definitions. The maximum number of attributes returned is determined by the value of page_size in the ListAttributeDefinitionsRequest.",
          "type": "array",
          "items": {
            "$ref": "AttributeDefinition"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results or empty if there are no more results in the list.",
          "type": "string"
        }
      }
    },
    "ConsentArtifact": {
      "id": "ConsentArtifact",
      "description": "Proof of an end user's consent.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Resource name of the Consent artifact, of the form `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/consentStores\/{consent_store_id}\/consentArtifacts\/{consent_artifact_id}`.",
          "type": "string"
        },
        "userId": {
          "description": "Required. User's UUID provided by the client.",
          "type": "string"
        },
        "userSignature": {
          "description": "User's signature.",
          "$ref": "Signature"
        },
        "guardianSignature": {
          "description": "A signature from guardian.",
          "$ref": "Signature"
        },
        "witnessSignature": {
          "description": "A signature from a witness.",
          "$ref": "Signature"
        },
        "consentContentScreenshots": {
          "description": "Screenshots of the consent content.",
          "type": "array",
          "items": {
            "$ref": "Image"
          }
        },
        "consentContentVersion": {
          "description": "An string indicating the version of the consent content.",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata associated with the consent artifact. For example, the consent locale or user agent version.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Signature": {
      "id": "Signature",
      "description": "User signature.",
      "type": "object",
      "properties": {
        "userId": {
          "description": "User's UUID provided by the client.",
          "type": "string"
        },
        "image": {
          "description": "An image of the user's signature.",
          "$ref": "Image"
        },
        "metadata": {
          "description": "Metadata associated with the user's signature. For example, the user's name or the user's title.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "signatureTime": {
          "description": "Timestamp of the signature.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "Image": {
      "id": "Image",
      "description": "An image.",
      "type": "object",
      "properties": {
        "rawBytes": {
          "description": "Image content represented as a stream of bytes. This field is populated when returned in GetConsentArtifact response, but not included in CreateConsentArtifact and ListConsentArtifact response.",
          "type": "string",
          "format": "byte"
        },
        "gcsUri": {
          "description": "Input only. Points to a Cloud Storage URI containing the image. The URI must be in the following format: `gs:\/\/{bucket_id}\/{object_id}`. The Cloud Healthcare API service account must have the `roles\/storage.objectViewer` Cloud IAM role for this Cloud Storage location. The image at this URI is copied to a Cloud Storage location managed by the Cloud Healthcare API. Responses to image fetching requests return the image in raw_bytes.",
          "type": "string"
        }
      }
    },
    "ListConsentArtifactsResponse": {
      "id": "ListConsentArtifactsResponse",
      "description": "Lists the Consent artifacts in the given Consent store.",
      "type": "object",
      "properties": {
        "consentArtifacts": {
          "description": "The returned consent artifacts. The maximum number of artifacts returned is determined by the value of page_size in the ListConsentArtifactsRequest.",
          "type": "array",
          "items": {
            "$ref": "ConsentArtifact"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results or empty if there are no more results in the list.",
          "type": "string"
        }
      }
    },
    "Consent": {
      "id": "Consent",
      "description": "Represents an end user's consent.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Resource name of the Consent, of the form `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/consentStores\/{consent_store_id}\/consents\/{consent_id}`.",
          "type": "string"
        },
        "userId": {
          "description": "Required. User's UUID provided by the client.",
          "type": "string"
        },
        "policies": {
          "description": "Represents an end user's consent in terms of the resources that can be accessed and under what conditions.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudHealthcareV1alpha2ConsentPolicy"
          }
        },
        "consentArtifact": {
          "description": "Required. The resource name of the consent artifact that contains proof of the end user's consent, of the form `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/consentStores\/{consent_store_id}\/consentArtifacts\/{consent_artifact_id}`.",
          "type": "string"
        },
        "state": {
          "description": "Indicates the current state of this consent.",
          "type": "string",
          "enumDescriptions": [
            "No state specified.",
            "The consent is active and is considered when evaluating user's consent on resources.",
            "When a consent is updated, the current version is archived and a new one is created with active state.",
            "A revoked consent is not considered when evaluating user's consent on resources."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "ACTIVE",
            "ARCHIVED",
            "REVOKED"
          ]
        }
      }
    },
    "GoogleCloudHealthcareV1alpha2ConsentPolicy": {
      "id": "GoogleCloudHealthcareV1alpha2ConsentPolicy",
      "description": "Represents an end user's consent in terms of the resources that can be accessed and under what conditions.",
      "type": "object",
      "properties": {
        "resourceAttributes": {
          "description": "The data resources that this policy applies to. A data resource is a match if it matches all the attributes listed here.",
          "type": "array",
          "items": {
            "$ref": "Attribute"
          }
        },
        "authorizationRule": {
          "description": "The request conditions to meet to grant access. In addition to any supported comparison operators, authorization rules may have `IN` operator as well as at most 10 logical operators that are limited to `AND` (`&&`), `OR` (`||`).",
          "$ref": "Expr"
        }
      }
    },
    "Attribute": {
      "id": "Attribute",
      "description": "An attribute value for a consent or data mapping. Each Attribute must have a corresponding AttributeDefinition in the consent store that defines the default and allowed values.",
      "type": "object",
      "properties": {
        "attributeDefinitionId": {
          "description": "Indicates the name of an attribute defined at the consent store.",
          "type": "string"
        },
        "values": {
          "description": "The value of the attribute. Must be an acceptable value as defined in the consent store. For example, if the consent store defines \"data type\" with acceptable values \"questionnaire\" and \"step-count\", when the attribute name is data type, this field must contain one of those values.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ListConsentsResponse": {
      "id": "ListConsentsResponse",
      "description": "Lists the Consents in the given Consent store.",
      "type": "object",
      "properties": {
        "consents": {
          "description": "The returned consents. The maximum number of consents returned is determined by the value of page_size in the ListConsentsRequest.",
          "type": "array",
          "items": {
            "$ref": "Consent"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results or empty if there are no more results in the list.",
          "type": "string"
        }
      }
    },
    "RevokeConsentRequest": {
      "id": "RevokeConsentRequest",
      "description": "Revokes the latest revision of the specified Consent by committing a new revision with `state` updated to `REVOKED`. If the latest revision of the given consent is in the `REVOKED` state, no new revision is committed.",
      "type": "object",
      "properties": {
      }
    },
    "UserDataMapping": {
      "id": "UserDataMapping",
      "description": "Maps a user data entry to its end user and Attributes.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Resource name of the User data mapping, of the form `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/consentStores\/{consent_store_id}\/userDataMappings\/{user_data_mapping_id}`.",
          "type": "string"
        },
        "dataId": {
          "description": "Required. A unique identifier for the mapped data.",
          "type": "string"
        },
        "userId": {
          "description": "Required. User's UUID provided by the client.",
          "type": "string"
        },
        "resourceAttributes": {
          "description": "Attributes of end user data. Each attribute can have exactly one value specified. Only explicitly set attributes are displayed here. Attribute definitions with defaults set implicitly apply to these User data mappings. Attributes listed here must be single valued, that is, exactly one value is specified for the field \"values\" in each Attribute.",
          "type": "array",
          "items": {
            "$ref": "Attribute"
          }
        },
        "archived": {
          "description": "Output only. Indicates whether this data mapping is archived.",
          "readOnly": true,
          "type": "boolean"
        },
        "archiveTime": {
          "description": "Output only. Indicates the time when this data mapping was archived.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "ListUserDataMappingsResponse": {
      "id": "ListUserDataMappingsResponse",
      "description": "Lists the User data mappings in the given Consent store.",
      "type": "object",
      "properties": {
        "userDataMappings": {
          "description": "The returned user data mappings. The maximum number of user data mappings returned is determined by the value of page_size in the ListUserDataMappingsRequest.",
          "type": "array",
          "items": {
            "$ref": "UserDataMapping"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results or empty if there are no more results in the list.",
          "type": "string"
        }
      }
    },
    "ArchiveUserDataMappingRequest": {
      "id": "ArchiveUserDataMappingRequest",
      "description": "Archives the specified User data mapping.",
      "type": "object",
      "properties": {
      }
    },
    "ArchiveUserDataMappingResponse": {
      "id": "ArchiveUserDataMappingResponse",
      "description": "Archives the specified User data mapping.",
      "type": "object",
      "properties": {
      }
    },
    "CheckDataAccessRequest": {
      "id": "CheckDataAccessRequest",
      "description": "Checks if a particular data_id of a User data mapping in the given Consent store is consented for a given use.",
      "type": "object",
      "properties": {
        "dataId": {
          "description": "The unique identifier of the data to check access for. It must exist in the given `consent_store`.",
          "type": "string"
        },
        "requestAttributes": {
          "description": "The values of request attributes associated with this access request.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "consentList": {
          "description": "The Consents to evaluate the access request against. They must have the same `user_id` as the data to check access for, exist in the current `consent_store`, and can have a `state` of either `ACTIVE` or `DRAFT`. A maximum of 100 consents can be provided here.",
          "$ref": "ConsentList"
        },
        "responseView": {
          "description": "The view for CheckDataAccessResponse.",
          "type": "string",
          "enumDescriptions": [
            "No response view specified. The API will default to the BASIC view.",
            "Only the `consented` field is populated in CheckDataAccessResponse.",
            "All fields within CheckDataAccessResponse are populated. When set to `FULL`, all `ACTIVE` consents are evaluated even if a matching policy is found during evaluation."
          ],
          "enum": [
            "RESPONSE_VIEW_UNSPECIFIED",
            "BASIC",
            "FULL"
          ]
        }
      }
    },
    "ConsentList": {
      "id": "ConsentList",
      "description": "List of resource names of Consent resources.",
      "type": "object",
      "properties": {
        "consents": {
          "description": "The resource names of the Consents to evaluate against, of the form `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/consentStores\/{consent_store_id}\/consents\/{consent_id}`.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CheckDataAccessResponse": {
      "id": "CheckDataAccessResponse",
      "description": "Checks if a particular data_id of a User data mapping in the given Consent store is consented for a given use.",
      "type": "object",
      "properties": {
        "consented": {
          "description": "Whether the requested data is consented for the given use.",
          "type": "boolean"
        },
        "consentDetails": {
          "description": "The resource names of all evaluated Consents mapped to their evaluation.",
          "type": "object",
          "additionalProperties": {
            "$ref": "ConsentEvaluation"
          }
        }
      }
    },
    "ConsentEvaluation": {
      "id": "ConsentEvaluation",
      "description": "The detailed evaluation of a particular Consent.",
      "type": "object",
      "properties": {
        "evaluationResult": {
          "description": "The evaluation result.",
          "type": "string",
          "enumDescriptions": [
            "No evaluation result specified. This option is invalid.",
            "The consent is not applicable to the requested access determination. For example, it does not belong to the end user who owns the data for which the access determination is requested, or it has a `state` of `REVOKED`.",
            "The consent does not have a policy with matching `resource_attributes` as the data.",
            "The consent has at least one policy with matching `resource_attributes` as the data, but none with a satisfied `authorization_rule`.",
            "The consent has at least one policy with matching `resource_attributes` as the data and a satisfied `authorization_rule`."
          ],
          "enum": [
            "EVALUATION_RESULT_UNSPECIFIED",
            "NOT_APPLICABLE",
            "NO_MATCHING_POLICY",
            "NO_SATISFIED_POLICY",
            "HAS_SATISFIED_POLICY"
          ]
        }
      }
    },
    "QueryAccessibleDataRequest": {
      "id": "QueryAccessibleDataRequest",
      "description": "Queries all data_ids that are consented for a given use in the given Consent store and writes them to a specified destination. The returned Operation includes a progress counter for the number of User data mappings processed. Errors are logged to Cloud Logging (see [Viewing logs] (\/healthcare\/docs\/how-tos\/logging) and [QueryAccessibleData] for a sample log entry).",
      "type": "object",
      "properties": {
        "gcsDestination": {
          "description": "The Cloud Storage destination. The Cloud Healthcare API service account must have the `roles\/storage.objectAdmin` Cloud IAM role for this Cloud Storage location.",
          "$ref": "GoogleCloudHealthcareV1alpha2ConsentGcsDestination"
        },
        "resourceAttributes": {
          "description": "The values of resources attributes associated with the type of data being requested. If no values are specified, then all data types are included in the output.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "requestAttributes": {
          "description": "The values of request attributes associated with this access request.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "GoogleCloudHealthcareV1alpha2ConsentGcsDestination": {
      "id": "GoogleCloudHealthcareV1alpha2ConsentGcsDestination",
      "description": "The Cloud Storage location for export.",
      "type": "object",
      "properties": {
        "uriPrefix": {
          "description": "URI for a Cloud Storage directory where the server writes result files, in the format `gs:\/\/{bucket-id}\/{path\/to\/destination\/dir}`. If there is no trailing slash, the service appends one when composing the object path. The user is responsible for creating the Cloud Storage bucket and directory referenced in `uri_prefix`.",
          "type": "string"
        }
      }
    },
    "EvaluateUserConsentsRequest": {
      "id": "EvaluateUserConsentsRequest",
      "description": "Evaluate an end user's Consents for all matching User data mappings.",
      "type": "object",
      "properties": {
        "userId": {
          "description": "Required. User ID to evaluate consents for.",
          "type": "string"
        },
        "resourceAttributes": {
          "description": "The values of resources attributes associated with the type of data being requested. If no values are specified, then all data types are queried.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "requestAttributes": {
          "description": "The values of request attributes associated with this access request.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "consentList": {
          "description": "The resource names of the consents to evaluate against. Consents must be in the current `consent_store` and belong to the current `user_id`. Consents can be either active or draft. If this field is empty, the default behavior is to use all active consents that belong to `user_id`. A maximum of 100 consents can be provided here.",
          "$ref": "ConsentList"
        },
        "responseView": {
          "description": "The view for EvaluateUserConsentsResponse.",
          "type": "string",
          "enumDescriptions": [
            "No response view specified. The API will default to the BASIC view.",
            "Only the `consented` field is populated in the response.",
            "All fields within the response are populated. When set to `FULL`, all `ACTIVE` consents are evaluated even if a matching policy is found during evaluation."
          ],
          "enum": [
            "RESPONSE_VIEW_UNSPECIFIED",
            "BASIC",
            "FULL"
          ]
        },
        "pageSize": {
          "description": "Limit on the number of user data mappings to return in a single response. If zero the default page size of 100 is used.",
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "description": "Token to retrieve the next page of results to get the first page.",
          "type": "string"
        }
      }
    },
    "EvaluateUserConsentsResponse": {
      "id": "EvaluateUserConsentsResponse",
      "description": "Evaluate an end user's Consents for all matching User data mappings.",
      "type": "object",
      "properties": {
        "results": {
          "description": "The consent evaluation result for each `data_id`.",
          "type": "array",
          "items": {
            "$ref": "Result"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results or empty if there are no more results in the list. This token is valid for 72 hours after it is created.",
          "type": "string"
        }
      }
    },
    "Result": {
      "id": "Result",
      "description": "The consent evaluation result for a single `data_id`.",
      "type": "object",
      "properties": {
        "dataId": {
          "description": "The unique identifier of the data the consents were checked for.",
          "type": "string"
        },
        "consented": {
          "description": "Whether the requested data is consented for the given use.",
          "type": "boolean"
        },
        "consentDetails": {
          "description": "The resource names of all evaluated Consents mapped to their evaluation.",
          "type": "object",
          "additionalProperties": {
            "$ref": "ConsentEvaluation"
          }
        }
      }
    },
    "HttpBody": {
      "id": "HttpBody",
      "description": "Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { \/\/ A unique request id. string request_id = 1; \/\/ The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.",
      "type": "object",
      "properties": {
        "contentType": {
          "description": "The HTTP Content-Type header value specifying the content type of the body.",
          "type": "string"
        },
        "data": {
          "description": "The HTTP request\/response body as raw binary.",
          "type": "string",
          "format": "byte"
        },
        "extensions": {
          "description": "Application specific response metadata. Must be set in the first response for streaming APIs.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        }
      }
    },
    "Dataset": {
      "id": "Dataset",
      "description": "A message representing a health dataset. A health dataset represents a collection of healthcare data pertaining to one or more patients. This may include multiple modalities of healthcare data, such as electronic medical records or medical imaging data.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Resource name of the dataset, of the form `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}`.",
          "type": "string"
        },
        "timeZone": {
          "description": "The default timezone used by this dataset. Must be a either a valid IANA time zone name such as \"America\/New_York\" or empty, which defaults to UTC. This is used for parsing times in resources, such as HL7v2 messages, where no explicit timezone is specified.",
          "type": "string"
        },
        "storageOptions": {
          "description": "StorageOptions defines the options for storing datasets.",
          "$ref": "StorageOptions"
        }
      }
    },
    "StorageOptions": {
      "id": "StorageOptions",
      "description": "StorageOptions defines the options for storing datasets.",
      "type": "object",
      "properties": {
        "defaultBlobStorageClass": {
          "description": "The default storage class for Blobs stored in this dataset. Applies to DICOM objects only.",
          "type": "string",
          "enumDescriptions": [
            "If unspecified in CreateDataset, the StorageClass defaults to STANDARD. If unspecified in UpdateDataset and the StorageClass is set in the field mask, an InvalidRequest error is thrown.",
            "Stores the Object in Blob Standard Storage: https:\/\/cloud.google.com\/storage\/docs\/storage-classes#standard",
            "Stores the Object in Blob Nearline Storage: https:\/\/cloud.google.com\/storage\/docs\/storage-classes#nearline",
            "Stores the Object in Blob Coldline Storage: https:\/\/cloud.google.com\/storage\/docs\/storage-classes#coldline",
            "Stores the Object in Blob Archive Storage: https:\/\/cloud.google.com\/storage\/docs\/storage-classes#archive"
          ],
          "enum": [
            "BLOB_STORAGE_CLASS_UNSPECIFIED",
            "STANDARD",
            "NEARLINE",
            "COLDLINE",
            "ARCHIVE"
          ]
        }
      }
    },
    "ListDatasetsResponse": {
      "id": "ListDatasetsResponse",
      "description": "Lists the available datasets.",
      "type": "object",
      "properties": {
        "datasets": {
          "description": "The first page of datasets.",
          "type": "array",
          "items": {
            "$ref": "Dataset"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        }
      }
    },
    "DeidentifyDatasetRequest": {
      "id": "DeidentifyDatasetRequest",
      "description": "Redacts identifying information from the specified dataset.",
      "type": "object",
      "properties": {
        "destinationDataset": {
          "description": "The name of the dataset resource to create and write the redacted data to. For example, `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}`. * The destination dataset must not exist. * The destination dataset must be in the same project and location as the source dataset. De-identifying data across multiple projects or locations is not supported.",
          "type": "string"
        },
        "config": {
          "description": "Deidentify configuration.",
          "$ref": "DeidentifyConfig"
        }
      }
    },
    "DeidentifyConfig": {
      "id": "DeidentifyConfig",
      "description": "Configures de-id options specific to different types of content. Each submessage customizes the handling of an https:\/\/tools.ietf.org\/html\/rfc6838 media type or subtype. Configs are applied in a nested manner at runtime.",
      "type": "object",
      "properties": {
        "dicom": {
          "description": "Configures de-id of application\/DICOM content.",
          "$ref": "DicomConfig"
        },
        "fhir": {
          "description": "Configures de-id of application\/FHIR content.",
          "$ref": "FhirConfig"
        },
        "image": {
          "description": "Configures the de-identification of image pixels in the source_dataset.",
          "$ref": "ImageConfig"
        },
        "annotation": {
          "description": "Configures how annotations (such as the location and infoTypes of sensitive information) are created during de-identification. If unspecified, no annotations are created.",
          "$ref": "AnnotationConfig"
        },
        "text": {
          "description": "Configures the de-identification of text in `source_dataset`.",
          "$ref": "TextConfig"
        }
      }
    },
    "DicomConfig": {
      "id": "DicomConfig",
      "description": "Specifies the parameters needed for the de-identification of DICOM stores.",
      "type": "object",
      "properties": {
        "keepList": {
          "description": "List of tags to keep. Remove all other tags.",
          "$ref": "TagFilterList"
        },
        "removeList": {
          "description": "List of tags to remove. Keep all other tags.",
          "$ref": "TagFilterList"
        },
        "filterProfile": {
          "description": "Tag filtering profile that determines the tags to keep or remove.",
          "type": "string",
          "enumDescriptions": [
            "No tag filtration profile provided. Same as KEEP_ALL_PROFILE.",
            "Keep only tags required to produce valid DICOM.",
            "Remove tags based on DICOM Standard's [Attribute Confidentiality Basic Profile (DICOM Standard Edition 2018e)] (http:\/\/dicom.nema.org\/medical\/dicom\/2018e\/output\/chtml\/part15\/chapter_E.html).",
            "Keep all tags.",
            "Inspects within tag contents (including tags nested in a sequence) and replaces sensitive text. The process can be configured using the TextConfig. Applies to all tags with the following Value Representation names: AE, LO, LT, PN, SH, ST, UC, UT, DA, DT, AS."
          ],
          "enum": [
            "TAG_FILTER_PROFILE_UNSPECIFIED",
            "MINIMAL_KEEP_LIST_PROFILE",
            "ATTRIBUTE_CONFIDENTIALITY_BASIC_PROFILE",
            "KEEP_ALL_PROFILE",
            "DEIDENTIFY_TAG_CONTENTS"
          ]
        }
      }
    },
    "TagFilterList": {
      "id": "TagFilterList",
      "description": "List of tags to filter.",
      "type": "object",
      "properties": {
        "tags": {
          "description": "Tags to filter. Tags must be DICOM Data Elements, File Meta Elements, or Directory Structuring Elements, as defined in the [Registry of DICOM Data Elements] (http:\/\/dicom.nema.org\/medical\/dicom\/current\/output\/html\/part06.html#table_6-1). They can be provided by \"Keyword\" or \"Tag\". For example, \"PatientID\", \"00100010\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FhirConfig": {
      "id": "FhirConfig",
      "description": "Specifies how to handle the de-identification of a FHIR store.",
      "type": "object",
      "properties": {
        "fieldMetadataList": {
          "description": "Specifies FHIR paths to match and how to transform them. Any field that is not matched by a FieldMetadata is passed through to the output dataset unmodified. All extensions are removed in the output. If a field can be matched by more than one FieldMetadata, the first FieldMetadata.Action is applied.",
          "type": "array",
          "items": {
            "$ref": "FieldMetadata"
          }
        }
      }
    },
    "FieldMetadata": {
      "id": "FieldMetadata",
      "description": "Specifies FHIR paths to match and how to handle the de-identification of matching fields.",
      "type": "object",
      "properties": {
        "paths": {
          "description": "List of paths to FHIR fields to redact. Each path is a period-separated list where each component is either a field name or FHIR type name. All types begin with an upper case letter. For example, the resource field \"Patient.Address.city\", which uses a string type, can be matched by \"Patient.Address.String\". Path also supports partial matching. For example, \"Patient.Address.city\" can be matched by \"Address.city\" (Patient omitted). Partial matching and type matching can be combined, for example \"Patient.Address.city\" can be matched by \"Address.String\". For \"choice\" types (those defined in the FHIR spec with the form: field[x]), use two separate components. For example, \"deceasedAge.unit\" is matched by \"Deceased.Age.unit\". Supported types are: AdministrativeGenderCode, Code, Date, DateTime, Decimal, HumanName, Id, LanguageCode, Markdown, Oid, String, Uri, Uuid, Xhtml. Base64Binary is also supported, but may only be kept as-is or have all the content removed. The sub-type for HumanName(for example HumanName.given, HumanName.family) can be omitted.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "action": {
          "description": "Deidentify action for one field.",
          "type": "string",
          "enumDescriptions": [
            "No action specified.",
            "Transform the entire field based on transformations specified in TextConfig. When the specified transformation cannot be applied to a field (for example, a Crypto Hash transformation cannot be applied to a FHIR Date field), RedactConfig is used.",
            "Inspect and transform any found PHI. When `AnnotationConfig` is provided, annotations of PHI are generated, except for Date and Datetime.",
            "Do not transform."
          ],
          "enum": [
            "ACTION_UNSPECIFIED",
            "TRANSFORM",
            "INSPECT_AND_TRANSFORM",
            "DO_NOT_TRANSFORM"
          ]
        }
      }
    },
    "ImageConfig": {
      "id": "ImageConfig",
      "description": "Specifies how to handle the de-identification of image pixels.",
      "type": "object",
      "properties": {
        "textRedactionMode": {
          "description": "Determines how to redact text from images.",
          "type": "string",
          "enumDescriptions": [
            "No text redaction specified. Same as REDACT_NO_TEXT.",
            "Redact all text.",
            "Redact sensitive text.",
            "Do not redact text."
          ],
          "enum": [
            "TEXT_REDACTION_MODE_UNSPECIFIED",
            "REDACT_ALL_TEXT",
            "REDACT_SENSITIVE_TEXT",
            "REDACT_NO_TEXT"
          ]
        }
      }
    },
    "AnnotationConfig": {
      "id": "AnnotationConfig",
      "description": "Specifies how to store annotations during de-identification operations.",
      "type": "object",
      "properties": {
        "annotationStoreName": {
          "description": "The name of the annotation store, in the form `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/annotationStores\/{annotation_store_id}`. * The destination annotation store must be in the same project and location as the source data. De-identifying data across multiple projects or locations is not supported. * The destination annotation store must exist when using DeidentifyDicomStore or DeidentifyFhirStore. DeidentifyDataset automatically creates the destination annotation store.",
          "type": "string"
        },
        "storeQuote": {
          "description": "If set to true, sensitive text is included in SensitiveTextAnnotation of Annotation.",
          "type": "boolean"
        }
      }
    },
    "TextConfig": {
      "id": "TextConfig",
      "description": "Configures how to transform sensitive text `InfoTypes`.",
      "type": "object",
      "properties": {
        "transformations": {
          "description": "The transformations to apply to the detected data.",
          "type": "array",
          "items": {
            "$ref": "InfoTypeTransformation"
          }
        }
      }
    },
    "InfoTypeTransformation": {
      "id": "InfoTypeTransformation",
      "description": "A transformation to apply to text that is identified as a specific info_type.",
      "type": "object",
      "properties": {
        "infoTypes": {
          "description": "`InfoTypes` to apply this transformation to. If this is not specified, this transformation becomes the default transformation, and is used for any `info_type` that is not specified in another transformation.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "redactConfig": {
          "description": "Config for text redaction.",
          "$ref": "RedactConfig"
        },
        "characterMaskConfig": {
          "description": "Config for character mask.",
          "$ref": "CharacterMaskConfig"
        },
        "dateShiftConfig": {
          "description": "Config for date shift.",
          "$ref": "DateShiftConfig"
        },
        "cryptoHashConfig": {
          "description": "Config for crypto hash.",
          "$ref": "CryptoHashConfig"
        },
        "replaceWithInfoTypeConfig": {
          "description": "Config for replace with InfoType.",
          "$ref": "ReplaceWithInfoTypeConfig"
        }
      }
    },
    "RedactConfig": {
      "id": "RedactConfig",
      "description": "Defines how to redact sensitive values. Default behavior is erase. For example, \"My name is Jane.\" becomes \"My name is .\"",
      "type": "object",
      "properties": {
      }
    },
    "CharacterMaskConfig": {
      "id": "CharacterMaskConfig",
      "description": "Masks a string by replacing its characters with a fixed character.",
      "type": "object",
      "properties": {
        "maskingCharacter": {
          "description": "Character to mask the sensitive values. If not supplied, defaults to \"*\".",
          "type": "string"
        }
      }
    },
    "DateShiftConfig": {
      "id": "DateShiftConfig",
      "description": "Shifts a date forward or backward in time by a random amount that is consistent for a given patient and crypto key combination.",
      "type": "object",
      "properties": {
        "cryptoKey": {
          "description": "An AES 128\/192\/256 bit key. Causes the shift to be computed based on this key and the patient ID. A default key is generated for each de-identification operation and is used when crypto_key is not specified.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "CryptoHashConfig": {
      "id": "CryptoHashConfig",
      "description": "Pseudonymization method that generates surrogates using cryptographic hashing. Uses SHA-256. Outputs a base64-encoded representation of the hashed output. For example, `L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=`.",
      "type": "object",
      "properties": {
        "cryptoKey": {
          "description": "An AES 128\/192\/256 bit key. Causes the hash to be computed based on this key. A default key is generated for each Deidentify operation and is used when crypto_key is not specified.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "ReplaceWithInfoTypeConfig": {
      "id": "ReplaceWithInfoTypeConfig",
      "description": "When using the INSPECT_AND_TRANSFORM action, each match is replaced with the name of the `info_type`. For example, \"My name is Jane\" becomes \"My name is [PERSON_NAME].\" The TRANSFORM action is equivalent to redacting.",
      "type": "object",
      "properties": {
      }
    },
    "DicomStore": {
      "id": "DicomStore",
      "description": "Represents a DICOM store.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Resource name of the DICOM store, of the form `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/dicomStores\/{dicom_store_id}`.",
          "type": "string"
        },
        "notificationConfig": {
          "description": "Notification destination for new DICOM instances. Supplied by the client.",
          "$ref": "NotificationConfig"
        },
        "labels": {
          "description": "User-supplied key-value pairs used to organize DICOM stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "NotificationConfig": {
      "id": "NotificationConfig",
      "description": "Specifies where the server sends notifications upon changes to a data store.",
      "type": "object",
      "properties": {
        "pubsubTopic": {
          "description": "The [Cloud Pub\/Sub](https:\/\/cloud.google.com\/pubsub\/docs\/) topic that notifications of changes are published on. Supplied by the client. PubsubMessage.Data contains the resource name. PubsubMessage.MessageId is the ID of this message. It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message was published. Notifications are only sent if the topic is non-empty. [Topic names](https:\/\/cloud.google.com\/pubsub\/docs\/overview#names) must be scoped to a project. Cloud Healthcare API service account must have publisher permissions on the given Cloud Pub\/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification can't be published to Cloud Pub\/Sub, errors are logged to Cloud Logging (see [Viewing logs](\/healthcare\/docs\/how-tos\/logging)). If the number of errors exceeds a certain rate, some aren't submitted. Note that not all operations trigger notifications, see [Configuring Pub\/Sub notifications](https:\/\/cloud.google.com\/healthcare\/docs\/how-tos\/pubsub) for specific details.",
          "type": "string"
        }
      }
    },
    "ListDicomStoresResponse": {
      "id": "ListDicomStoresResponse",
      "description": "Lists the DICOM stores in the given dataset.",
      "type": "object",
      "properties": {
        "dicomStores": {
          "description": "The returned DICOM stores. Won't be more DICOM stores than the value of page_size in the request.",
          "type": "array",
          "items": {
            "$ref": "DicomStore"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results or empty if there are no more results in the list.",
          "type": "string"
        }
      }
    },
    "ImportDicomDataRequest": {
      "id": "ImportDicomDataRequest",
      "description": "Imports data into the specified DICOM store. Returns an error if any of the files to import are not DICOM files. This API accepts duplicate DICOM instances by ignoring the newly-pushed instance. It does not overwrite.",
      "type": "object",
      "properties": {
        "gcsSource": {
          "description": "Cloud Storage source data location and import configuration. The Cloud Healthcare Service Agent requires the `roles\/storage.objectViewer` Cloud IAM roles on the Cloud Storage location.",
          "$ref": "GoogleCloudHealthcareV1alpha2DicomGcsSource"
        }
      }
    },
    "GoogleCloudHealthcareV1alpha2DicomGcsSource": {
      "id": "GoogleCloudHealthcareV1alpha2DicomGcsSource",
      "description": "Specifies the configuration for importing data from Cloud Storage.",
      "type": "object",
      "properties": {
        "uri": {
          "description": "Points to a Cloud Storage URI containing file(s) with content only. The URI must be in the following format: `gs:\/\/{bucket_id}\/{object_id}`. The URI can include wildcards in `object_id` and thus identify multiple files. Supported wildcards: '*' to match 0 or more non-separator characters '**' to match 0 or more characters (including separators). Must be used at the end of a path and with no other wildcards in the path. Can also be used with a file extension (such as .dcm), which imports all files with the extension in the specified directory and its sub-directories. For example, `gs:\/\/my-bucket\/my-directory\/**.dcm` imports all files with .dcm extensions in `my-directory\/` and its sub-directories. '?' to match 1 character All other URI formats are invalid. Files matching the wildcard are expected to contain content only, no metadata.",
          "type": "string"
        }
      }
    },
    "ExportDicomDataRequest": {
      "id": "ExportDicomDataRequest",
      "description": "Exports data from the specified DICOM store. If a given resource, such as a DICOM object with the same SOPInstance UID, already exists in the output, it is overwritten with the version in the source dataset. Exported DICOM data persists when the DICOM store from which it was exported is deleted.",
      "type": "object",
      "properties": {
        "gcsDestination": {
          "description": "The Cloud Storage output destination. The Cloud Healthcare Service Agent requires the `roles\/storage.objectAdmin` Cloud IAM roles on the Cloud Storage location.",
          "$ref": "GoogleCloudHealthcareV1alpha2DicomGcsDestination"
        },
        "bigqueryDestination": {
          "description": "The BigQuery output destination. You can only export to a BigQuery dataset that's in the same project as the DICOM store you're exporting from. The Cloud Healthcare Service Agent requires two IAM roles on the BigQuery location: `roles\/bigquery.dataEditor` and `roles\/bigquery.jobUser`.",
          "$ref": "GoogleCloudHealthcareV1alpha2DicomBigQueryDestination"
        }
      }
    },
    "GoogleCloudHealthcareV1alpha2DicomGcsDestination": {
      "id": "GoogleCloudHealthcareV1alpha2DicomGcsDestination",
      "description": "The Cloud Storage location where the server writes the output and the export configuration.",
      "type": "object",
      "properties": {
        "uriPrefix": {
          "description": "The Cloud Storage destination to export to. URI for a Cloud Storage directory where the server writes the result files, in the format `gs:\/\/{bucket-id}\/{path\/to\/destination\/dir}`). If there is no trailing slash, the service appends one when composing the object path. The user is responsible for creating the Cloud Storage bucket referenced in `uri_prefix`.",
          "type": "string"
        },
        "mimeType": {
          "description": "MIME types supported by DICOM spec. Each file is written in the following format: `...\/{study_id}\/{series_id}\/{instance_id}[\/{frame_number}].{extension}` The frame_number component exists only for multi-frame instances. Supported MIME types are consistent with supported formats in DICOMweb: https:\/\/cloud.google.com\/healthcare\/docs\/dicom#retrieve_transaction. Specifically, the following are supported: - application\/dicom; transfer-syntax=1.2.840.10008.1.2.1 (uncompressed DICOM) - application\/dicom; transfer-syntax=1.2.840.10008.1.2.4.50 (DICOM with embedded JPEG Baseline) - application\/dicom; transfer-syntax=1.2.840.10008.1.2.4.90 (DICOM with embedded JPEG 2000 Lossless Only) - application\/dicom; transfer-syntax=1.2.840.10008.1.2.4.91 (DICOM with embedded JPEG 2000) - application\/dicom; transfer-syntax=* (DICOM with no transcoding) - application\/octet-stream; transfer-syntax=1.2.840.10008.1.2.1 (raw uncompressed PixelData) - application\/octet-stream; transfer-syntax=* (raw PixelData in whatever format it was uploaded in) - image\/jpeg; transfer-syntax=1.2.840.10008.1.2.4.50 (Consumer JPEG) - image\/png The following extensions are used for output files: - application\/dicom -> .dcm - image\/jpeg -> .jpg - image\/png -> .png - application\/octet-stream -> no extension If unspecified, the instances are exported in the original DICOM format they were uploaded in.",
          "type": "string"
        }
      }
    },
    "GoogleCloudHealthcareV1alpha2DicomBigQueryDestination": {
      "id": "GoogleCloudHealthcareV1alpha2DicomBigQueryDestination",
      "description": "The BigQuery table where the server writes output.",
      "type": "object",
      "properties": {
        "tableUri": {
          "description": "BigQuery URI to a table, up to 2000 characters long, in the format `bq:\/\/projectId.bqDatasetId.tableId`",
          "type": "string"
        },
        "force": {
          "description": "Use `write_disposition` instead. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.",
          "type": "boolean"
        }
      }
    },
    "Hl7V2Store": {
      "id": "Hl7V2Store",
      "description": "Represents an HL7v2 store.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Resource name of the HL7v2 store, of the form `projects\/{project_id}\/datasets\/{dataset_id}\/hl7V2Stores\/{hl7v2_store_id}`.",
          "type": "string"
        },
        "notificationConfig": {
          "description": "The notification destination all messages (both Ingest & Create) are published on. Only the message name is sent as part of the notification. If this is unset, no notifications are sent. Supplied by the client.",
          "$ref": "NotificationConfig"
        },
        "parserConfig": {
          "description": "The configuration for the parser. It determines how the server parses the messages.",
          "$ref": "ParserConfig"
        },
        "labels": {
          "description": "User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ParserConfig": {
      "id": "ParserConfig",
      "description": "The configuration for the parser. It determines how the server parses the messages.",
      "type": "object",
      "properties": {
        "allowNullHeader": {
          "description": "Determines whether messages with no header are allowed.",
          "type": "boolean"
        },
        "segmentTerminator": {
          "description": "Byte(s) to use as the segment terminator. If this is unset, '\\r' is used as the segment terminator, matching the HL7 version 2 specification.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "ListHl7V2StoresResponse": {
      "id": "ListHl7V2StoresResponse",
      "description": "Lists the HL7v2 stores in the given dataset.",
      "type": "object",
      "properties": {
        "hl7V2Stores": {
          "description": "The returned HL7v2 stores. Won't be more HL7v2 stores than the value of page_size in the request.",
          "type": "array",
          "items": {
            "$ref": "Hl7V2Store"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results or empty if there are no more results in the list.",
          "type": "string"
        }
      }
    },
    "ExportMessagesRequest": {
      "id": "ExportMessagesRequest",
      "description": "Request to schedule an export.",
      "type": "object",
      "properties": {
        "startTime": {
          "description": "The start of the range in `send_time` (MSH.7, https:\/\/www.hl7.org\/documentcenter\/public_temp_2E58C1F9-1C23-BA17-0C6126475344DA9D\/wg\/conf\/HL7MSH.htm) to process. If not specified, the UNIX epoch (1970-01-01T00:00:00Z) is used. This value has to come before the `end_time` defined below. Only messages whose `send_times` lie in the range defined by this value and `end_time` are exported.",
          "type": "string",
          "format": "google-datetime"
        },
        "endTime": {
          "description": "The end of the range in `send_time` (MSH.7, https:\/\/www.hl7.org\/documentcenter\/public_temp_2E58C1F9-1C23-BA17-0C6126475344DA9D\/wg\/conf\/HL7MSH.htm) to process. If not specified, the time when the export is scheduled is used. This value has to be after the `start_time` defined above. Only messages whose `send_times` lie in the range defined by this value and the `start_time` above are exported.",
          "type": "string",
          "format": "google-datetime"
        },
        "gcsDestination": {
          "$ref": "GoogleCloudHealthcareV1alpha2Hl7v2GcsDestination"
        }
      }
    },
    "GoogleCloudHealthcareV1alpha2Hl7v2GcsDestination": {
      "id": "GoogleCloudHealthcareV1alpha2Hl7v2GcsDestination",
      "description": "The Cloud Storage output destination. The Cloud Healthcare Service Agent requires the `roles\/storage.objectAdmin` Cloud IAM roles on the Cloud Storage location.",
      "type": "object",
      "properties": {
        "uriPrefix": {
          "description": "URI for a Cloud Storage directory where the server writes result files, in the format `gs:\/\/{bucket-id}\/{path\/to\/destination\/dir}`. If there is no trailing slash, the service appends one when composing the object path. The user is responsible for creating the Cloud Storage bucket referenced in `uri_prefix`.",
          "type": "string"
        },
        "messageView": {
          "description": "Specifies the parts of the Message resource to include in the export. If not specified, FULL is used.",
          "type": "string",
          "enumDescriptions": [
            "Not specified, equivalent to FULL for getMessage, equivalent to BASIC for listMessages.",
            "Server responses include all the message fields except parsed_data and schematized_data fields.",
            "Server responses include all the message fields except data and schematized_data fields.",
            "Server responses include all the message fields.",
            "Server responses include all the message fields except data and parsed_data fields.",
            "Server responses include only the name field."
          ],
          "enum": [
            "MESSAGE_VIEW_UNSPECIFIED",
            "RAW_ONLY",
            "PARSED_ONLY",
            "FULL",
            "SCHEMATIZED_ONLY",
            "BASIC"
          ]
        },
        "contentStructure": {
          "description": "The format of the exported HL7v2 message files.",
          "type": "string",
          "enumDescriptions": [
            "If the content structure is not specified, the default value `MESSAGE_JSON` will be used.",
            "Messages are printed using the JSON format returned from the `GetMessage` API. Messages are delimited with newlines."
          ],
          "enum": [
            "CONTENT_STRUCTURE_UNSPECIFIED",
            "MESSAGE_JSON"
          ]
        }
      }
    },
    "ImportMessagesRequest": {
      "id": "ImportMessagesRequest",
      "description": "Request to import messages.",
      "type": "object",
      "properties": {
        "gcsSource": {
          "description": "Cloud Storage source data location and import configuration. The Cloud Healthcare Service Agent requires the `roles\/storage.objectViewer` Cloud IAM roles on the Cloud Storage location.",
          "$ref": "GcsSource"
        }
      }
    },
    "GcsSource": {
      "id": "GcsSource",
      "description": "Specifies the configuration for importing data from Cloud Storage.",
      "type": "object",
      "properties": {
        "uri": {
          "description": "Points to a Cloud Storage URI containing file(s) to import. The URI must be in the following format: `gs:\/\/{bucket_id}\/{object_id}`. The URI can include wildcards in `object_id` and thus identify multiple files. Supported wildcards: * `*` to match 0 or more non-separator characters * `**` to match 0 or more characters (including separators). Must be used at the end of a path and with no other wildcards in the path. Can also be used with a file extension (such as .ndjson), which imports all files with the extension in the specified directory and its sub-directories. For example, `gs:\/\/my-bucket\/my-directory\/**.ndjson` imports all files with `.ndjson` extensions in `my-directory\/` and its sub-directories. * `?` to match 1 character Files matching the wildcard are expected to contain content only, no metadata.",
          "type": "string"
        }
      }
    },
    "FhirStore": {
      "id": "FhirStore",
      "description": "Represents a FHIR store.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. Resource name of the FHIR store, of the form `projects\/{project_id}\/datasets\/{dataset_id}\/fhirStores\/{fhir_store_id}`.",
          "type": "string"
        },
        "enableUpdateCreate": {
          "description": "Whether this FHIR store has the [updateCreate capability](https:\/\/www.hl7.org\/fhir\/capabilitystatement-definitions.html#CapabilityStatement.rest.resource.updateCreate). This determines if the client can use an Update operation to create a new resource with a client-specified ID. If false, all IDs are server-assigned through the Create operation and attempts to update a non-existent resource return errors. Be careful with the audit logs if client-specified resource IDs contain sensitive data such as patient identifiers, those IDs are part of the FHIR resource path recorded in Cloud audit logs and Cloud Pub\/Sub notifications.",
          "type": "boolean"
        },
        "notificationConfig": {
          "description": "If non-empty, publish all resource modifications of this FHIR store to this destination. The Cloud Pub\/Sub message attributes contain a map with a string describing the action that has triggered the notification. For example, \"action\":\"CreateResource\".",
          "$ref": "NotificationConfig"
        },
        "disableReferentialIntegrity": {
          "description": "Immutable. Whether to disable referential integrity in this FHIR store. This field is immutable after FHIR store creation. The default value is false, meaning that the API enforces referential integrity and fail the requests that result in inconsistent state in the FHIR store. When this field is set to true, the API skips referential integrity checks. Consequently, operations that rely on references, such as GetPatientEverything, do not return all the results if broken references exist.",
          "type": "boolean"
        },
        "disableResourceVersioning": {
          "description": "Immutable. Whether to disable resource versioning for this FHIR store. This field can not be changed after the creation of FHIR store. If set to false, which is the default behavior, all write operations cause historical versions to be recorded automatically. The historical versions can be fetched through the history APIs, but cannot be updated. If set to true, no historical versions are kept. The server sends errors for attempts to read the historical versions.",
          "type": "boolean"
        },
        "labels": {
          "description": "User-supplied key-value pairs used to organize FHIR stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "version": {
          "description": "Immutable. The FHIR specification version that this FHIR store supports natively. This field is immutable after store creation. Requests are rejected if they contain FHIR resources of a different version. Version is required for every FHIR store.",
          "type": "string",
          "enumDescriptions": [
            "VERSION_UNSPECIFIED is treated as STU3 to accommodate the existing FHIR stores.",
            "Draft Standard for Trial Use, [Release 2](https:\/\/www.hl7.org\/fhir\/DSTU2)",
            "Standard for Trial Use, [Release 3](https:\/\/www.hl7.org\/fhir\/STU3)",
            "[Release 4](https:\/\/www.hl7.org\/fhir\/R4)"
          ],
          "enum": [
            "VERSION_UNSPECIFIED",
            "DSTU2",
            "STU3",
            "R4"
          ]
        },
        "streamConfigs": {
          "description": "A list of streaming configs that configure the destinations of streaming export for every resource mutation in this FHIR store. Each store is allowed to have up to 10 streaming configs. After a new config is added, the next resource mutation is streamed to the new location in addition to the existing ones. When a location is removed from the list, the server stops streaming to that location. Some lag (typically on the order of dozens of seconds) is expected before the results show up in the streaming destination.",
          "type": "array",
          "items": {
            "$ref": "StreamConfig"
          }
        }
      }
    },
    "StreamConfig": {
      "id": "StreamConfig",
      "description": "Contains configuration for streaming FHIR export.",
      "type": "object",
      "properties": {
        "resourceTypes": {
          "description": "Supply a FHIR resource type (such as \"Patient\" or \"Observation\"). See https:\/\/www.hl7.org\/fhir\/valueset-resource-types.html for a list of all FHIR resource types. The server treats an empty list as an intent to stream all the supported resource types in this FHIR store.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "bigqueryDestination": {
          "description": "The destination BigQuery structure that contains both the dataset location and corresponding schema config. The output is organized in one table per resource type. The server reuses the existing tables (if any) that are named after the resource types, e.g. \"Patient\", \"Observation\". When there is no existing table for a given resource type, the server attempts to create one. When a table schema doesn't align with the schema config, either because of existing incompatible schema or out of band incompatible modification, the server does not stream in new data. One resolution in this case is to delete the incompatible table and let the server recreate one, though the newly created table only contains data after the table recreation. BigQuery imposes a 1 MB limit on streaming insert row size, therefore any resource mutation that generates more than 1 MB of BigQuery data will not be streamed. Results are appended to the corresponding BigQuery tables. Different versions of the same resource are distinguishable by the meta.versionId and meta.lastUpdated columns. The operation (CREATE\/UPDATE\/DELETE) that results in the new version is recorded in the meta.tag. The tables contain all historical resource versions since streaming was enabled. For query convenience, the server also creates one view per table of the same name containing only the current resource version. The streamed data in the BigQuery dataset is not guaranteed to be completely unique. The combination of the id and meta.versionId columns should ideally identify a single unique row. But in rare cases, duplicates may exist. At query time, users may use the SQL select statement to keep only one of the duplicate rows given an id and meta.versionId pair. Alternatively, the server created view mentioned above also filters out duplicates. Before adding this configuration, you must add the [`bigquery.dataEditor`](https:\/\/cloud.google.com\/bigquery\/docs\/access-control#bigquery.dataEditor) role to your project's **Cloud Healthcare Service Agent** [service account](https:\/\/cloud.google.com\/iam\/docs\/service-accounts). If a resource mutation cannot be streamed to BigQuery, errors will be logged to Cloud Logging (see [Viewing error logs in Cloud Logging](\/healthcare\/docs\/how-tos\/logging)).",
          "$ref": "GoogleCloudHealthcareV1alpha2FhirBigQueryDestination"
        }
      }
    },
    "GoogleCloudHealthcareV1alpha2FhirBigQueryDestination": {
      "id": "GoogleCloudHealthcareV1alpha2FhirBigQueryDestination",
      "description": "The configuration for exporting to BigQuery.",
      "type": "object",
      "properties": {
        "datasetUri": {
          "description": "BigQuery URI to an existing dataset, up to 2000 characters long, in the format `bq:\/\/projectId.bqDatasetId`.",
          "type": "string"
        },
        "schemaConfig": {
          "description": "The configuration for the exported BigQuery schema.",
          "$ref": "SchemaConfig"
        }
      }
    },
    "SchemaConfig": {
      "id": "SchemaConfig",
      "description": "Configuration for the FHIR BigQuery and Cloud Storage schema. Determines how the server generates the schema.",
      "type": "object",
      "properties": {
        "schemaType": {
          "description": "Specifies the output schema type. Schema type is required.",
          "type": "string",
          "enumDescriptions": [
            "No schema type specified. This type is unsupported.",
            "A data-driven schema generated from the fields present in the FHIR data being exported, with no additional simplification.",
            "Analytics schema defined by the FHIR community. See https:\/\/github.com\/FHIR\/sql-on-fhir\/blob\/master\/sql-on-fhir.md. BigQuery only allows a maximum of 10,000 columns per table. Due to this limitation, the server will not generate schemas for fields of type `Resource`, which can hold any resource type. The affected fields are `Parameters.parameter.resource`, `Bundle.entry.resource`, and `Bundle.entry.response.outcome`."
          ],
          "enum": [
            "SCHEMA_TYPE_UNSPECIFIED",
            "LOSSLESS",
            "ANALYTICS"
          ]
        },
        "recursiveStructureDepth": {
          "description": "The depth for all recursive structures in the output analytics schema. For example, `concept` in the CodeSystem resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called `concept.concept` but not `concept.concept.concept`. If not specified or set to 0, the server will use the default value 2. The maximum depth allowed is 5.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "ListFhirStoresResponse": {
      "id": "ListFhirStoresResponse",
      "description": "Lists the FHIR stores in the given dataset.",
      "type": "object",
      "properties": {
        "fhirStores": {
          "description": "The returned FHIR stores. Won't be more FHIR stores than the value of page_size in the request.",
          "type": "array",
          "items": {
            "$ref": "FhirStore"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results or empty if there are no more results in the list.",
          "type": "string"
        }
      }
    },
    "ImportResourcesRequest": {
      "id": "ImportResourcesRequest",
      "description": "Request to import resources.",
      "type": "object",
      "properties": {
        "contentStructure": {
          "description": "The content structure in the source location. If not specified, the server treats the input source files as BUNDLE.",
          "type": "string",
          "enumDescriptions": [
            "If the content structure is not specified, the default value `BUNDLE` is used.",
            "The source file contains one or more lines of newline-delimited JSON (ndjson). Each line is a bundle that contains one or more resources. Set the bundle type to `history` to import resource versions.",
            "The source file contains one or more lines of newline-delimited JSON (ndjson). Each line is a single resource.",
            "The entire file is one JSON bundle. The JSON can span multiple lines.",
            "The entire file is one JSON resource. The JSON can span multiple lines."
          ],
          "enum": [
            "CONTENT_STRUCTURE_UNSPECIFIED",
            "BUNDLE",
            "RESOURCE",
            "BUNDLE_PRETTY",
            "RESOURCE_PRETTY"
          ]
        },
        "gcsSource": {
          "description": "Cloud Storage source data location and import configuration. The Healthcare Service Agent account requires the `roles\/storage.objectAdmin` role on the Cloud Storage location. For each Cloud Storage object, use a text file that contains the format specified in ContentStructure.",
          "$ref": "GoogleCloudHealthcareV1alpha2FhirGcsSource"
        },
        "gcsErrorDestination": {
          "description": "The Cloud Storage destination to write the error report to. The Healthcare Service Agent account requires the `roles\/storage.objectAdmin` role on the Cloud Storage location. Writing a file to the same destination multiple times results in the previous version of the file being overwritten.",
          "$ref": "GoogleCloudHealthcareV1alpha2FhirGcsErrorDestination"
        }
      }
    },
    "GoogleCloudHealthcareV1alpha2FhirGcsSource": {
      "id": "GoogleCloudHealthcareV1alpha2FhirGcsSource",
      "description": "Specifies the configuration for importing data from Cloud Storage.",
      "type": "object",
      "properties": {
        "uri": {
          "description": "Points to a Cloud Storage URI containing file(s) to import. The URI must be in the following format: `gs:\/\/{bucket_id}\/{object_id}`. The URI can include wildcards in `object_id` and thus identify multiple files. Supported wildcards: * `*` to match 0 or more non-separator characters * `**` to match 0 or more characters (including separators). Must be used at the end of a path and with no other wildcards in the path. Can also be used with a file extension (such as .ndjson), which imports all files with the extension in the specified directory and its sub-directories. For example, `gs:\/\/my-bucket\/my-directory\/**.ndjson` imports all files with `.ndjson` extensions in `my-directory\/` and its sub-directories. * `?` to match 1 character Files matching the wildcard are expected to contain content only, no metadata.",
          "type": "string"
        }
      }
    },
    "GoogleCloudHealthcareV1alpha2FhirGcsErrorDestination": {
      "id": "GoogleCloudHealthcareV1alpha2FhirGcsErrorDestination",
      "description": "Specifies the Cloud Storage destination where errors are recorded.",
      "type": "object",
      "properties": {
        "uriPrefix": {
          "description": "URI for a Cloud Storage directory where the server writes error report files, in the format `gs:\/\/{bucket-id}\/{path\/to\/destination\/dir}`. If there is no trailing slash, the service appends one when composing the object path. The Cloud Storage bucket referenced in `uri_prefix` must exist or an error occurs.",
          "type": "string"
        }
      }
    },
    "ExportResourcesRequest": {
      "id": "ExportResourcesRequest",
      "description": "Request to export resources.",
      "type": "object",
      "properties": {
        "gcsDestination": {
          "description": "The Cloud Storage output destination. The Healthcare Service Agent account requires the `roles\/storage.objectAdmin` role on the Cloud Storage location. The exported outputs are organized by FHIR resource types. The server creates one object per resource type. Each object contains newline delimited JSON, and each line is a FHIR resource.",
          "$ref": "GoogleCloudHealthcareV1alpha2FhirGcsDestination"
        },
        "bigqueryDestination": {
          "description": "The BigQuery output destination. The Cloud Healthcare Service Agent requires two IAM roles on the BigQuery location: `roles\/bigquery.dataEditor` and `roles\/bigquery.jobUser`. The output is one BigQuery table per resource type.",
          "$ref": "GoogleCloudHealthcareV1alpha2FhirBigQueryDestination"
        }
      }
    },
    "GoogleCloudHealthcareV1alpha2FhirGcsDestination": {
      "id": "GoogleCloudHealthcareV1alpha2FhirGcsDestination",
      "description": "The configuration for exporting to Cloud Storage.",
      "type": "object",
      "properties": {
        "uriPrefix": {
          "description": "URI for a Cloud Storage directory where the server writes result files, in the format `gs:\/\/{bucket-id}\/{path\/to\/destination\/dir}`. If there is no trailing slash, the service appends one when composing the object path. The Cloud Storage bucket referenced in `uri_prefix` must exist or an error occurs.",
          "type": "string"
        }
      }
    },
    "AnalyzeEntitiesRequest": {
      "id": "AnalyzeEntitiesRequest",
      "description": "The request to analyze healthcare entities in a document.",
      "type": "object",
      "properties": {
        "documentContent": {
          "description": "document_content is a document to be annotated.",
          "type": "string"
        }
      }
    },
    "AnalyzeEntitiesResponse": {
      "id": "AnalyzeEntitiesResponse",
      "description": "Includes recognized entity mentions and relationships between them.",
      "type": "object",
      "properties": {
        "entityMentions": {
          "description": "entity_mentions contains all the annotated medical entities that were were mentioned in the provided document.",
          "type": "array",
          "items": {
            "$ref": "EntityMention"
          }
        },
        "entities": {
          "description": "The union of all the candidate entities that the entity_mentions in this response could link to. These are UMLS concepts or normalized mention content.",
          "type": "array",
          "items": {
            "$ref": "Entity"
          }
        },
        "relationships": {
          "description": "relationships contains all the binary relationships that were identified between entity mentions within the provided document.",
          "type": "array",
          "items": {
            "$ref": "EntityMentionRelationship"
          }
        }
      }
    },
    "EntityMention": {
      "id": "EntityMention",
      "description": "An entity mention in the document.",
      "type": "object",
      "properties": {
        "mentionId": {
          "description": "mention_id uniquely identifies each entity mention in a single response.",
          "type": "string"
        },
        "type": {
          "description": "The semantic type of the entity: UNKNOWN_ENTITY_TYPE, ALONE, ANATOMICAL_STRUCTURE, ASSISTED_LIVING, BF_RESULT, BM_RESULT, BM_UNIT, BM_VALUE, BODY_FUNCTION, BODY_MEASUREMENT, COMPLIANT, DOESNOT_FOLLOWUP, FAMILY, FOLLOWSUP, LABORATORY_DATA, LAB_RESULT, LAB_UNIT, LAB_VALUE, MEDICAL_DEVICE, MEDICINE, MED_DOSE, MED_DURATION, MED_FORM, MED_FREQUENCY, MED_ROUTE, MED_STATUS, MED_STRENGTH, MED_TOTALDOSE, MED_UNIT, NON_COMPLIANT, OTHER_LIVINGSTATUS, PROBLEM, PROCEDURE, PROCEDURE_RESULT, PROC_METHOD, REASON_FOR_NONCOMPLIANCE, SEVERITY, SUBSTANCE_ABUSE, UNCLEAR_FOLLOWUP.",
          "type": "string"
        },
        "text": {
          "description": "text is the location of the entity mention in the document.",
          "$ref": "TextSpan"
        },
        "linkedEntities": {
          "description": "linked_entities are candidate ontological concepts that this entity mention may refer to. They are sorted by decreasing confidence.it",
          "type": "array",
          "items": {
            "$ref": "LinkedEntity"
          }
        },
        "temporalAssessment": {
          "description": "How this entity mention relates to the subject temporally. Its value is one of: CURRENT, CLINICAL_HISTORY, FAMILY_HISTORY, UPCOMING, ALLERGY",
          "$ref": "Feature"
        },
        "certaintyAssessment": {
          "description": "The certainty assessment of the entity mention. Its value is one of: LIKELY, SOMEWHAT_LIKELY, UNCERTAIN, SOMEWHAT_UNLIKELY, UNLIKELY, CONDITIONAL",
          "$ref": "Feature"
        },
        "subject": {
          "description": "The subject this entity mention relates to. Its value is one of: PATIENT, FAMILY_MEMBER, OTHER",
          "$ref": "Feature"
        },
        "confidence": {
          "description": "The model's confidence in this entity mention annotation. A number between 0 and 1.",
          "type": "number",
          "format": "double"
        }
      }
    },
    "TextSpan": {
      "id": "TextSpan",
      "description": "A span of text in the provided document.",
      "type": "object",
      "properties": {
        "content": {
          "description": "The original text contained in this span.",
          "type": "string"
        },
        "beginOffset": {
          "description": "The unicode codepoint index of the beginning of this span.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "LinkedEntity": {
      "id": "LinkedEntity",
      "description": "EntityMentions can be linked to multiple entities using a LinkedEntity message lets us add other fields, e.g. confidence.",
      "type": "object",
      "properties": {
        "entityId": {
          "description": "entity_id is a concept unique identifier. These are prefixed by a string that identifies the entity coding system, followed by the unique identifier within that system. For example, \"UMLS\/C0000970\". This also supports ad hoc entities, which are formed by normalizing entity mention content.",
          "type": "string"
        }
      }
    },
    "Feature": {
      "id": "Feature",
      "description": "A feature of an entity mention.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of this feature annotation. Its range depends on the type of the feature.",
          "type": "string"
        },
        "confidence": {
          "description": "The model's confidence in this feature annotation. A number between 0 and 1.",
          "type": "number",
          "format": "double"
        }
      }
    },
    "Entity": {
      "id": "Entity",
      "description": "The candidate entities that an entity mention could link to.",
      "type": "object",
      "properties": {
        "entityId": {
          "description": "entity_id is a first class field entity_id uniquely identifies this concept and its meta-vocabulary. For example, \"UMLS\/C0000970\".",
          "type": "string"
        },
        "preferredTerm": {
          "description": "preferred_term is the preferred term for this concept. For example, \"Acetaminophen\". For ad hoc entities formed by normalization, this is the most popular unnormalized string.",
          "type": "string"
        },
        "vocabularyCodes": {
          "description": "Vocabulary codes are first-class fields and differentiated from the concept unique identifier (entity_id). vocabulary_codes contains the representation of this concept in particular vocabularies, such as ICD-10, SNOMED-CT and RxNORM. These are prefixed by the name of the vocabulary, followed by the unique code within that vocabulary. For example, \"RXNORM\/A10334543\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EntityMentionRelationship": {
      "id": "EntityMentionRelationship",
      "description": "Defines directed relationship from one entity mention to another.",
      "type": "object",
      "properties": {
        "subjectId": {
          "description": "subject_id is the id of the subject entity mention.",
          "type": "string"
        },
        "objectId": {
          "description": "object_id is the id of the object entity mention.",
          "type": "string"
        },
        "confidence": {
          "description": "The model's confidence in this annotation. A number between 0 and 1.",
          "type": "number",
          "format": "double"
        }
      }
    },
    "StorageInfo": {
      "id": "StorageInfo",
      "description": "StorageInfo encapsulates all the storage info of a resource.",
      "type": "object",
      "properties": {
        "referencedResource": {
          "description": "The resource whose storage info is returned. For example, to specify the resource path of a DICOM Instance: `projects\/{projectid}\/datasets\/{datasetid}\/dicomStores\/{dicom_store_id}\/dicomWeb\/studi\/{study_uid}\/series\/{series_uid}\/instances\/{instance_uid}`",
          "type": "string"
        },
        "structuredStorageInfo": {
          "description": "Info about the data stored in structured storage for the resource.",
          "$ref": "StructuredStorageInfo"
        },
        "blobStorageInfo": {
          "description": "Info about the data stored in blob storage for the resource.",
          "$ref": "BlobStorageInfo"
        }
      }
    },
    "StructuredStorageInfo": {
      "id": "StructuredStorageInfo",
      "description": "StructuredStorageInfo contains details about the data stored in Structured Storage for the referenced resource.",
      "type": "object",
      "properties": {
        "sizeBytes": {
          "description": "Size in bytes of data stored in structured storage.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "BlobStorageInfo": {
      "id": "BlobStorageInfo",
      "description": "BlobStorageInfo contains details about the data stored in Blob Storage for the referenced resource. Note: Storage class is only valid for DICOM and hence will only be populated for DICOM resources.",
      "type": "object",
      "properties": {
        "sizeBytes": {
          "description": "Size in bytes of data stored in Blob Storage.",
          "type": "string",
          "format": "int64"
        },
        "storageClass": {
          "description": "The Storage class in which the Blob data is stored.",
          "type": "string",
          "enumDescriptions": [
            "If unspecified in CreateDataset, the StorageClass defaults to STANDARD. If unspecified in UpdateDataset and the StorageClass is set in the field mask, an InvalidRequest error is thrown.",
            "Stores the Object in Blob Standard Storage: https:\/\/cloud.google.com\/storage\/docs\/storage-classes#standard",
            "Stores the Object in Blob Nearline Storage: https:\/\/cloud.google.com\/storage\/docs\/storage-classes#nearline",
            "Stores the Object in Blob Coldline Storage: https:\/\/cloud.google.com\/storage\/docs\/storage-classes#coldline",
            "Stores the Object in Blob Archive Storage: https:\/\/cloud.google.com\/storage\/docs\/storage-classes#archive"
          ],
          "enum": [
            "BLOB_STORAGE_CLASS_UNSPECIFIED",
            "STANDARD",
            "NEARLINE",
            "COLDLINE",
            "ARCHIVE"
          ]
        },
        "storageClassUpdateTime": {
          "description": "The time at which the storage class was updated. This is used to compute early deletion fees of the resource.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "SetBlobStorageSettingsRequest": {
      "id": "SetBlobStorageSettingsRequest",
      "description": "Request message for `SetBlobStorageSettings` method.",
      "type": "object",
      "properties": {
        "blobStorageSettings": {
          "description": "The blob storage settings to update for the specified resources. Only fields listed in `update_mask` are applied.",
          "$ref": "BlobStorageSettings"
        }
      }
    },
    "BlobStorageSettings": {
      "id": "BlobStorageSettings",
      "description": "Settings for data stored in Blob storage.",
      "type": "object",
      "properties": {
        "blobStorageClass": {
          "description": "The Storage class in which the Blob data is stored.",
          "type": "string",
          "enumDescriptions": [
            "If unspecified in CreateDataset, the StorageClass defaults to STANDARD. If unspecified in UpdateDataset and the StorageClass is set in the field mask, an InvalidRequest error is thrown.",
            "Stores the Object in Blob Standard Storage: https:\/\/cloud.google.com\/storage\/docs\/storage-classes#standard",
            "Stores the Object in Blob Nearline Storage: https:\/\/cloud.google.com\/storage\/docs\/storage-classes#nearline",
            "Stores the Object in Blob Coldline Storage: https:\/\/cloud.google.com\/storage\/docs\/storage-classes#coldline",
            "Stores the Object in Blob Archive Storage: https:\/\/cloud.google.com\/storage\/docs\/storage-classes#archive"
          ],
          "enum": [
            "BLOB_STORAGE_CLASS_UNSPECIFIED",
            "STANDARD",
            "NEARLINE",
            "COLDLINE",
            "ARCHIVE"
          ]
        }
      }
    },
    "OperationMetadata": {
      "id": "OperationMetadata",
      "description": "OperationMetadata provides information about the operation execution. Returned in the long-running operation's metadata field.",
      "type": "object",
      "properties": {
        "apiMethodName": {
          "description": "The name of the API method that initiated the operation.",
          "type": "string"
        },
        "createTime": {
          "description": "The time at which the operation was created by the API.",
          "type": "string",
          "format": "google-datetime"
        },
        "endTime": {
          "description": "The time at which execution was completed.",
          "type": "string",
          "format": "google-datetime"
        },
        "counter": {
          "$ref": "ProgressCounter"
        }
      }
    },
    "ProgressCounter": {
      "id": "ProgressCounter",
      "description": "ProgressCounter provides counters to describe an operation's progress.",
      "type": "object",
      "properties": {
        "pending": {
          "description": "The number of units that are pending in the operation.",
          "type": "string",
          "format": "int64"
        },
        "success": {
          "description": "The number of units that succeeded in the operation.",
          "type": "string",
          "format": "int64"
        },
        "failure": {
          "description": "The number of units that failed in the operation.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "ExportAnnotationsResponse": {
      "id": "ExportAnnotationsResponse",
      "description": "Response for successful annotation export operations. This structure is included in response upon operation completion.",
      "type": "object",
      "properties": {
      }
    },
    "ImportAnnotationsResponse": {
      "id": "ImportAnnotationsResponse",
      "description": "Final response of importing Annotations in successful case. This structure is included in the response. It is only included when the operation finishes.",
      "type": "object",
      "properties": {
      }
    },
    "EvaluateAnnotationStoreResponse": {
      "id": "EvaluateAnnotationStoreResponse",
      "description": "Response for successful Annotation store evaluation operations. This structure is included in the response upon operation completion.",
      "type": "object",
      "properties": {
      }
    },
    "DeidentifySummary": {
      "id": "DeidentifySummary",
      "description": "Contains a detailed summary of the Deidentify operation.",
      "type": "object",
      "properties": {
      }
    },
    "ImportDicomDataResponse": {
      "id": "ImportDicomDataResponse",
      "description": "Returns additional information in regards to a completed DICOM store import.",
      "type": "object",
      "properties": {
      }
    },
    "ExportDicomDataResponse": {
      "id": "ExportDicomDataResponse",
      "description": "Returns additional information in regards to a completed DICOM store export.",
      "type": "object",
      "properties": {
      }
    },
    "GoogleCloudHealthcareV1alpha2FhirRestImportResourcesResponse": {
      "id": "GoogleCloudHealthcareV1alpha2FhirRestImportResourcesResponse",
      "description": " Final response of importing resources. This structure is included in the response to describe the detailed outcome. It is only included when the operation finishes successfully.",
      "type": "object",
      "properties": {
        "fhirStore": {
          "description": "The name of the FHIR store where the resources have been imported, in the format `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/fhirStores\/{fhir_store_id}`.",
          "type": "string"
        },
        "inputSize": {
          "description": "The total number of resources included in the source data.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GoogleCloudHealthcareV1alpha2FhirRestImportResourcesErrorDetails": {
      "id": "GoogleCloudHealthcareV1alpha2FhirRestImportResourcesErrorDetails",
      "description": " Error response of importing resources. This structure is included in the error details to describe the detailed error. It is only included when the operation finishes with some failure.",
      "type": "object",
      "properties": {
        "fhirStore": {
          "description": "The name of the FHIR store where resources have been imported, in the format `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/fhirStores\/{fhir_store_id}`.",
          "type": "string"
        },
        "inputSize": {
          "description": "The total number of resources included in the source data. This is the sum of the success and error counts.",
          "type": "string",
          "format": "int64"
        },
        "successCount": {
          "description": "The number of resources that have been imported.",
          "type": "string",
          "format": "int64"
        },
        "errorCount": {
          "description": "The number of resources that had errors.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GoogleCloudHealthcareV1alpha2FhirRestExportResourcesResponse": {
      "id": "GoogleCloudHealthcareV1alpha2FhirRestExportResourcesResponse",
      "description": " Response when all resources export successfully. This structure is included in the response to describe the detailed outcome. It is only included when the operation finishes successfully.",
      "type": "object",
      "properties": {
        "fhirStore": {
          "description": "The name of the FHIR store where resources have been exported, in the format `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/fhirStores\/{fhir_store_id}`.",
          "type": "string"
        },
        "resourceCount": {
          "description": "The total number of resources exported from the requested FHIR store.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GoogleCloudHealthcareV1alpha2FhirRestExportResourcesErrorDetails": {
      "id": "GoogleCloudHealthcareV1alpha2FhirRestExportResourcesErrorDetails",
      "description": " Response when errors occur while exporting resources. This structure is included in the error details to describe the detailed outcome. It is only included when the operation finishes with errors.",
      "type": "object",
      "properties": {
        "fhirStore": {
          "description": "The name of the FHIR store where resources have been exported, in the format `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/fhirStores\/{fhir_store_id}`.",
          "type": "string"
        },
        "resourceCount": {
          "description": "The total number of resources included in the export operation. This is the sum of the success and error counts.",
          "type": "string",
          "format": "int64"
        },
        "successCount": {
          "description": "The number of resources that were exported.",
          "type": "string",
          "format": "int64"
        },
        "errorCount": {
          "description": "The number of resources that had errors.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GoogleCloudHealthcareV1alpha2FhirImportResourcesResponse": {
      "id": "GoogleCloudHealthcareV1alpha2FhirImportResourcesResponse",
      "description": "Final response of importing resources. This structure is included in the response to describe the detailed outcome. It is only included when the operation finishes successfully.",
      "type": "object",
      "properties": {
      }
    },
    "GoogleCloudHealthcareV1alpha2FhirExportResourcesResponse": {
      "id": "GoogleCloudHealthcareV1alpha2FhirExportResourcesResponse",
      "description": "Response when all resources export successfully. This structure is included in the response to describe the detailed outcome. It is only included when the operation finishes successfully.",
      "type": "object",
      "properties": {
      }
    },
    "ExportMessagesResponse": {
      "id": "ExportMessagesResponse",
      "description": "Final response for the export operation. This structure is included in the response to describe the detailed outcome.",
      "type": "object",
      "properties": {
      }
    },
    "ImportMessagesResponse": {
      "id": "ImportMessagesResponse",
      "description": "Final response of importing messages. This structure is included in the response to describe the detailed outcome. It is only included when the operation finishes successfully.",
      "type": "object",
      "properties": {
        "hl7v2Store": {
          "description": "The name of the target HL7v2 store, in the format `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/hl7v2Stores\/{hl7v2_store_id}`",
          "type": "string"
        },
        "inputSize": {
          "description": "The total number of resources included in the source data.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "ImportMessagesErrorDetails": {
      "id": "ImportMessagesErrorDetails",
      "description": "Error response of importing messages. This structure is included in the error details to describe the detailed error. It is only included when the operation finishes with some failure.",
      "type": "object",
      "properties": {
        "hl7v2Store": {
          "description": "The name of the target HL7v2 store, in the format `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/hl7v2Stores\/{hl7v2_store_id}`",
          "type": "string"
        },
        "inputSize": {
          "description": "The total number of messages included in the source data. This is the sum of the success and error counts.",
          "type": "string",
          "format": "int64"
        },
        "successCount": {
          "description": "The number of messages that have been imported.",
          "type": "string",
          "format": "int64"
        },
        "errorCount": {
          "description": "The number of messages that had errors.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "SetBlobStorageSettingsResponse": {
      "id": "SetBlobStorageSettingsResponse",
      "description": "Returns additional info in regards to a completed set blob storage settings API.",
      "type": "object",
      "properties": {
      }
    }
  },
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "methods": {
            "list": {
              "id": "healthcare.projects.locations.list",
              "path": "v1alpha2/{+name}/locations",
              "flatPath": "v1alpha2/projects/{projectsId}/locations",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "description": "The resource that owns the locations collection, if applicable.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+$",
                  "type": "string"
                },
                "filter": {
                  "description": "The standard list filter.",
                  "location": "query",
                  "type": "string"
                },
                "pageSize": {
                  "description": "The standard list page size.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "The standard list page token.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "ListLocationsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Lists information about the supported locations for this service."
            },
            "get": {
              "id": "healthcare.projects.locations.get",
              "path": "v1alpha2/{+name}",
              "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "description": "Resource name for the location.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Location"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Gets information about a location."
            }
          }
          ,
          "resources": {
            "datasets": {
              "methods": {
                "setIamPolicy": {
                  "id": "healthcare.projects.locations.datasets.setIamPolicy",
                  "path": "v1alpha2/{+resource}:setIamPolicy",
                  "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:setIamPolicy",
                  "httpMethod": "POST",
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "request": {
                    "$ref": "SetIamPolicyRequest"
                  },
                  "response": {
                    "$ref": "Policy"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."
                },
                "getIamPolicy": {
                  "id": "healthcare.projects.locations.datasets.getIamPolicy",
                  "path": "v1alpha2/{+resource}:getIamPolicy",
                  "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:getIamPolicy",
                  "httpMethod": "GET",
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+$",
                      "type": "string"
                    },
                    "options.requestedPolicyVersion": {
                      "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies).",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "response": {
                    "$ref": "Policy"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."
                },
                "testIamPermissions": {
                  "id": "healthcare.projects.locations.datasets.testIamPermissions",
                  "path": "v1alpha2/{+resource}:testIamPermissions",
                  "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:testIamPermissions",
                  "httpMethod": "POST",
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "request": {
                    "$ref": "TestIamPermissionsRequest"
                  },
                  "response": {
                    "$ref": "TestIamPermissionsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning."
                },
                "create": {
                  "id": "healthcare.projects.locations.datasets.create",
                  "path": "v1alpha2/{+parent}/datasets",
                  "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets",
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "description": "The name of the project in which the server creates the dataset. For example,`projects\/{project_id}\/locations\/{location_id}`.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "type": "string"
                    },
                    "datasetId": {
                      "description": "The ID of the dataset that is being created. The string must match the following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "Dataset"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Creates a new health dataset. Results are returned through the Operation interface which returns either an `Operation.response` which contains a Dataset or `Operation.error`. The metadata field type is OperationMetadata."
                },
                "list": {
                  "id": "healthcare.projects.locations.datasets.list",
                  "path": "v1alpha2/{+parent}/datasets",
                  "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets",
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "description": "The name of the project whose datasets should be listed. For example, `projects\/{project_id}\/locations\/{location_id}`.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+$",
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "The maximum number of items to return. Capped to 100 if not specified. May not be larger than 1000.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "The next_page_token value returned from a previous List request, if any.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListDatasetsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Lists the health datasets in the current project."
                },
                "delete": {
                  "id": "healthcare.projects.locations.datasets.delete",
                  "path": "v1alpha2/{+name}",
                  "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "description": "The name of the dataset to delete. For example, `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}`.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Deletes the specified health dataset and all data contained in the dataset. Deleting a dataset does not affect the sources from which the dataset was imported (if any)."
                },
                "get": {
                  "id": "healthcare.projects.locations.datasets.get",
                  "path": "v1alpha2/{+name}",
                  "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "The name of the dataset to read. For example, `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}`.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Dataset"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets any metadata associated with a dataset."
                },
                "patch": {
                  "id": "healthcare.projects.locations.datasets.patch",
                  "path": "v1alpha2/{+name}",
                  "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}",
                  "httpMethod": "PATCH",
                  "parameters": {
                    "name": {
                      "description": "Resource name of the dataset, of the form `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}`.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+$",
                      "type": "string"
                    },
                    "updateMask": {
                      "description": "The update mask applies to the resource. For the `FieldMask` definition, see https:\/\/developers.google.com\/protocol-buffers\/docs\/reference\/google.protobuf#fieldmask",
                      "location": "query",
                      "type": "string",
                      "format": "google-fieldmask"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "Dataset"
                  },
                  "response": {
                    "$ref": "Dataset"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Updates dataset metadata."
                },
                "deidentify": {
                  "id": "healthcare.projects.locations.datasets.deidentify",
                  "path": "v1alpha2/{+sourceDataset}:deidentify",
                  "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:deidentify",
                  "httpMethod": "POST",
                  "parameters": {
                    "sourceDataset": {
                      "description": "Source dataset resource name. For example, `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}`.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "sourceDataset"
                  ],
                  "request": {
                    "$ref": "DeidentifyDatasetRequest"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Creates a new dataset containing de-identified data from the source dataset. The metadata field type is OperationMetadata. If the request is successful, the response field type is DeidentifySummary. The LRO result may still be successful if de-identification fails for some DICOM instances. The new de-identified dataset will not contain these failed resources. The number of resources processed are tracked in Operation.metadata. Error details are logged to Cloud Logging. For more information, see [Viewing logs](\/healthcare\/docs\/how-tos\/logging)."
                }
              }
              ,
              "resources": {
                "dataProtectionStores": {
                  "methods": {
                    "setIamPolicy": {
                      "id": "healthcare.projects.locations.datasets.dataProtectionStores.setIamPolicy",
                      "path": "v1alpha2/{+resource}:setIamPolicy",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dataProtectionStores/{dataProtectionStoresId}:setIamPolicy",
                      "httpMethod": "POST",
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/dataProtectionStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "request": {
                        "$ref": "SetIamPolicyRequest"
                      },
                      "response": {
                        "$ref": "Policy"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."
                    },
                    "getIamPolicy": {
                      "id": "healthcare.projects.locations.datasets.dataProtectionStores.getIamPolicy",
                      "path": "v1alpha2/{+resource}:getIamPolicy",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dataProtectionStores/{dataProtectionStoresId}:getIamPolicy",
                      "httpMethod": "GET",
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/dataProtectionStores\/[^\/]+$",
                          "type": "string"
                        },
                        "options.requestedPolicyVersion": {
                          "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies).",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "response": {
                        "$ref": "Policy"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."
                    },
                    "testIamPermissions": {
                      "id": "healthcare.projects.locations.datasets.dataProtectionStores.testIamPermissions",
                      "path": "v1alpha2/{+resource}:testIamPermissions",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dataProtectionStores/{dataProtectionStoresId}:testIamPermissions",
                      "httpMethod": "POST",
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/dataProtectionStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "request": {
                        "$ref": "TestIamPermissionsRequest"
                      },
                      "response": {
                        "$ref": "TestIamPermissionsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning."
                    }
                  }
                },
                "dicomStores": {
                  "methods": {
                    "setIamPolicy": {
                      "id": "healthcare.projects.locations.datasets.dicomStores.setIamPolicy",
                      "path": "v1alpha2/{+resource}:setIamPolicy",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:setIamPolicy",
                      "httpMethod": "POST",
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/dicomStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "request": {
                        "$ref": "SetIamPolicyRequest"
                      },
                      "response": {
                        "$ref": "Policy"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."
                    },
                    "getIamPolicy": {
                      "id": "healthcare.projects.locations.datasets.dicomStores.getIamPolicy",
                      "path": "v1alpha2/{+resource}:getIamPolicy",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:getIamPolicy",
                      "httpMethod": "GET",
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/dicomStores\/[^\/]+$",
                          "type": "string"
                        },
                        "options.requestedPolicyVersion": {
                          "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies).",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "response": {
                        "$ref": "Policy"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."
                    },
                    "testIamPermissions": {
                      "id": "healthcare.projects.locations.datasets.dicomStores.testIamPermissions",
                      "path": "v1alpha2/{+resource}:testIamPermissions",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:testIamPermissions",
                      "httpMethod": "POST",
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/dicomStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "request": {
                        "$ref": "TestIamPermissionsRequest"
                      },
                      "response": {
                        "$ref": "TestIamPermissionsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning."
                    },
                    "create": {
                      "id": "healthcare.projects.locations.datasets.dicomStores.create",
                      "path": "v1alpha2/{+parent}/dicomStores",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores",
                      "httpMethod": "POST",
                      "parameters": {
                        "parent": {
                          "description": "The name of the dataset this DICOM store belongs to.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+$",
                          "type": "string"
                        },
                        "dicomStoreId": {
                          "description": "The ID of the DICOM store that is being created. Any string value up to 256 characters in length.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "request": {
                        "$ref": "DicomStore"
                      },
                      "response": {
                        "$ref": "DicomStore"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Creates a new DICOM store within the parent dataset."
                    },
                    "get": {
                      "id": "healthcare.projects.locations.datasets.dicomStores.get",
                      "path": "v1alpha2/{+name}",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}",
                      "httpMethod": "GET",
                      "parameters": {
                        "name": {
                          "description": "The resource name of the DICOM store to get.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/dicomStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "DicomStore"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Gets the specified DICOM store."
                    },
                    "delete": {
                      "id": "healthcare.projects.locations.datasets.dicomStores.delete",
                      "path": "v1alpha2/{+name}",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}",
                      "httpMethod": "DELETE",
                      "parameters": {
                        "name": {
                          "description": "The resource name of the DICOM store to delete.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/dicomStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "Empty"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Deletes the specified DICOM store and removes all images that are contained within it."
                    },
                    "patch": {
                      "id": "healthcare.projects.locations.datasets.dicomStores.patch",
                      "path": "v1alpha2/{+name}",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}",
                      "httpMethod": "PATCH",
                      "parameters": {
                        "name": {
                          "description": "Resource name of the DICOM store, of the form `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/dicomStores\/{dicom_store_id}`.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/dicomStores\/[^\/]+$",
                          "type": "string"
                        },
                        "updateMask": {
                          "description": "The update mask applies to the resource. For the `FieldMask` definition, see https:\/\/developers.google.com\/protocol-buffers\/docs\/reference\/google.protobuf#fieldmask",
                          "location": "query",
                          "type": "string",
                          "format": "google-fieldmask"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "DicomStore"
                      },
                      "response": {
                        "$ref": "DicomStore"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Updates the specified DICOM store."
                    },
                    "list": {
                      "id": "healthcare.projects.locations.datasets.dicomStores.list",
                      "path": "v1alpha2/{+parent}/dicomStores",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores",
                      "httpMethod": "GET",
                      "parameters": {
                        "parent": {
                          "description": "Name of the dataset.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+$",
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "Limit on the number of DICOM stores to return in a single response. If zero the default page size of 100 is used.",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        },
                        "pageToken": {
                          "description": "The next_page_token value returned from the previous List request, if any.",
                          "location": "query",
                          "type": "string"
                        },
                        "filter": {
                          "description": "Restricts stores returned to those matching a filter. Syntax: https:\/\/cloud.google.com\/appengine\/docs\/standard\/python\/search\/query_strings Only filtering on labels is supported, for example `labels.key=value`.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "ListDicomStoresResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Lists the DICOM stores in the given dataset."
                    },
                    "import": {
                      "id": "healthcare.projects.locations.datasets.dicomStores.import",
                      "path": "v1alpha2/{+name}:import",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:import",
                      "httpMethod": "POST",
                      "parameters": {
                        "name": {
                          "description": "The name of the DICOM store resource into which the data is imported. For example, `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/dicomStores\/{dicom_store_id}`.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/dicomStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "ImportDicomDataRequest"
                      },
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Imports data into the DICOM store by copying it from the specified source. Errors are logged to Cloud Logging. For more information, see [Viewing logs](\/healthcare\/docs\/how-tos\/logging). The metadata field type is OperationMetadata."
                    },
                    "export": {
                      "id": "healthcare.projects.locations.datasets.dicomStores.export",
                      "path": "v1alpha2/{+name}:export",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:export",
                      "httpMethod": "POST",
                      "parameters": {
                        "name": {
                          "description": "The DICOM store resource name from which to export the data. For example, `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/dicomStores\/{dicom_store_id}`.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/dicomStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "ExportDicomDataRequest"
                      },
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Exports data to the specified destination by copying it from the DICOM store. Errors are also logged to Cloud Logging. For more information, see [Viewing logs](\/healthcare\/docs\/how-tos\/logging). The metadata field type is OperationMetadata."
                    }
                  }
                  ,
                  "resources": {
                    "dicomWeb": {
                      "resources": {
                        "studies": {
                          "resources": {
                            "series": {
                              "resources": {
                                "instances": {
                                  "methods": {
                                    "getStorageInfo": {
                                      "id": "healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series.instances.getStorageInfo",
                                      "path": "v1alpha2/{+resource}:getStorageInfo",
                                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}:getStorageInfo",
                                      "httpMethod": "GET",
                                      "parameters": {
                                        "resource": {
                                          "description": "Required. The path of the resource for which the storage info is requested (for exaxmple for a DICOM Instance: `projects\/{projectid}\/datasets\/{datasetid}\/dicomStores\/{dicomStoreId}\/dicomWeb\/studies\/{study_uid}\/series\/{series_uid}\/instances\/{instance_uid}`)",
                                          "location": "path",
                                          "required": true,
                                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/dicomStores\/[^\/]+\/dicomWeb\/studies\/[^\/]+\/series\/[^\/]+\/instances\/[^\/]+$",
                                          "type": "string"
                                        }
                                      },
                                      "parameterOrder": [
                                        "resource"
                                      ],
                                      "response": {
                                        "$ref": "StorageInfo"
                                      },
                                      "scopes": [
                                        "https://www.googleapis.com/auth/cloud-platform"
                                      ],
                                      "description": "GetStorageInfo returns the storage info of the specified resource."
                                    },
                                    "setBlobStorageSettings": {
                                      "id": "healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series.instances.setBlobStorageSettings",
                                      "path": "v1alpha2/{+resource}:setBlobStorageSettings",
                                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}:setBlobStorageSettings",
                                      "httpMethod": "POST",
                                      "parameters": {
                                        "resource": {
                                          "description": "Required. REQUIRED: The path of the resource to update the blob storage settings e.g. in the format of `projects\/{projectid}\/datasets\/{datasetid}\/dicomStores\/{dicomStoreID}\/dicomWeb\/studies\/{studyUID}\/series\/-\/instances\/-`",
                                          "location": "path",
                                          "required": true,
                                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/dicomStores\/[^\/]+\/dicomWeb\/studies\/[^\/]+\/series\/[^\/]+\/instances\/[^\/]+$",
                                          "type": "string"
                                        }
                                      },
                                      "parameterOrder": [
                                        "resource"
                                      ],
                                      "request": {
                                        "$ref": "SetBlobStorageSettingsRequest"
                                      },
                                      "response": {
                                        "$ref": "Operation"
                                      },
                                      "scopes": [
                                        "https://www.googleapis.com/auth/cloud-platform"
                                      ],
                                      "description": "SetBlobStorageSettings sets the blob storage settings of the specified resources."
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "hl7V2Stores": {
                  "methods": {
                    "setIamPolicy": {
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.setIamPolicy",
                      "path": "v1alpha2/{+resource}:setIamPolicy",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:setIamPolicy",
                      "httpMethod": "POST",
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/hl7V2Stores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "request": {
                        "$ref": "SetIamPolicyRequest"
                      },
                      "response": {
                        "$ref": "Policy"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."
                    },
                    "getIamPolicy": {
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.getIamPolicy",
                      "path": "v1alpha2/{+resource}:getIamPolicy",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:getIamPolicy",
                      "httpMethod": "GET",
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/hl7V2Stores\/[^\/]+$",
                          "type": "string"
                        },
                        "options.requestedPolicyVersion": {
                          "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies).",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "response": {
                        "$ref": "Policy"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."
                    },
                    "testIamPermissions": {
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.testIamPermissions",
                      "path": "v1alpha2/{+resource}:testIamPermissions",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:testIamPermissions",
                      "httpMethod": "POST",
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/hl7V2Stores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "request": {
                        "$ref": "TestIamPermissionsRequest"
                      },
                      "response": {
                        "$ref": "TestIamPermissionsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning."
                    },
                    "create": {
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.create",
                      "path": "v1alpha2/{+parent}/hl7V2Stores",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores",
                      "httpMethod": "POST",
                      "parameters": {
                        "parent": {
                          "description": "The name of the dataset this HL7v2 store belongs to.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+$",
                          "type": "string"
                        },
                        "hl7V2StoreId": {
                          "description": "The ID of the HL7v2 store that is being created. The string must match the following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "request": {
                        "$ref": "Hl7V2Store"
                      },
                      "response": {
                        "$ref": "Hl7V2Store"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Creates a new HL7v2 store within the parent dataset."
                    },
                    "get": {
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.get",
                      "path": "v1alpha2/{+name}",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}",
                      "httpMethod": "GET",
                      "parameters": {
                        "name": {
                          "description": "The resource name of the HL7v2 store to get.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/hl7V2Stores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "Hl7V2Store"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Gets the specified HL7v2 store."
                    },
                    "delete": {
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.delete",
                      "path": "v1alpha2/{+name}",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}",
                      "httpMethod": "DELETE",
                      "parameters": {
                        "name": {
                          "description": "The resource name of the HL7v2 store to delete.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/hl7V2Stores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "Empty"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Deletes the specified HL7v2 store and removes all messages that it contains."
                    },
                    "list": {
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.list",
                      "path": "v1alpha2/{+parent}/hl7V2Stores",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores",
                      "httpMethod": "GET",
                      "parameters": {
                        "parent": {
                          "description": "Name of the dataset.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+$",
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "Limit on the number of HL7v2 stores to return in a single response. If zero the default page size of 100 is used.",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        },
                        "pageToken": {
                          "description": "The next_page_token value returned from the previous List request, if any.",
                          "location": "query",
                          "type": "string"
                        },
                        "filter": {
                          "description": "Restricts stores returned to those matching a filter. Syntax: https:\/\/cloud.google.com\/appengine\/docs\/standard\/python\/search\/query_strings Only filtering on labels is supported. For example, `labels.key=value`.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "ListHl7V2StoresResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Lists the HL7v2 stores in the given dataset."
                    },
                    "patch": {
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.patch",
                      "path": "v1alpha2/{+name}",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}",
                      "httpMethod": "PATCH",
                      "parameters": {
                        "name": {
                          "description": "Resource name of the HL7v2 store, of the form `projects\/{project_id}\/datasets\/{dataset_id}\/hl7V2Stores\/{hl7v2_store_id}`.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/hl7V2Stores\/[^\/]+$",
                          "type": "string"
                        },
                        "updateMask": {
                          "description": "The update mask applies to the resource. For the `FieldMask` definition, see https:\/\/developers.google.com\/protocol-buffers\/docs\/reference\/google.protobuf#fieldmask",
                          "location": "query",
                          "type": "string",
                          "format": "google-fieldmask"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "Hl7V2Store"
                      },
                      "response": {
                        "$ref": "Hl7V2Store"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Updates the HL7v2 store."
                    },
                    "export": {
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.export",
                      "path": "v1alpha2/{+name}:export",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:export",
                      "httpMethod": "POST",
                      "parameters": {
                        "name": {
                          "description": "The name of the source HL7v2 store, in the format `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/hl7v2Stores\/{hl7v2_store_id}`",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/hl7V2Stores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "ExportMessagesRequest"
                      },
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Exports the messages to a destination in the store with transformations. Only FHIR stores in the same dataset as the source store are supported as destinations. Start and\/or end time relative to message generation time (MSH.7) can be specified to filter messages in a range instead of exporting all at once. This API returns an Operation that can be used to track the status of the job by calling GetOperation. Immediate fatal errors appear in the error field. Otherwise, when the operation finishes, a detailed response of type ExportMessagesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata."
                    },
                    "import": {
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.import",
                      "path": "v1alpha2/{+name}:import",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:import",
                      "httpMethod": "POST",
                      "parameters": {
                        "name": {
                          "description": "The name of the target HL7v2 store, in the format `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/hl7v2Stores\/{hl7v2_store_id}`",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/hl7V2Stores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "ImportMessagesRequest"
                      },
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Import messages to the HL7v2 store by loading data from the specified sources. This method is optimized to load large quantities of data using import semantics that ignore some HL7v2 store configuration options and are not suitable for all use cases. It is primarily intended to load data into an empty HL7v2 store that is not being used by other clients. An existing message will be overwritten if a duplicate message is imported. A duplicate message is a message with the same raw bytes as a message that already exists in this HL7v2 store. When a message is overwritten, its labels will also be overwritten. The import operation is idempotent unless the input data contains multiple valid messages with the same raw bytes but different labels. In that case, after the import completes, the store contains exactly one message with those raw bytes but there is no ordering guarantee on which version of the labels it has. The operation result counters do not count duplicated raw bytes as an error and count one success for each message in the input, which might result in a success count larger than the number of messages in the HL7v2 store. If some messages fail to import, for example due to parsing errors, successfully imported messages are not rolled back. This method returns an Operation that can be used to track the status of the import by calling GetOperation. Immediate fatal errors appear in the error field, errors are also logged to Cloud Logging (see [Viewing logs](\/healthcare\/docs\/how-tos\/logging)). Otherwise, when the operation finishes, a response of type ImportMessagesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata."
                    }
                  }
                  ,
                  "resources": {
                    "messages": {
                      "methods": {
                        "export": {
                          "id": "healthcare.projects.locations.datasets.hl7V2Stores.messages.export",
                          "path": "v1alpha2/{+name}/messages:export",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages:export",
                          "httpMethod": "POST",
                          "parameters": {
                            "name": {
                              "description": "The name of the source HL7v2 store, in the format `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/hl7v2Stores\/{hl7v2_store_id}`",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/hl7V2Stores\/[^\/]+$",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "request": {
                            "$ref": "ExportMessagesRequest"
                          },
                          "response": {
                            "$ref": "Operation"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Exports the messages to a destination in the store with transformations. Only FHIR stores in the same dataset as the source store are supported as destinations. Start and\/or end time relative to message generation time (MSH.7) can be specified to filter messages in a range instead of exporting all at once. This API returns an Operation that can be used to track the status of the job by calling GetOperation. Immediate fatal errors appear in the error field. Otherwise, when the operation finishes, a detailed response of type ExportMessagesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata."
                        }
                      }
                    }
                  }
                },
                "fhirStores": {
                  "methods": {
                    "setIamPolicy": {
                      "id": "healthcare.projects.locations.datasets.fhirStores.setIamPolicy",
                      "path": "v1alpha2/{+resource}:setIamPolicy",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:setIamPolicy",
                      "httpMethod": "POST",
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/fhirStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "request": {
                        "$ref": "SetIamPolicyRequest"
                      },
                      "response": {
                        "$ref": "Policy"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."
                    },
                    "getIamPolicy": {
                      "id": "healthcare.projects.locations.datasets.fhirStores.getIamPolicy",
                      "path": "v1alpha2/{+resource}:getIamPolicy",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:getIamPolicy",
                      "httpMethod": "GET",
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/fhirStores\/[^\/]+$",
                          "type": "string"
                        },
                        "options.requestedPolicyVersion": {
                          "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies).",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "response": {
                        "$ref": "Policy"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."
                    },
                    "testIamPermissions": {
                      "id": "healthcare.projects.locations.datasets.fhirStores.testIamPermissions",
                      "path": "v1alpha2/{+resource}:testIamPermissions",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:testIamPermissions",
                      "httpMethod": "POST",
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/fhirStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "request": {
                        "$ref": "TestIamPermissionsRequest"
                      },
                      "response": {
                        "$ref": "TestIamPermissionsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning."
                    },
                    "create": {
                      "id": "healthcare.projects.locations.datasets.fhirStores.create",
                      "path": "v1alpha2/{+parent}/fhirStores",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores",
                      "httpMethod": "POST",
                      "parameters": {
                        "parent": {
                          "description": "The name of the dataset this FHIR store belongs to.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+$",
                          "type": "string"
                        },
                        "fhirStoreId": {
                          "description": "The ID of the FHIR store that is being created. The string must match the following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "request": {
                        "$ref": "FhirStore"
                      },
                      "response": {
                        "$ref": "FhirStore"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Creates a new FHIR store within the parent dataset."
                    },
                    "get": {
                      "id": "healthcare.projects.locations.datasets.fhirStores.get",
                      "path": "v1alpha2/{+name}",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}",
                      "httpMethod": "GET",
                      "parameters": {
                        "name": {
                          "description": "The resource name of the FHIR store to get.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/fhirStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "FhirStore"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Gets the configuration of the specified FHIR store."
                    },
                    "patch": {
                      "id": "healthcare.projects.locations.datasets.fhirStores.patch",
                      "path": "v1alpha2/{+name}",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}",
                      "httpMethod": "PATCH",
                      "parameters": {
                        "name": {
                          "description": "Output only. Resource name of the FHIR store, of the form `projects\/{project_id}\/datasets\/{dataset_id}\/fhirStores\/{fhir_store_id}`.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/fhirStores\/[^\/]+$",
                          "type": "string"
                        },
                        "updateMask": {
                          "description": "The update mask applies to the resource. For the `FieldMask` definition, see https:\/\/developers.google.com\/protocol-buffers\/docs\/reference\/google.protobuf#fieldmask",
                          "location": "query",
                          "type": "string",
                          "format": "google-fieldmask"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "FhirStore"
                      },
                      "response": {
                        "$ref": "FhirStore"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Updates the configuration of the specified FHIR store."
                    },
                    "delete": {
                      "id": "healthcare.projects.locations.datasets.fhirStores.delete",
                      "path": "v1alpha2/{+name}",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}",
                      "httpMethod": "DELETE",
                      "parameters": {
                        "name": {
                          "description": "The resource name of the FHIR store to delete.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/fhirStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "Empty"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Deletes the specified FHIR store and removes all resources within it."
                    },
                    "list": {
                      "id": "healthcare.projects.locations.datasets.fhirStores.list",
                      "path": "v1alpha2/{+parent}/fhirStores",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores",
                      "httpMethod": "GET",
                      "parameters": {
                        "parent": {
                          "description": "Name of the dataset.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+$",
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "Limit on the number of FHIR stores to return in a single response. If zero the default page size of 100 is used.",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        },
                        "pageToken": {
                          "description": "The next_page_token value returned from the previous List request, if any.",
                          "location": "query",
                          "type": "string"
                        },
                        "filter": {
                          "description": "Restricts stores returned to those matching a filter. Syntax: https:\/\/cloud.google.com\/appengine\/docs\/standard\/python\/search\/query_strings Only filtering on labels is supported, for example `labels.key=value`.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "ListFhirStoresResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Lists the FHIR stores in the given dataset."
                    },
                    "import": {
                      "id": "healthcare.projects.locations.datasets.fhirStores.import",
                      "path": "v1alpha2/{+name}:import",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:import",
                      "httpMethod": "POST",
                      "parameters": {
                        "name": {
                          "description": "The name of the FHIR store to which the server imports FHIR resources, in the format `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/fhirStores\/{fhir_store_id}`.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/fhirStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "ImportResourcesRequest"
                      },
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Import resources to the FHIR store by loading data from the specified sources. This method is optimized to load large quantities of data using import semantics that ignore some FHIR store configuration options and are not suitable for all use cases. It is primarily intended to load data into an empty FHIR store that is not being used by other clients. In cases where this method is not appropriate, consider using ExecuteBundle to load data. Every resource in the input must contain a client-supplied ID. Each resource is stored using the supplied ID regardless of the enable_update_create setting on the FHIR store. The import process does not enforce referential integrity, regardless of the disable_referential_integrity setting on the FHIR store. This allows the import of resources with arbitrary interdependencies without considering grouping or ordering, but if the input data contains invalid references or if some resources fail to be imported, the FHIR store might be left in a state that violates referential integrity. The import process does not trigger Pub\/Sub notification or BigQuery streaming update, regardless of how those are configured on the FHIR store. If a resource with the specified ID already exists, the most recent version of the resource is overwritten without creating a new historical version, regardless of the disable_resource_versioning setting on the FHIR store. If transient failures occur during the import, successfully imported resources could be overwritten more than once. The import operation is idempotent unless the input data contains multiple valid resources with the same ID but different contents. In that case, after the import completes, the store contains exactly one resource with that ID but there is no ordering guarantee on which version of the contents it has. The operation result counters do not count duplicate IDs as an error and count one success for each resource in the input, which might result in a success count larger than the number of resources in the FHIR store. This often occurs when importing data organized in bundles produced by Patient-everything where each bundle contains its own copy of a resource such as Practitioner that might be referred to by many patients. If some resources fail to import, for example due to parsing errors, successfully imported resources are not rolled back. The location and format of the input data are specified by the parameters in ImportResourcesRequest. Note that if no format is specified, this method assumes the `BUNDLE` format. When using the `BUNDLE` format this method ignores the `Bundle.type` field, except that `history` bundles are rejected, and does not apply any of the bundle processing semantics for batch or transaction bundles. Unlike in ExecuteBundle, transaction bundles are not executed as a single transaction and bundle-internal references are not rewritten. The bundle is treated as a collection of resources to be written as provided in `Bundle.entry.resource`, ignoring `Bundle.entry.request`. As an example, this allows the import of `searchset` bundles produced by a FHIR search or Patient-everything operation. This method returns an Operation that can be used to track the status of the import by calling GetOperation. Immediate fatal errors appear in the error field, errors are also logged to Cloud Logging (see [Viewing logs](\/healthcare\/docs\/how-tos\/logging)). Otherwise, when the operation finishes, a detailed response of type ImportResourcesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata."
                    },
                    "export": {
                      "id": "healthcare.projects.locations.datasets.fhirStores.export",
                      "path": "v1alpha2/{+name}:export",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:export",
                      "httpMethod": "POST",
                      "parameters": {
                        "name": {
                          "description": "The name of the FHIR store to export resource from, in the format `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/fhirStores\/{fhir_store_id}`.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/fhirStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "ExportResourcesRequest"
                      },
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Export resources from the FHIR store to the specified destination. This method returns an Operation that can be used to track the status of the export by calling GetOperation. Immediate fatal errors appear in the error field, errors are also logged to Cloud Logging (see [Viewing error logs in Cloud Logging](\/healthcare\/docs\/how-tos\/logging)). Otherwise, when the operation finishes, a detailed response of type ExportResourcesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata."
                    }
                  }
                },
                "annotationStores": {
                  "methods": {
                    "setIamPolicy": {
                      "id": "healthcare.projects.locations.datasets.annotationStores.setIamPolicy",
                      "path": "v1alpha2/{+resource}:setIamPolicy",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}:setIamPolicy",
                      "httpMethod": "POST",
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/annotationStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "request": {
                        "$ref": "SetIamPolicyRequest"
                      },
                      "response": {
                        "$ref": "Policy"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."
                    },
                    "getIamPolicy": {
                      "id": "healthcare.projects.locations.datasets.annotationStores.getIamPolicy",
                      "path": "v1alpha2/{+resource}:getIamPolicy",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}:getIamPolicy",
                      "httpMethod": "GET",
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/annotationStores\/[^\/]+$",
                          "type": "string"
                        },
                        "options.requestedPolicyVersion": {
                          "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies).",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "response": {
                        "$ref": "Policy"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."
                    },
                    "testIamPermissions": {
                      "id": "healthcare.projects.locations.datasets.annotationStores.testIamPermissions",
                      "path": "v1alpha2/{+resource}:testIamPermissions",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}:testIamPermissions",
                      "httpMethod": "POST",
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/annotationStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "request": {
                        "$ref": "TestIamPermissionsRequest"
                      },
                      "response": {
                        "$ref": "TestIamPermissionsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning."
                    },
                    "create": {
                      "id": "healthcare.projects.locations.datasets.annotationStores.create",
                      "path": "v1alpha2/{+parent}/annotationStores",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores",
                      "httpMethod": "POST",
                      "parameters": {
                        "parent": {
                          "description": "The name of the dataset this Annotation store belongs to.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+$",
                          "type": "string"
                        },
                        "annotationStoreId": {
                          "description": "The ID of the Annotation store that is being created. The string must match the following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "request": {
                        "$ref": "AnnotationStore"
                      },
                      "response": {
                        "$ref": "AnnotationStore"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Creates a new Annotation store within the parent dataset."
                    },
                    "get": {
                      "id": "healthcare.projects.locations.datasets.annotationStores.get",
                      "path": "v1alpha2/{+name}",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}",
                      "httpMethod": "GET",
                      "parameters": {
                        "name": {
                          "description": "The resource name of the Annotation store to get.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/annotationStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "AnnotationStore"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Gets the specified Annotation store or returns NOT_FOUND if it does not exist."
                    },
                    "delete": {
                      "id": "healthcare.projects.locations.datasets.annotationStores.delete",
                      "path": "v1alpha2/{+name}",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}",
                      "httpMethod": "DELETE",
                      "parameters": {
                        "name": {
                          "description": "The resource name of the Annotation store to delete.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/annotationStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "Empty"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Deletes the specified Annotation store and removes all annotations that are contained within it."
                    },
                    "patch": {
                      "id": "healthcare.projects.locations.datasets.annotationStores.patch",
                      "path": "v1alpha2/{+name}",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}",
                      "httpMethod": "PATCH",
                      "parameters": {
                        "name": {
                          "description": "Resource name of the Annotation store, of the form `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/annotationStores\/{annotation_store_id}`.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/annotationStores\/[^\/]+$",
                          "type": "string"
                        },
                        "updateMask": {
                          "description": "The update mask applies to the resource. For the `FieldMask` definition, see https:\/\/developers.google.com\/protocol-buffers\/docs\/reference\/google.protobuf#fieldmask",
                          "location": "query",
                          "type": "string",
                          "format": "google-fieldmask"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "AnnotationStore"
                      },
                      "response": {
                        "$ref": "AnnotationStore"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Updates the specified Annotation store."
                    },
                    "list": {
                      "id": "healthcare.projects.locations.datasets.annotationStores.list",
                      "path": "v1alpha2/{+parent}/annotationStores",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores",
                      "httpMethod": "GET",
                      "parameters": {
                        "parent": {
                          "description": "The name of the dataset.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+$",
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "Limit on the number of Annotation stores to return in a single response. If zero the default page size of 100 is used.",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        },
                        "pageToken": {
                          "description": "The next_page_token value returned from the previous List request, if any.",
                          "location": "query",
                          "type": "string"
                        },
                        "filter": {
                          "description": "Restricts stores returned to those matching a filter. Syntax: https:\/\/cloud.google.com\/appengine\/docs\/standard\/python\/search\/query_strings Only filtering on labels is supported. For example, `labels.key=value`.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "ListAnnotationStoresResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Lists the Annotation stores in the given dataset for a source store."
                    },
                    "import": {
                      "id": "healthcare.projects.locations.datasets.annotationStores.import",
                      "path": "v1alpha2/{+name}:import",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}:import",
                      "httpMethod": "POST",
                      "parameters": {
                        "name": {
                          "description": "The name of the Annotation store to which the server imports annotations in the format of `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/annotationStores\/{annotation_store_id}`.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/annotationStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "ImportAnnotationsRequest"
                      },
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Import Annotations to the Annotation store by loading data from the specified sources. If the request is successful, a detailed response is returned as of type ImportAnnotationsResponse, contained in the response field when the operation finishes. The metadata field type is OperationMetadata. Errors are logged to Cloud Logging (see [Viewing logs](\/healthcare\/docs\/how-tos\/logging)). For example, the following sample log entry shows a `failed to parse Cloud Storage object` error that occurred while attempting to import `gs:\/\/ANNOTATION_FILENAME.json` to `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/annotationStores\/{annotation_store_id}`. ```json jsonPayload: { @type: \"type.googleapis.com\/google.cloud.healthcare.logging.ImportAnnotationLogEntry\" error: { code: 3 message: \"failed to parse Cloud Storage object\" } source: \"gs:\/\/ANNOTATION_FILENAME.json\" } logName: \"projects\/{project_id}\/logs\/healthcare.googleapis.com%2Fimport_annotations\" operation: { id: \"projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/operations\/{operation_id}\" producer: \"healthcare.googleapis.com\/ImportAnnotations\" } receiveTimestamp: \"TIMESTAMP\" resource: { labels: { annotation_store_id: \"{annotation_store_id}\" dataset_id: \"{dataset_id}\" location: \"{location_id}\" project_id: \"{project_id}\" } type: \"healthcare_annotation_store\" } severity: \"ERROR\" timestamp: \"TIMESTAMP\" ```"
                    },
                    "export": {
                      "id": "healthcare.projects.locations.datasets.annotationStores.export",
                      "path": "v1alpha2/{+name}:export",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}:export",
                      "httpMethod": "POST",
                      "parameters": {
                        "name": {
                          "description": "The name of the Annotation store to export annotations to, in the format of `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/annotationStores\/{annotation_store_id}`.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/annotationStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "ExportAnnotationsRequest"
                      },
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Export Annotations from the Annotation store. If the request is successful, a detailed response is returned of type ExportAnnotationsResponse, contained in the response field when the operation finishes. The metadata field type is OperationMetadata. Errors are logged to Cloud Logging (see [Viewing logs](\/healthcare\/docs\/how-tos\/logging) and ImportAnnotations for a sample log entry)."
                    },
                    "evaluate": {
                      "id": "healthcare.projects.locations.datasets.annotationStores.evaluate",
                      "path": "v1alpha2/{+name}:evaluate",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}:evaluate",
                      "httpMethod": "POST",
                      "parameters": {
                        "name": {
                          "description": "The Annotation store to compare against `golden_store`, in the format of `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/annotationStores\/{annotation_store_id}`.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/annotationStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "EvaluateAnnotationStoreRequest"
                      },
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Evaluate an Annotation store against a ground truth Annotation store. When the operation finishes successfully, a detailed response is returned of type EvaluateAnnotationStoreResponse, contained in the response. The metadata field type is OperationMetadata. Errors are logged to Cloud Logging (see [Viewing logs](\/healthcare\/docs\/how-tos\/logging) and ImportAnnotations for a sample log entry)."
                    }
                  }
                },
                "consentStores": {
                  "methods": {
                    "setIamPolicy": {
                      "id": "healthcare.projects.locations.datasets.consentStores.setIamPolicy",
                      "path": "v1alpha2/{+resource}:setIamPolicy",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:setIamPolicy",
                      "httpMethod": "POST",
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "request": {
                        "$ref": "SetIamPolicyRequest"
                      },
                      "response": {
                        "$ref": "Policy"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."
                    },
                    "getIamPolicy": {
                      "id": "healthcare.projects.locations.datasets.consentStores.getIamPolicy",
                      "path": "v1alpha2/{+resource}:getIamPolicy",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:getIamPolicy",
                      "httpMethod": "GET",
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+$",
                          "type": "string"
                        },
                        "options.requestedPolicyVersion": {
                          "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies).",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "response": {
                        "$ref": "Policy"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."
                    },
                    "testIamPermissions": {
                      "id": "healthcare.projects.locations.datasets.consentStores.testIamPermissions",
                      "path": "v1alpha2/{+resource}:testIamPermissions",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:testIamPermissions",
                      "httpMethod": "POST",
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "request": {
                        "$ref": "TestIamPermissionsRequest"
                      },
                      "response": {
                        "$ref": "TestIamPermissionsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning."
                    },
                    "create": {
                      "id": "healthcare.projects.locations.datasets.consentStores.create",
                      "path": "v1alpha2/{+parent}/consentStores",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores",
                      "httpMethod": "POST",
                      "parameters": {
                        "parent": {
                          "description": "Required. The name of the dataset this Consent store belongs to.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+$",
                          "type": "string"
                        },
                        "consentStoreId": {
                          "description": "The ID of the consent store to create. The string must match the following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "request": {
                        "$ref": "ConsentStore"
                      },
                      "response": {
                        "$ref": "ConsentStore"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Creates a new Consent store in the parent dataset. Attempting to create a consent store with the same ID as an existing store fails with an ALREADY_EXISTS error."
                    },
                    "get": {
                      "id": "healthcare.projects.locations.datasets.consentStores.get",
                      "path": "v1alpha2/{+name}",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}",
                      "httpMethod": "GET",
                      "parameters": {
                        "name": {
                          "description": "Required. The resource name of the Consent store to get.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "ConsentStore"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Gets the specified Consent store."
                    },
                    "delete": {
                      "id": "healthcare.projects.locations.datasets.consentStores.delete",
                      "path": "v1alpha2/{+name}",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}",
                      "httpMethod": "DELETE",
                      "parameters": {
                        "name": {
                          "description": "Required. The resource name of the Consent store to delete.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "Empty"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Deletes the specified Consent store and removes all consent data in the specified consent store."
                    },
                    "patch": {
                      "id": "healthcare.projects.locations.datasets.consentStores.patch",
                      "path": "v1alpha2/{+name}",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}",
                      "httpMethod": "PATCH",
                      "parameters": {
                        "name": {
                          "description": "Resource name of the Consent store, of the form `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/consentStores\/{consent_store_id}`.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+$",
                          "type": "string"
                        },
                        "updateMask": {
                          "description": "The update mask that applies to the resource. For the `FieldMask` definition, see https:\/\/developers.google.com\/protocol-buffers\/docs\/reference\/google.protobuf#fieldmask. The `labels` field is allowed to be updated.",
                          "location": "query",
                          "type": "string",
                          "format": "google-fieldmask"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "ConsentStore"
                      },
                      "response": {
                        "$ref": "ConsentStore"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Updates the specified Consent store."
                    },
                    "list": {
                      "id": "healthcare.projects.locations.datasets.consentStores.list",
                      "path": "v1alpha2/{+parent}/consentStores",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores",
                      "httpMethod": "GET",
                      "parameters": {
                        "parent": {
                          "description": "Required. Name of the dataset.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+$",
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "Limit on the number of Consent stores to return in a single response. If zero the default page size of 100 is used.",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        },
                        "pageToken": {
                          "description": "Token to retrieve the next page of results or empty to get the first page.",
                          "location": "query",
                          "type": "string"
                        },
                        "filter": {
                          "description": "Restricts the stores returned to those matching a filter. Syntax: https:\/\/cloud.google.com\/appengine\/docs\/standard\/python\/search\/query_strings. Only filtering on labels is supported. For example, `labels.key=value`.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "ListConsentStoresResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Lists the Consent stores in the given dataset."
                    },
                    "checkDataAccess": {
                      "id": "healthcare.projects.locations.datasets.consentStores.checkDataAccess",
                      "path": "v1alpha2/{+consentStore}:checkDataAccess",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:checkDataAccess",
                      "httpMethod": "POST",
                      "parameters": {
                        "consentStore": {
                          "description": "Name of the Consent store where the requested data_id is stored, of the form `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/consentStores\/{consent_store_id}`.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "consentStore"
                      ],
                      "request": {
                        "$ref": "CheckDataAccessRequest"
                      },
                      "response": {
                        "$ref": "CheckDataAccessResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Checks if a particular data_id of a User data mapping in the given Consent store is consented for a given use."
                    },
                    "queryAccessibleData": {
                      "id": "healthcare.projects.locations.datasets.consentStores.queryAccessibleData",
                      "path": "v1alpha2/{+consentStore}:queryAccessibleData",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:queryAccessibleData",
                      "httpMethod": "POST",
                      "parameters": {
                        "consentStore": {
                          "description": "Name of the Consent store to retrieve user data mappings from.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "consentStore"
                      ],
                      "request": {
                        "$ref": "QueryAccessibleDataRequest"
                      },
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Queries all data_ids that are consented for a given use in the given Consent store and writes them to a specified destination. The returned Operation includes a progress counter for the number of User data mappings processed. Errors are logged to Cloud Logging (see [Viewing logs] (\/healthcare\/docs\/how-tos\/logging)). For example, the following sample log entry shows a `failed to evaluate consent policy` error that occurred during a QueryAccessibleData call to consent store `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/consentStores\/{consent_store_id}`. ```json jsonPayload: { @type: \"type.googleapis.com\/google.cloud.healthcare.logging.QueryAccessibleDataLogEntry\" error: { code: 9 message: \"failed to evaluate consent policy\" } resourceName: \"projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/consentStores\/{consent_store_id}\/consents\/{consent_id}\" } logName: \"projects\/{project_id}\/logs\/healthcare.googleapis.com%2Fquery_accessible_data\" operation: { id: \"projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/operations\/{operation_id}\" producer: \"healthcare.googleapis.com\/QueryAccessibleData\" } receiveTimestamp: \"TIMESTAMP\" resource: { labels: { consent_store_id: \"{consent_store_id}\" dataset_id: \"{dataset_id}\" location: \"{location_id}\" project_id: \"{project_id}\" } type: \"healthcare_consent_store\" } severity: \"ERROR\" timestamp: \"TIMESTAMP\" ```"
                    },
                    "evaluateUserConsents": {
                      "id": "healthcare.projects.locations.datasets.consentStores.evaluateUserConsents",
                      "path": "v1alpha2/{+consentStore}:evaluateUserConsents",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:evaluateUserConsents",
                      "httpMethod": "POST",
                      "parameters": {
                        "consentStore": {
                          "description": "Name of the Consent store to retrieve user data mappings from.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "consentStore"
                      ],
                      "request": {
                        "$ref": "EvaluateUserConsentsRequest"
                      },
                      "response": {
                        "$ref": "EvaluateUserConsentsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Evaluates the end user's Consents for all matching User data mappings. Note: User data mappings are indexed asynchronously, so there might be a slight delay between the time a mapping is created or updated and when it is included in the results of EvaluateUserConsents."
                    }
                  }
                  ,
                  "resources": {
                    "attributeDefinitions": {
                      "methods": {
                        "create": {
                          "id": "healthcare.projects.locations.datasets.consentStores.attributeDefinitions.create",
                          "path": "v1alpha2/{+parent}/attributeDefinitions",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/attributeDefinitions",
                          "httpMethod": "POST",
                          "parameters": {
                            "parent": {
                              "description": "Required. The name of the consent store that this Attribute definition belongs to.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+$",
                              "type": "string"
                            },
                            "attributeDefinitionId": {
                              "description": "The ID of the Attribute definition to create. The string must match the following regex: `_a-zA-Z{0,255}` and must not be a reserved keyword within the Common Expression Language as listed on https:\/\/github.com\/google\/cel-spec\/blob\/master\/doc\/langdef.md.",
                              "location": "query",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "parent"
                          ],
                          "request": {
                            "$ref": "AttributeDefinition"
                          },
                          "response": {
                            "$ref": "AttributeDefinition"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Creates a new Attribute definition in the parent Consent store."
                        },
                        "get": {
                          "id": "healthcare.projects.locations.datasets.consentStores.attributeDefinitions.get",
                          "path": "v1alpha2/{+name}",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/attributeDefinitions/{attributeDefinitionsId}",
                          "httpMethod": "GET",
                          "parameters": {
                            "name": {
                              "description": "Required. The resource name of the Attribute definition to get.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+\/attributeDefinitions\/[^\/]+$",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "response": {
                            "$ref": "AttributeDefinition"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Gets the specified Attribute definition."
                        },
                        "delete": {
                          "id": "healthcare.projects.locations.datasets.consentStores.attributeDefinitions.delete",
                          "path": "v1alpha2/{+name}",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/attributeDefinitions/{attributeDefinitionsId}",
                          "httpMethod": "DELETE",
                          "parameters": {
                            "name": {
                              "description": "Required. The resource name of the Attribute definition to delete.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+\/attributeDefinitions\/[^\/]+$",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "response": {
                            "$ref": "Empty"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Deletes the specified Attribute definition. Fails if it is referenced by any User data mapping, the latest revision of any Consent, or the latest approved revision of any Consent content."
                        },
                        "patch": {
                          "id": "healthcare.projects.locations.datasets.consentStores.attributeDefinitions.patch",
                          "path": "v1alpha2/{+name}",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/attributeDefinitions/{attributeDefinitionsId}",
                          "httpMethod": "PATCH",
                          "parameters": {
                            "name": {
                              "description": "Resource name of the attribute definition, of the form `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/consentStores\/{consent_store_id}\/attributeDefinitions\/{attribute_definition_id}`.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+\/attributeDefinitions\/[^\/]+$",
                              "type": "string"
                            },
                            "updateMask": {
                              "description": "The update mask that applies to the resource. For the `FieldMask` definition, see https:\/\/developers.google.com\/protocol-buffers\/docs\/reference\/google.protobuf#fieldmask. The `description`, `allowed_values`, `consent_default_values`, and `data_mapping_default_value` fields are allowed to be updated. The updated `allowed_values` must contain all values from the previous `allowed_values`.",
                              "location": "query",
                              "type": "string",
                              "format": "google-fieldmask"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "request": {
                            "$ref": "AttributeDefinition"
                          },
                          "response": {
                            "$ref": "AttributeDefinition"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Updates the specified Attribute definition."
                        },
                        "list": {
                          "id": "healthcare.projects.locations.datasets.consentStores.attributeDefinitions.list",
                          "path": "v1alpha2/{+parent}/attributeDefinitions",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/attributeDefinitions",
                          "httpMethod": "GET",
                          "parameters": {
                            "parent": {
                              "description": "Required. Name of the Consent store to retrieve attribute definitions from.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+$",
                              "type": "string"
                            },
                            "pageSize": {
                              "description": "Limit on the number of attribute definitions to return in a single response. If zero the default page size of 100 is used.",
                              "location": "query",
                              "type": "integer",
                              "format": "int32"
                            },
                            "pageToken": {
                              "description": "Token to retrieve the next page of results or empty to get the first page.",
                              "location": "query",
                              "type": "string"
                            },
                            "filter": {
                              "description": "Restricts the attributes returned to those matching a filter. Syntax: https:\/\/cloud.google.com\/appengine\/docs\/standard\/python\/search\/query_strings. The only field available for filtering is `category`.",
                              "location": "query",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "parent"
                          ],
                          "response": {
                            "$ref": "ListAttributeDefinitionsResponse"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Lists the Attribute definitions in the given Consent store."
                        }
                      }
                    },
                    "consentArtifacts": {
                      "methods": {
                        "create": {
                          "id": "healthcare.projects.locations.datasets.consentStores.consentArtifacts.create",
                          "path": "v1alpha2/{+parent}/consentArtifacts",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consentArtifacts",
                          "httpMethod": "POST",
                          "parameters": {
                            "parent": {
                              "description": "Required. The name of the Consent store this consent artifact belongs to.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+$",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "parent"
                          ],
                          "request": {
                            "$ref": "ConsentArtifact"
                          },
                          "response": {
                            "$ref": "ConsentArtifact"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Creates a new Consent artifact in the parent Consent store."
                        },
                        "get": {
                          "id": "healthcare.projects.locations.datasets.consentStores.consentArtifacts.get",
                          "path": "v1alpha2/{+name}",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consentArtifacts/{consentArtifactsId}",
                          "httpMethod": "GET",
                          "parameters": {
                            "name": {
                              "description": "Required. The resource name of the consent artifact to retrieve.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+\/consentArtifacts\/[^\/]+$",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "response": {
                            "$ref": "ConsentArtifact"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Gets the specified Consent artifact."
                        },
                        "delete": {
                          "id": "healthcare.projects.locations.datasets.consentStores.consentArtifacts.delete",
                          "path": "v1alpha2/{+name}",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consentArtifacts/{consentArtifactsId}",
                          "httpMethod": "DELETE",
                          "parameters": {
                            "name": {
                              "description": "Required. The resource name of the consent artifact to delete.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+\/consentArtifacts\/[^\/]+$",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "response": {
                            "$ref": "Empty"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Deletes the specified Consent artifact. Fails if it is referenced by the latest revision of any Consent."
                        },
                        "list": {
                          "id": "healthcare.projects.locations.datasets.consentStores.consentArtifacts.list",
                          "path": "v1alpha2/{+parent}/consentArtifacts",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consentArtifacts",
                          "httpMethod": "GET",
                          "parameters": {
                            "parent": {
                              "description": "Required. Name of the Consent store to retrieve consent artifacts from.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+$",
                              "type": "string"
                            },
                            "pageSize": {
                              "description": "Limit on the number of consent artifacts to return in a single response. If zero the default page size of 100 is used.",
                              "location": "query",
                              "type": "integer",
                              "format": "int32"
                            },
                            "pageToken": {
                              "description": "The next_page_token value returned from the previous List request, if any.",
                              "location": "query",
                              "type": "string"
                            },
                            "filter": {
                              "description": "Restricts the artifacts returned to those matching a filter. Syntax: https:\/\/cloud.google.com\/appengine\/docs\/standard\/python\/search\/query_strings The fields available for filtering are: - user_id - consent_content_version",
                              "location": "query",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "parent"
                          ],
                          "response": {
                            "$ref": "ListConsentArtifactsResponse"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Lists the Consent artifacts in the given Consent store."
                        }
                      }
                    },
                    "consents": {
                      "methods": {
                        "create": {
                          "id": "healthcare.projects.locations.datasets.consentStores.consents.create",
                          "path": "v1alpha2/{+parent}/consents",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents",
                          "httpMethod": "POST",
                          "parameters": {
                            "parent": {
                              "description": "Required. Name of the consent store.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+$",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "parent"
                          ],
                          "request": {
                            "$ref": "Consent"
                          },
                          "response": {
                            "$ref": "Consent"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Creates a new Consent in the parent Consent store."
                        },
                        "get": {
                          "id": "healthcare.projects.locations.datasets.consentStores.consents.get",
                          "path": "v1alpha2/{+name}",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}",
                          "httpMethod": "GET",
                          "parameters": {
                            "name": {
                              "description": "Required. The resource name of the consent to retrieve, of the form `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/consentStores\/{consent_store_id}\/consents\/{consent_id}`. In order to retrieve a previous revision of the consent, also provide the revision ID: `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/consentStores\/{consent_store_id}\/consents\/{consent_id}@{revision_id}`",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+\/consents\/[^\/]+$",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "response": {
                            "$ref": "Consent"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Gets the specified revision of a Consent, or the latest revision if `revision_id` is not specified in the resource name."
                        },
                        "delete": {
                          "id": "healthcare.projects.locations.datasets.consentStores.consents.delete",
                          "path": "v1alpha2/{+name}",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}",
                          "httpMethod": "DELETE",
                          "parameters": {
                            "name": {
                              "description": "Required. The resource name of the consent to delete, of the form `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/consentStores\/{consent_store_id}\/consents\/{consent_id}`. An INVALID_ARGUMENT error occurs if `revision_id` is specified in the name.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+\/consents\/[^\/]+$",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "response": {
                            "$ref": "Empty"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Deletes the Consent and its revisions. To keep a record of the Consent but mark it inactive, see [RevokeConsent]. To delete a revision of a Consent, see [DeleteConsentRevision]. This operation does not delete the related consent artifact."
                        },
                        "patch": {
                          "id": "healthcare.projects.locations.datasets.consentStores.consents.patch",
                          "path": "v1alpha2/{+name}",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}",
                          "httpMethod": "PATCH",
                          "parameters": {
                            "name": {
                              "description": "Resource name of the Consent, of the form `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/consentStores\/{consent_store_id}\/consents\/{consent_id}`.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+\/consents\/[^\/]+$",
                              "type": "string"
                            },
                            "updateMask": {
                              "description": "The update mask to apply to the resource. For the `FieldMask` definition, see https:\/\/developers.google.com\/protocol-buffers\/docs\/reference\/google.protobuf#fieldmask. The `user_id`, `policies`, and `consent_artifact` fields can be updated.",
                              "location": "query",
                              "type": "string",
                              "format": "google-fieldmask"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "request": {
                            "$ref": "Consent"
                          },
                          "response": {
                            "$ref": "Consent"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Updates the latest revision of the specified Consent by committing a new revision with the changes. A FAILED_PRECONDITION error occurs if the latest revision of the given consent is in the `REJECTED` or `REVOKED` state."
                        },
                        "list": {
                          "id": "healthcare.projects.locations.datasets.consentStores.consents.list",
                          "path": "v1alpha2/{+parent}/consents",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents",
                          "httpMethod": "GET",
                          "parameters": {
                            "parent": {
                              "description": "Required. Name of the Consent store to retrieve consents from.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+$",
                              "type": "string"
                            },
                            "pageSize": {
                              "description": "Limit on the number of consents to return in a single response. If zero the default page size of 100 is used.",
                              "location": "query",
                              "type": "integer",
                              "format": "int32"
                            },
                            "pageToken": {
                              "description": "The next_page_token value returned from the previous List request, if any.",
                              "location": "query",
                              "type": "string"
                            },
                            "filter": {
                              "description": "Restricts the consents returned to those matching a filter. Syntax: https:\/\/cloud.google.com\/appengine\/docs\/standard\/python\/search\/query_strings The fields available for filtering are: - user_id - consent_artifact - state - revision_create_time - expire_time - metadata. For example, `Metadata(\"key\")=\"value\"` or `HasMetadata(\"key\")`.",
                              "location": "query",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "parent"
                          ],
                          "response": {
                            "$ref": "ListConsentsResponse"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Lists the Consent in the given Consent store, returning each consent's latest revision."
                        },
                        "revoke": {
                          "id": "healthcare.projects.locations.datasets.consentStores.consents.revoke",
                          "path": "v1alpha2/{+name}:revoke",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:revoke",
                          "httpMethod": "POST",
                          "parameters": {
                            "name": {
                              "description": "Required. The resource name of the consent to revoke, of the form `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/consentStores\/{consent_store_id}\/consents\/{consent_id}`. An INVALID_ARGUMENT error occurs if `revision_id` is specified in the name.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+\/consents\/[^\/]+$",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "request": {
                            "$ref": "RevokeConsentRequest"
                          },
                          "response": {
                            "$ref": "Consent"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Revokes the latest revision of the specified Consent by committing a new revision with `state` updated to `REVOKED`. If the latest revision of the given consent is in the `REVOKED` state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the given consent is in `DRAFT` or `REJECTED` state."
                        }
                      }
                    },
                    "userDataMappings": {
                      "methods": {
                        "create": {
                          "id": "healthcare.projects.locations.datasets.consentStores.userDataMappings.create",
                          "path": "v1alpha2/{+parent}/userDataMappings",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings",
                          "httpMethod": "POST",
                          "parameters": {
                            "parent": {
                              "description": "Required. Name of the consent store.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+$",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "parent"
                          ],
                          "request": {
                            "$ref": "UserDataMapping"
                          },
                          "response": {
                            "$ref": "UserDataMapping"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Creates a new User data mapping in the parent Consent store."
                        },
                        "get": {
                          "id": "healthcare.projects.locations.datasets.consentStores.userDataMappings.get",
                          "path": "v1alpha2/{+name}",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings/{userDataMappingsId}",
                          "httpMethod": "GET",
                          "parameters": {
                            "name": {
                              "description": "Required. The resource name of the user data mapping to retrieve.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+\/userDataMappings\/[^\/]+$",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "response": {
                            "$ref": "UserDataMapping"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Gets the specified User data mapping."
                        },
                        "delete": {
                          "id": "healthcare.projects.locations.datasets.consentStores.userDataMappings.delete",
                          "path": "v1alpha2/{+name}",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings/{userDataMappingsId}",
                          "httpMethod": "DELETE",
                          "parameters": {
                            "name": {
                              "description": "Required. The resource name of the user data mapping to delete.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+\/userDataMappings\/[^\/]+$",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "response": {
                            "$ref": "Empty"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Deletes the specified User data mapping."
                        },
                        "patch": {
                          "id": "healthcare.projects.locations.datasets.consentStores.userDataMappings.patch",
                          "path": "v1alpha2/{+name}",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings/{userDataMappingsId}",
                          "httpMethod": "PATCH",
                          "parameters": {
                            "name": {
                              "description": "Resource name of the User data mapping, of the form `projects\/{project_id}\/locations\/{location_id}\/datasets\/{dataset_id}\/consentStores\/{consent_store_id}\/userDataMappings\/{user_data_mapping_id}`.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+\/userDataMappings\/[^\/]+$",
                              "type": "string"
                            },
                            "updateMask": {
                              "description": "The update mask that applies to the resource. For the `FieldMask` definition, see https:\/\/developers.google.com\/protocol-buffers\/docs\/reference\/google.protobuf#fieldmask.",
                              "location": "query",
                              "type": "string",
                              "format": "google-fieldmask"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "request": {
                            "$ref": "UserDataMapping"
                          },
                          "response": {
                            "$ref": "UserDataMapping"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Updates the specified User data mapping."
                        },
                        "list": {
                          "id": "healthcare.projects.locations.datasets.consentStores.userDataMappings.list",
                          "path": "v1alpha2/{+parent}/userDataMappings",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings",
                          "httpMethod": "GET",
                          "parameters": {
                            "parent": {
                              "description": "Required. Name of the Consent store to retrieve user data mappings from.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+$",
                              "type": "string"
                            },
                            "pageSize": {
                              "description": "Limit on the number of user data mappings to return in a single response. If zero the default page size of 100 is used.",
                              "location": "query",
                              "type": "integer",
                              "format": "int32"
                            },
                            "pageToken": {
                              "description": "Token to retrieve the next page of results or empty to get the first page.",
                              "location": "query",
                              "type": "string"
                            },
                            "filter": {
                              "description": "Restricts the user data mappings returned to those matching a filter. Syntax: https:\/\/cloud.google.com\/appengine\/docs\/standard\/python\/search\/query_strings The fields available for filtering are: - data_id - user_id - archived - archive_time",
                              "location": "query",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "parent"
                          ],
                          "response": {
                            "$ref": "ListUserDataMappingsResponse"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Lists the User data mappings in the given Consent store."
                        },
                        "archive": {
                          "id": "healthcare.projects.locations.datasets.consentStores.userDataMappings.archive",
                          "path": "v1alpha2/{+name}:archive",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings/{userDataMappingsId}:archive",
                          "httpMethod": "POST",
                          "parameters": {
                            "name": {
                              "description": "The resource name of the user data mapping to archive.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/consentStores\/[^\/]+\/userDataMappings\/[^\/]+$",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "request": {
                            "$ref": "ArchiveUserDataMappingRequest"
                          },
                          "response": {
                            "$ref": "ArchiveUserDataMappingResponse"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Archives the specified User data mapping."
                        }
                      }
                    }
                  }
                },
                "operations": {
                  "methods": {
                    "list": {
                      "id": "healthcare.projects.locations.datasets.operations.list",
                      "path": "v1alpha2/{+name}/operations",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/operations",
                      "httpMethod": "GET",
                      "parameters": {
                        "name": {
                          "description": "The name of the operation's parent resource.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+$",
                          "type": "string"
                        },
                        "filter": {
                          "description": "The standard list filter.",
                          "location": "query",
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "The standard list page size.",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        },
                        "pageToken": {
                          "description": "The standard list page token.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "ListOperationsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users\/*\/operations`. To override the binding, API services can add a binding such as `\"\/v1\/{name=users\/*}\/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id."
                    },
                    "get": {
                      "id": "healthcare.projects.locations.datasets.operations.get",
                      "path": "v1alpha2/{+name}",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/operations/{operationsId}",
                      "httpMethod": "GET",
                      "parameters": {
                        "name": {
                          "description": "The name of the operation resource.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/operations\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."
                    },
                    "cancel": {
                      "id": "healthcare.projects.locations.datasets.operations.cancel",
                      "path": "v1alpha2/{+name}:cancel",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/operations/{operationsId}:cancel",
                      "httpMethod": "POST",
                      "parameters": {
                        "name": {
                          "description": "The name of the operation resource to be cancelled.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/datasets\/[^\/]+\/operations\/[^\/]+$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "CancelOperationRequest"
                      },
                      "response": {
                        "$ref": "Empty"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."
                    }
                  }
                }
              }
            },
            "services": {
              "resources": {
                "dataEnclave": {
                  "resources": {
                    "enclaves": {
                      "methods": {
                        "setIamPolicy": {
                          "id": "healthcare.projects.locations.services.dataEnclave.enclaves.setIamPolicy",
                          "path": "v1alpha2/{+resource}:setIamPolicy",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/services/dataEnclave/enclaves/{enclavesId}:setIamPolicy",
                          "httpMethod": "POST",
                          "parameters": {
                            "resource": {
                              "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/services\/dataEnclave\/enclaves\/[^\/]+$",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "resource"
                          ],
                          "request": {
                            "$ref": "SetIamPolicyRequest"
                          },
                          "response": {
                            "$ref": "Policy"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."
                        },
                        "getIamPolicy": {
                          "id": "healthcare.projects.locations.services.dataEnclave.enclaves.getIamPolicy",
                          "path": "v1alpha2/{+resource}:getIamPolicy",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/services/dataEnclave/enclaves/{enclavesId}:getIamPolicy",
                          "httpMethod": "GET",
                          "parameters": {
                            "resource": {
                              "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/services\/dataEnclave\/enclaves\/[^\/]+$",
                              "type": "string"
                            },
                            "options.requestedPolicyVersion": {
                              "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https:\/\/cloud.google.com\/iam\/help\/conditions\/resource-policies).",
                              "location": "query",
                              "type": "integer",
                              "format": "int32"
                            }
                          },
                          "parameterOrder": [
                            "resource"
                          ],
                          "response": {
                            "$ref": "Policy"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."
                        },
                        "testIamPermissions": {
                          "id": "healthcare.projects.locations.services.dataEnclave.enclaves.testIamPermissions",
                          "path": "v1alpha2/{+resource}:testIamPermissions",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/services/dataEnclave/enclaves/{enclavesId}:testIamPermissions",
                          "httpMethod": "POST",
                          "parameters": {
                            "resource": {
                              "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/services\/dataEnclave\/enclaves\/[^\/]+$",
                              "type": "string"
                            }
                          },
                          "parameterOrder": [
                            "resource"
                          ],
                          "request": {
                            "$ref": "TestIamPermissionsRequest"
                          },
                          "response": {
                            "$ref": "TestIamPermissionsResponse"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning."
                        }
                      }
                    }
                  }
                },
                "deidentify": {
                  "methods": {
                    "deidentifyFhirResource": {
                      "id": "healthcare.projects.locations.services.deidentify.deidentifyFhirResource",
                      "path": "v1alpha2/{+name}:deidentifyFhirResource",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/services/deidentify:deidentifyFhirResource",
                      "httpMethod": "POST",
                      "parameters": {
                        "name": {
                          "description": "The name of the service that should handle the request, of the form: `projects\/{project_id}\/locations\/{location_id}\/services\/deidentify`.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/services\/deidentify$",
                          "type": "string"
                        },
                        "version": {
                          "location": "query",
                          "type": "string",
                          "enumDescriptions": [
                            "VERSION_UNSPECIFIED is treated as STU3.",
                            "FHIR version DSTU2.",
                            "FHIR version STU3.",
                            "FHIR version R4."
                          ],
                          "enum": [
                            "VERSION_UNSPECIFIED",
                            "DSTU2",
                            "STU3",
                            "R4"
                          ]
                        },
                        "gcsConfigUri": {
                          "description": "Cloud Storage location to read the JSON DeidentifyConfig from.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "HttpBody"
                      },
                      "response": {
                        "$ref": "HttpBody"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "De-identify a single FHIR resource."
                    },
                    "deidentifyDicomInstance": {
                      "id": "healthcare.projects.locations.services.deidentify.deidentifyDicomInstance",
                      "path": "v1alpha2/{+name}:deidentifyDicomInstance",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/services/deidentify:deidentifyDicomInstance",
                      "httpMethod": "POST",
                      "parameters": {
                        "name": {
                          "description": "The name of the service that should handle the request, of the form: `projects\/{project_id}\/locations\/{location_id}\/services\/deidentify`.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/services\/deidentify$",
                          "type": "string"
                        },
                        "gcsConfigUri": {
                          "description": "Cloud Storage location to read the JSON DeidentifyConfig from, overriding the default config. Must be of the form `gs:\/\/{bucket_id}\/{object_id}`. The Cloud Storage location must grant the Cloud IAM role `roles\/storage.objectViewer` to the project's Cloud Healthcare Service Agent service account.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "HttpBody"
                      },
                      "response": {
                        "$ref": "HttpBody"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "De-identify a single DICOM instance. Uses the ATTRIBUTE_CONFIDENTIALITY_BASIC_PROFILE TagFilterProfile and the REDACT_ALL_TEXT TextRedactionMode."
                    }
                  }
                },
                "nlp": {
                  "methods": {
                    "analyzeEntities": {
                      "id": "healthcare.projects.locations.services.nlp.analyzeEntities",
                      "path": "v1alpha2/{+nlpService}:analyzeEntities",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/services/nlp:analyzeEntities",
                      "httpMethod": "POST",
                      "parameters": {
                        "nlpService": {
                          "description": "The resource name of the service of the form: \"projects\/{project_id}\/locations\/{location_id}\/services\/nlp\".",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects\/[^\/]+\/locations\/[^\/]+\/services\/nlp$",
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "nlpService"
                      ],
                      "request": {
                        "$ref": "AnalyzeEntitiesRequest"
                      },
                      "response": {
                        "$ref": "AnalyzeEntitiesResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Analyze heathcare entity in a document. Its response includes the recognized entity mentions and the relationships between them. AnalyzeEntities uses context aware models to detect entities."
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "basePath": ""
}